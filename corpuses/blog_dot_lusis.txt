I’ve done a lot of tweeting about systemd lately. My internal conscience constantly reminds me of John Allspaw saying that twitter is just pretty much perfect for snarky comments (paraphrase).
Al Tobey asked me a good question:
First mistake is thinking I know wtf is going on. However the question was asked. What “technical” concerns do I have with systemd?
I don’t (sort of). Here are my primary ones:
Yes journald can be setup to use syslog but by default, it’ll use a binary log format. Sure you can use “strings” on it but is anyone seriously considering that a proper way to get to your system logs? In fairness, journalctl provides some nice mechanisms for targeting specific message types, sources and scope but at the expense of having to use journalctl as the unified interface. Keep this tradeoff in mind when I get to the “real problems” section.
On the architecture of systemd, I have a legitimate concern with the scope. Let’s use the image from wikipedia:

I previously stated that systemd provided a nice juicy attack surface. There are valid arguments that not all these components are “core” systemd. Regardless, they are still components and there is an implicit trust relationship with “core” vs “components”. Yes systemd sticks everything in cgroups (another minor issue I have) but with the coming Dockerpocalypse didn’t everyone learn that cgroups were not a security mechanism (nor are containers for that matter)? I still stand by my statement that the “big one” linux exploit will somehow be tied to systemd.
But back to that architecture for a minute. There are a lot of things in there, that while possibly optional, are things I have zero need for where systemd affects me the most. Telephony? Graphical sessions? I didn’t even know what Tizen is before this post (and I think the modified image on wikipedia came from the Tizen wiki). Maybe it’s not required. I can’t tell. Keep this in mind also.
Probably the best argument against the architecture of systemd is from one of the primary authors here. A list of “advantages” that includes the SCM system in use or the fact that there are “Specialized professional consulting and engineering services available” is not a valid technical merit. Finally buried deep in the text near the end, we come to understand the biggest architectural problem of all:
I also personally think that the systemd design motivations are “flawed” at the core:
and
I’m going to go on record and say that this is quite possibly the worst idea to anyone running a server. The acceptable use cases for this are so narrow that it’s hardly justification for everything that followed.
I know my “technical” arguments are flimsy. The fact is there some really cool shit in systemd including many of the things listed in the linked post.
The problem with systemd is that it is the single most invasive change to Linux in a long line of changes that ultimately mean that Linux may be headed towards uselessness as a server operating system.
I’m going to state up front (and people are free to disagree with me) that I believe you cannot provide a distribution of Linux that is both designed for the “server” and the “desktop” and provide a product that is worth using on either.
We’ve see this happening with regularity in other places such as d-bus. Again, these things aren’t neccessarily BAD things (and kdbus will enable some REALLY cool shit) but at what cost? I think motivation matters considerably here.
Understand that I exclusively run “linux on the desktop” and I have for a VERY long time. I have a vested interest in Linux not sucking on the desktop. However I have a GREATER interest in Linux on the server not sucking. My linux desktop doesn’t send me pager alerts at 3AM when pulseaudio shits the bed because of some USB interrupt issue with my headset. Pagerduty will, however, call me on the phone and wake up my sleeping partner when there’s a kernel panic.
In fact, I’ll go even further and say that ANY kernel or distro related change that was driven by “the linux desktop” is suspect to me.
The problem is I don’t have that luxury. I have competing responsiblities. I have to provide a system that runs reliably and can easily be reasoned about and yet I have to build it on distributions created by people who consider how long it takes to get to the fucking GDM login screen and if shutting the laptop lid will cause the system to hibernate properly or not.
I realize that there is overlap in these cases. A power efficient operating system has benefit to me sure but it’s not my primary concern.
This could be classified as technical but it’s not just about the project itself. Systemd IS an immature system. Wikipedia puts the initial release as 3/30/2010. Lennart’s “announcement” has a date of 04/30/2010. Let’s call it four years among friends.
We have a system that has gone from a blog post to being the “comprehensive, integrated and modular platform providing everything needed to bootstrap and maintain an operating system’s userspace”.
I don’t think so.
Let’s also not forget that systemd uptake was LARGELY restricted to Fedora up until the point that the Gnome team decided that logind would be a future requirement. I want that to sink in VERY clearly.
Systemd did not get to the place it was in UNTIL it became, by proxy, a requirement for GNOME. What did that give us?
Now I’m the first person to complain about distros keeping way old versions of stuff around but this is ridiculous. You cannot tell me that is considered “baked” by any stretch of the imagination.
I can’t say much here except that my experience with previous projects from Poettering (pusleaudio and avahi) give me very little faith in systemd.
Is that a fair assessment? I think it has relevance. There’s a question of what the driving force is behind someone’s logic. There’s a question of previous quality. Does the person go after the new shiny and abandon some previous project?
The only upshot, I guess, is that distros have a vested interest now as there is no avoiding systemd. This is likely a change that will never get rolled back. We can only hope that the Linux certain people want is the Linux that meets our needs as system administrators.
This issue is probably irrelevant to most people but it bothers me greatly.
With the systemd adoption comes the first steps to more applications being “Linux” only. When the creator of systemd says that we should ignore POSIX compatability and systemd itself relies on Linux-only features like cgroups there’s really little hope left. GNOME requiring logind means realistically that GNOME will only ever run on Linux. Will something step up and take its place? Maybe but it will likely see zero adoption and be a niche player in the overall scheme.
Linux is becoming the thing that we adopted Linux to get away from.
I am fully willing to concede that systemd is going to enable some really cool stuff. CoreOS has adopted nspawn. Unit files can provide a straight up dead simple mechanism for applications to daemonize themselves. Finally you can say “just daemonize this command” for me. Cgroups integration is really quite awesome as well. I’m totally for Linux adopting some of these awesome new things.
The problems I have are the tradeoffs. This is very similar to a previous discussion I was involved in regarding another tool. In this case you came for cgroups and faster boot times(*) and you got stuck with:
Oddly enough, the thing that is giving more uniformity to Linux is making it less “Linux” to me.
I am, as always, willing to be corrected in places where I got things wrong. Please be aware that I check in for comments on posts and don’t get notified on new ones. If you feel like the discussion doesn’t cleanly fit in a comment, feel free to post a gist and I’ll respond there and link here.
(*) The fastest part of booting my servers is the init. It’s the 7 minutes of POST+device enumeration that takes more time. My instances in CloudStack are nearly instant boot as well.
Note this post has comments disabled. This is a first for me but if someone wants to ask me anything else, there are multiple personal ways to contact me.
Recently I posted a message to the chef-users mailing list. It was a hard post for me to write because I was attempting to be as tactful as possible about the issue. While I think it was the right move and some good came out of it, I now feel like I have to defend myself for some reason.
My concern over Berkshelf came from one single place, what is the implication to Chef (the tool) itself where everything in the ecosystem adopts Berkshelf for dependency solving.
Why do I care? Because EVERY SINGLE EXPERIENCE I’ve had with Berkshelf has been crappy. I’m never quiet about crappy software. Ask anyone I work with. I’m just as matter of fact about it in our own software as well as software I’ve had to use.
Understand that my frustration with Berkshelf came out of using it with omnibus early on and the resultant breakage from either vagrant-berkshelf or omnibus. Every attempt I’ve made to use Berkshelf internally has ended badly including restoring my local checkout from an internal repo.
You can ask anyone on our operations team but I have said if our team decides we want to use Berkshelf then we’ll use it. Multiple attempts have been tried and everyone has come away with a bad experience.
Why is that? Why is something as simple as a dependency solver so painful? Julian Dunn said it best:
I hope this makes my concerns about where Berkshelf itself is going in Chef much more clear. No one is arguing that depsolving isn’t a problem. The issue is that along with that comes a set of entirely unrelated things. If the entire Chef ecosystem is moving to Berkshelf (the depsolver) plus Berkshelf (the everything else) then, yes, that lessens the value of the ecosystem to me. I stand by my statement that Berkshelf is impossible to avoid these days because it IS integrated into every part of the ecosystem regardless if it’s actually a requirement of chef itself.
Understand I am not paid to work on Chef, Chef ecosystem tools or anything else. I am paid to keep our applications and servers running. To do this, we leverage tools like Artifactory Pro, Chef, Jenkins, Rundeck, Omnibus, Vagrant, Nginx and countless others. If any of those tools start causing an impediment to our ability to ship then we have an obligation to revisit if that tool is the right fit. Maybe we’ve outgrown it. Maybe the tool (or its ecosystem) has taken a different approach. In the end it doesn’t matter. If the tool isn’t working, we either have to deal with finding a replacement or fight it until we can find (or create) a replacement. Every tool choice we make has implications on everything from availability to business agility to how often people get woken up at night.
I’m truly sorry if people took these criticisms personally. I realize the discussion got heated and others were a bit more stern in the criticism they used. I never asked anyone to “come to my defense”. I also have never pushed my view on anyone else and told them they shouldn’t use Berkshelf. I’ve been blunt about my experiences and pain points but never said either “You shouldn’t use Berkshelf or I don’t think you should use Berkshelf”.
The people working on these tools are nice people (at least the ones I’ve met in person). I realize how hard it is to separate the opinion of something you’ve created or maintain from yourself. Your effort in maintaining opensource software is truly appreciated.
The last thing I want to say in my defense is this. If you think that any of this over the past few days is somehow my fault or that I started all this, that’s simply wrong. I addressed this in the mailing list post. If you want to be mad at ME that’s fine but consider this. You don’t always get negative feedback from your users or your customers. At best you get a small chance to salvage the relationship from a public complaint but more often that not, people just go away mad.
The problem is that this carries over in to discussions you never hear about. Joe asks Sally her opinion on X and Sally recounts her personal experience. This shapes Joe’s perception of X.
If anyone would like to contact me about this, I will be glad to talk about it as time permits but I’m this is last I plan on talking about it in public.
I’ve gotten quite a bit of constructive feedback on the PaaS realism post and I wanted to aggregate it here.
I was humbled to see a very awesome post from Luke Meyer who works on the OpenShift team.  I think if you are going to deploy OpenShift, his post is very important to read.
I wanted to respond to a few points specifically he made (and again say thank you for taking the time to respond/educate me)
Luke is absoltely correct that statefulness and stateful requirements are not a limitation of a PaaS. I’ll address this a bit at the bottom a bit more clearly but I would say the issue is AMPLIFIED by a PaaS.
Luke points out that database cartridges on OpenShift are not redundant. I was informed that there IS an HA cartridge of PGSQL available though it appears to be a commercial offering. The marketing fluff doesn’t go into any useful information to clarify how that works (and I’ve not yet dug in to see if there’s freely available tech information).
And frankly, similarly to the state issue, database usage is pretty app specific. One thing I take issue with is that if you do end up using an external DB, have you really bought yourself that much? Yes your application has a common ‘environment’ to it now but there’s still this non-PaaS component that someone has to use. Unless you’re setting up an external development database you now have a tangible difference between production and development that you have to account for. Again, this is not SPECIFIC to a PaaS but it is a variable that I think gets glossed over.
I think this came across incorrectly in my original post. If your application requires persistant storage, you’ve already hit the first strike in my “Is your app ready” list. If you are using a platform as a service and you require some form of persistent storage, you should go back to the drawing board.
I can’t go into details but I can tell you this is definitely an issue. A predictable enterprise IT security bullshit issue but an issue none the less. As in a complete non-starter issue.
I’m going to hold off on this until the end because this ties into an overarching concern/commentary I have.
I think everyone should read the rest of Luke’s post that I’m not responding to specifically. It’s a very well thought out post and he makes very excellent points. In fact at the end he does ask a very legitimate question:
I didn’t get much feedback on CF as I’d liked but in fairness I didn’t give CF the same attention as I did OpenShift. I did, however, get quite a bit of good information from Twitter from both Dave McCrory and James Watters as well as someone I’m not comfortable naming considering it was not public communication.
Before I address the CF specifics, however, I think the most critical deciding factor in why NOT to choose CF right now is that it’s undergoing a rewrite. I don’t know what the upgrade path for that rewrite is. My guess is it’s a parallel deploy and then migrate considering the scope of the change but someone PLEASE correct me if I’m wrong on that.
Based on what I’ve seen, the rewrite ACTUALLY sounds like it will make CF a solid choice. The problem here is that standing up a system like CF (or OpenShift or even OpenStack) are not things that should be taken lightly. You are going to be putting your PRODUCTION workloads on these systems. If you stand up CF now and then come back in three to six months telling everyone you have to transition to a new setup (regardless of the migration process), you risk burning a lot of personal capital.
Now on to the feedback
I incorrectly stated that CF used LXC and according to both Dave and James, that was incorrect. I can’t find the link that made me think that (poor form on my part). This is currently controlled by Warden (as I grok it).
James pointed me to an interesting blog post about how CF handles session state. One thing that’s interesting about this post is that it honestly isn’t even CF specific. However it still doesn’t address my concern about databases on a PaaS.
So the demo application is using redis as a session store. Great! We’re going to ignore the work that Kyle Kingsbury did on Redis with Jepsen for a minute.
What this article DOESN’T cover is how might I deploy a redis “cluster” to CF:
The post goes into terribly awesome detail about how to make your app handle the reconnection while conviently leaving out how one might deal with the loss of the redis instance itself. I mean let’s be fair. This post basically just told you how to write reconnect logic. It gives you all the APP bits but nothing about the INFRASTRUCTURE bits. I’ll address this at the end but it’s just more of the kind of thing that is driving me crazy about the magical PaaS landscape.
I’m going to disagree with James here. This video was recently posted from the CloudFoundry conference. While Onsi (who is now my new favorite speaker btw), doesn’t call these things “bugs”, I would consider the issues he brings up and the end results to be bugs. Again this is subjective but it does get to my primary area of concern addressed below.
James pointed me to this blog post about SAP building their nexgen PaaS on CF. While this is interesting and exciting (especially coming from a legacy like SAP) it means very little to me.
I said this SEVERAL times and reiterated it on Twitter but I want to clarify it one more time:
My questions and concerns, while very much focused on the developer experience, are MORE focused on the OPERATIONAL experience of running any of these products. Yes, there may be “hundreds of thousands of production apps” running on CloudFoundry (to quote James) but I want to know what the OPERATIONAL burden is to running those.
These are the things I care about (outside of the developer experience):
and this is just the SHORT list.
When Luke tells me the operations team running the hosted version of OpenShift says
That’s great but doesn’t mean ANYTHING to me. What matters to me is MY operational experience with MongoDB. Here I have one data point as a ‘positive’ and in my own experience and the documented experience of others AS well as the actual math done by Kyle Kingsbury with Jepsen, MongoDB is not suitable for any production workload I wish to manage.
Luke says “Was the use of MongoDB your only criticism here?” to which I would say “It’s not the only concern but it is the single LARGEST concern I have with OpenShift and one that immediately rules it out for me”.
Operations is hard to back with science in the same way that doing a Jepsen series is. In the end what we have to go in is best worded by my coworker Tim Freeman:
If the message here isn’t clear, the experience of running a platform by the authors of the platform means VERY little to me when it comes to deciding if I or my company should run it. There are plenty of tools I use daily that are SaaS that run on MongoDB (that I’m aware of and more that I’m not). There’s a valid argument about “should I trust someone who would wilfully choose MongoDB” but that’s not something I control. If the service does what I need and I haven’t been directly affected by MongoDB’s issues then I really don’t have any room to complain. If YOUR ops team wants to run product X, that’s great. My duty and responsibility is to my ops team, my developers and my business units.
Mark Imbriaco brought up a point that I do agree with (and explicitly state in my previous post) in response to me stating this concern:
but there is, again, a very subtle distinction here. An unspoken word and a bit of a mismatch in what I’m talking about. Let me restate Mark’s tweet with that word and clarify what I think he meant and what I definitely meant (Mark please please correct me if I’m wrong in your intention here):
Mark is 1000% right. Supporting a PaaS-hosted application is infinitely less complex than multiple inconsistent ones.
Supporting a PaaS however, is not infinitely less complex. It is MORE complex. Mark did follow on with this:
Now in fairness (and I love Mark to death and respect him immensely) that’s a bit of arrogant way to word it. EVERY environment, regardless of size, should deal with foundational issues such as deployment and runtime before adding another layer of complexity. Another point to keep in mind is that Mark has his background with Heroku. That’s not a positive or a negative it’s just a very important data point. Mark knows how to run a PaaS. He’s run arguably the largest public PaaS out there and dealt with all of its failure points.
Also no one has yet to address my concerns about the centralized management of the PaaS itself or the data IN that PaaS. This is something that Heroku is actually a very POOR model for as Heroku does not concern itself with those things (nor does it need to). While Heroku does offer and document how an individual might handle an HA or DR scenario note that Heroku doesn’t centrally backup every single database hosted on its platform. (It was pointed out to me that I misread the Heroku docs. All PGSQL dbs are backed up but there ARE limits related to the db that vary by tier). Also worth noting that Heroku’s own offering is PGSQL and that the addon providers are responsible that comparible service. When you are running your own PaaS you are not only Heroku but also that addon provider.
So to go back to the quote from Luke:
As I said, this is a good question but it’s indicative of the problems with all the solutions to date from the Docker based ones to CloudFoundry to OpenShift. It even extends to the IaaS offerings like OpenStack and CloudStack. Every single time the discussion is framed as “you should use this thing. It makes [deploying apps|managing apps|creating infrastructure|autoscaling|blah blah blah] so much easier and better.
And guess what? They’re all right. These tools DO make these things easier and in many cases better but they ALL (each and every one of them) ignore (and I would argue INTENTIONALLY) the question staring them in the face.
Who the fuck is going to RUN this shit?
I realize I was pretty down on PaaS the past couple of days. Lest I send the wrong message, I figure a clarification is in order
Before we start, we should define some things. It’s always important to be on the same page:
I also want to be clear that I ONLY care about production workloads. The reason I defined production the way I did is because only the end user can define the business criticality of a service or system function. If you consider an idle bench of engineers unable to work because your build farm is down a bad thing, then your build farm is “production”.
I also want to point out that I inherently belive that a Private PaaS is probably a really good thing for your business. My argument is largely that most enterprises are not ready for it and are not willing to live with the shift it will require.
Let’s go with the good news first. A PaaS (and more importantly a private PaaS) has a lot of benefits.
Most private PaaS solutions tend to follow the Heroku model of a PaaS. In the Heroku model, You follow a normal development workflow using your VCS as a model for deployment:
That’s the sum of the deployment. Your deployment to production is no different.
With Heroku, the “moving bits” of your stack are hidden from you. You don’t stand up a database in the traditional sense. You tell Heroku to wire up the database to your application as an add-on. Heroku exposes this add-on to your stack via environment variables. You reference those environment variables in your application code instead of hard-coded settings in property or yaml files. Both CloudFoundry and OpenShift follow the same model:
This is really awesome from a development perspective. You simply define the building blocks of your application, tell the platform to expose them to your application and off you go.
From an operations perspective, a private PaaS can create a consistent operational surface area. You spend less time worrying about individual operating systems. Your “host” nodes are largely a uniform target. Most of the private PaaS products ship with most common services prebuilt and ready to wire up to applications.
I would even argue that a private PaaS even simplifies the security model a bit as the concept of users are less relevant and much of the PaaS tooling is, by nature, provides proxy access to the things the developers need. Both of the dominant private PaaS solutions leverage kernel cgroups for resource management. Cloudfoundry uses LXC for isolation while OpenShift uses SELinux and MCS currently. I believe, however, that OpenShift is migrating to LXC as well.
Once your private PaaS is up and running, your development team is unleashed to deploy whatever and whenever they want. They aren’t waiting around for a full-fledged OS to be provisioned that needs further configuration just to be servicable. Developers are free to experiment with arbitrary components (provided they exist in the PaaS service catalog).
However not everything is rosy and bright in the land of the private PaaS. There are downsides as well - some cultural and some technical
Unless your private PaaS is a bespoke solution, you WILL have to change your application model. You cannot simply forklift an application into a PaaS. Your application must be designed not only to work in a PaaS environment but also to work in a specific PaaS.
Most traditional “enterprise” applications are not ready for a PaaS solution. Many will have to be significantly rewritten. The most common model for this is the 12 Factor Application.
I should state up front that I disagree with quite a few bits of the 12 Factor model. It’s important to remember that, imho, the 12 Factor model was designed as a business strategy for Heroku. The steps follow exactly what makes an app work best on Heroku, not what is best for an application.
Regardless, as the private PaaS solutions are largely modeled on Heroku you might as well state that 12 Factor is the way you’ll need to design your application.
As I said in my previous post, this really doesn’t exist. Your application has to be DESIGNED to scale this way. As Adrian Cockcroft pointed out in the comments to my previous post Netflix “overallocated” on the dependency side up front to minimize the need and impact of things like rebalancing data and load balancer scaling. It’s also worth noting that Netflix did NOT use a PaaS (though arguably the model for how they used AWS was PaaS-ish).
Most “enterprise” applications I’ve dealt with never scaled cleanly. They needed things like sticky sessions and made assumptions about data access paths. Quite frankly they also were not designed for this level of deployment volatility. I would go even further and say that if you have a release cycle measured in months, don’t bother.
Just like autoscaling, this is also not what you think it is. Unless your application maintains exactly ZERO state, then you will never see this benefit. Do you write files to critical files to disk in your application? Yep those are gone when you “magically autorecover”. The autorecovery that was promised you? It redeploys your application. Your state is lost and no you don’t have NFS or shared storage or anything to fall back to. Get used to shoving your blobs in your database. Oh but what if your database fails?
This is where it gets interesting. I’m still sussing out the recovery models for the two primary players in this space but most likely you will LOSE that data and have to restore from a backup. I’m sure someone will call me on this and I’m willing to listen but I do know for a fact that the autofailover model of things like your MySQL instance depend on migratable or shared storage (at least from my reading of the docs).
This all of course leads me to the next part
I alluded to this earlier but there are technical requirements that most companies are simply not ready for.
All applications are inherently distributed systems even if you don’t want to admit it. However a PaaS is more so than most shops are ready for. Let’s run down the components for the current version of CloudFoundry. I count 11 distinct components. If we move over to OpenShift I count 4 components.
Both of these applications use a service router, a message bus, a data store and n number of actual nodes running the deployed applications. In both cases, the documentation for these components requires you to already know how to scale and maintain these components. There are any number of places where these stacks can fall apart and break and you will need to be an expert in all of them.
Also one of the more hilarious bits I’ve found is the situation with DNS. I can’t count the number of shops where DNS changes where things like wildcard DNS were verboten. Good luck with the PaaS dyndns model!
To be clear while I feel that most organizations aren’t ready for the operational challenges of maintaining a PaaS, the job is made harder by the PaaS software. In both cases, the operational maturity of the products themselves simply isn’t there.
Look at the “operators” documentation here for CloudFoundry HA. I can sum it up for you pretty easily:
Basically they punt everything over to you as if to say “Fuck if we know. Use that thing you sysadmin types use to make shit redundant.
And lest you think OpenShift is any better, OpenShift uses MongoDB with this nice bit of information:
What I’m about to say I stand behind 100%. Any company that tells you that MongoDB is “reliable” is basically saying:
Any tool that uses MongoDB as its persistent datastore is a tool that is not worth even getting started with. You can call me out on this. You can tell me I have an irrational dislike of MongoDB. I don’t care. Having wasted too much time fighting MongoDB in even the most trivial of production scenarios I refuse to ever run it again. My life is too short and my time too valuable.
Additionally I’ve found next to zero documentation on how a seasoned professional (say a MySQL expert) is expected to tune the provisioned MySQL services. The best I can gather is that you are largely stuck with what the PaaS software ships in its service catalog. In the case of OpenShift you’re generally stuck with whatever ships with RHEL.
Another sign of operational immaturity I noticed in OpenShift is that for pushing a new catalog item you actually have to RESTART a service before it’s available.
After going over all the documentation for both tools and even throwing out some questions on twitter, disaster recovery in both tools basically boils down to another round of “good luck; have fun”.
Let’s assume your PaaS installation is a roaring success. You’ve got every developer in your org pushing random applications out to production. Self-service is the way of life. We’ve got databases flying all over the place.
How do you back them all up? Well this is a PaaS, Bob. It’s all about self-service. The developers should be backing them up.
WAT.
Again based on the research I’ve done (which isn’t 1000% exhaustive to be fair), I found zero documentation about how the administrator of the PaaS would back up all the data locked away in that PaaS from a unified central place. If your solution is to tell me that Susan’s laptop is where the backups of our production database lives, I’m going to laugh at you.
Affinity issues make the DR scenario even MORE scary. I have no way of saying “don’t run the MySQL database on the same node as my application”. This makes the risk surface area even more large. Combine that with the fact that a single host could be running multiple business critical applications. I realize that these tools have algos that are supposed to handle this for you but I’ve not seen any sort of policy enforcement mechanism for that in the documentation.
I don’t think ANY of the current private PaaS solutions are a fit right now. OpenShift is, imho, built on unsound ground. CloudFoundry in its current Ruby form is a mess of moving parts. In fairness CloudFoundry is going through a rewrite with some firm leadership behind it that I have quite a bit of faith in when it comes to operational concerns.
Additionally both tools are embracing containers and docker packaging to increase security but none of the tools offer, as far as I can tell, anything resembling a hybrid model. I don’t trust docker storage containers yet personally.
And I want to be clear. I’m not trying to be a BOFH here with all my talk of “placement policy” and “disaster recovery”. I fully embrace the idea of a private PaaS. I simply don’t embrace it in any of the current ecosystem. Even a modicum of due diligence should rule them both out until they address what are basic business sanity checks. These platforms require real operations to run and maintain. If you’re still throwing things over the wall to your operations team to deploy into your PaaS then you really haven’t gained anything. Unless your engineering organization is willing to step up to the shared responsibility inherent in a PaaS, then you definitely aren’t ready. Until then, your time and money is better spent optimizing and standardzing your development workflow and operational tooling to build your own psuedo-PaaS.
up up down down left right left right b a select start
I went on a bit of a rip today about all sorts of technology. I figured I should at least clarify some of it in long form.
Vmotion is a scam. I have frequently said that only trivial workloads are safe for vmotion. Here’s the reasoning:
Let’s also not forget that live migration claims to have accomplished a lot of things such as time travel. You may also know live motion technology by its other names like:
But hey it demos really well when you can keep watching that streaming video while your vm is moved from host to another.
Autoscaling is a myth. My reasoning behind this has similarities with vmotion/live migration.
Again we have a set of things we need to clarify:
I am not concerns with trivial workloads. Trivial workloads are…well…trivial. The largely cached static marketing website takes no effort whatsoever to scale. Oh look I just brought up a new server with the same static content! Instant capacity!
Let’s take a standard architecture here:
When I “autoscale” my caching layer, I now have to concern myself with the following things:
So sure, feel free to autoscale that group of memcache servers but your performance just went to through the floor. Now you’ve had a downstream affect on your database as you’re having to go to origin due to cache misses. Oh and by the way not all servers talking to the caching tier saw the same topology so now you’ve got possibly incorrect data you’re serving from the cache
When I autoscale my frontend, I’ve now add n number of connections to the database. How’s that network looking? Oh wait did you just autoscale to the point of starving the database of resources? Have you possible shot yourself in the foot because now the stuff that was working before is getting rejected because of connection counts?
Autoscaling load balancers is also a problem as you now have the issue of topology mismatch of your backends as well as dealing with session injection that was PREVIOUSLY handled by only one LB.
Finally let’s get to autoscaling our database. Vertical or horizontal, relational or “NoSQL” it doesn’t matter. If you vertically scale your DB, do you have to restart the process with larger memory allocations? What about rebalancing of data when you scale horizontally?
And we’ve not even gotten to if your application is actually ABLE to be autoscaled (are you entirely stateless? 12 factor friendly?).
Combining these things along with unmentioned downstream impacts and transitive dependencies, means that in most cases when you need to autoscale you won’t be able to respond to the workload for some time. It’s possible that AFTER that time has passed, the workload may be gone.
And let’s not even talk about trying to unwind all that madness via scale down.
This is almost the most egregious of them all. It ranks right up there with “private cloud” in the bullshit-o-meter department. Resources are not infinite.
I have a bit of a guidepost I use when thinking about “new” functionality in applications.
In most cases, the landscape is either saturated with business whose core focus and expertise is on that concept/functionality. In worst cases the majority of the businesses in that space are failing. Think long and hard about if you have the expertise to do this thing.
PaaS and IaaS are in the same boat. I’m a bit more harsh on the IaaS front as I truly believe that if an operations team had been able to deliver on the promise of virtualization but couldn’t (for any reason) then sticking ANOTHER layer on top isn’t going to magically make it work. The platform still has real hardware under the covers that has the same limitations it had before - bandwidth capcity, io, patching of hypervisors. This stuff doesn’t just disappear. In many cases you can actually hit a wall VERY early on for capacity issues.
This slide deck about Cloudstack Hypervisor choices is an amazing read for understanding limitations. Some of these are actually imposed by the hypervisor:
There’s no cheat code for this shit, folks. Very few PaaS and IaaS products tackle operational issues at all. Time to first success is important but not if it comes at the expense of cost to operate over time. Yes, I can sudocurlbash your product on to my system but that’s trivial. How do I deal with:
IaaS actualy isn’t as bad as a PaaS in some of those but they both have issues. PaaS is mainly worse because you have adopt into an ecosystem and philosophy (not that 12 factor isn’t entire good but it’s a start) if you want to have any real success.
You will NOT forklift a workload into one of these models and be successful in the long term. In the short term you will simply have given someone else a lot of your money.
I drove a forklift for two years. I know forklifts.
I’m not saying that people can’t be successful at these things. Clearly they are to some degree. But that’s only the public face. How much shit did they have to wade through to make this work? Where are the bits of baling wire, duct tape and a healthy belief in a higher power that keep it from just failling over the edge of the abyss?
Anyway that’s just a short list of things from a very tired and worn out person with less hair than he started the day with. I know I shouldn’t get mad about this stuff but it’s hard when the people trying to smokescreen you ARE you in a sense (professionally speaking). Frankly I’m just tired of people thinking that the operational aspects of this stuff are irrelevant because somebody promised them “autoscaling selfhealing magical rainbow-colored unicorn piss in a bottle” where they didn’t have to interact with operations folks ever again.
I’ve been a pretty big proponent of omnibus. I still think it’s the right way to go but recent changes have removed the primary reason for recommending it
I did a lot of evangelism for omnibus last year. Presentations, blogposts, a sysadvent article. It is/was a great tool however it no longer fits the primary usecase.
Originally the biggest benefit to omnibus (outside of the core of what it did) was the Vagrantfile it generated. Because of this Vagrantfile, I could generate a project and publish the repo for anyone to use. That person didn’t have to have any ruby tooling installed. They just needed vagrant and two plugins (vagrant-omnibus and vagrant-berkshelf).
They could check out the repository and just run vagrant up and the packages would be nice and neat dropped off in the pkg directory locally. I didn’t see this as a problem workflow because I didn’t listen to my own advise.
This is from the original generated README of a fresh omnibus project:

This was the part of the workflow I was bullish on. In fact we went whole hog internally with this. Anyone could contribute because they could test locally with only the exising tools that we already had installed.
But that seems to have all changed with Omnibus version 3. Now omnibus requires a full ruby development environment just to do what it previously did with a Vagrantfile alone.
The reason for this is that instead of Vagrant, now omnibus uses test-kitchen. Additionally it seems to ALSO require Berkshelf locally now.
This is where it gets really ugly.
It doesn’t just require Berkshelf. It requires an UNRELEASED version of Berkshelf.
I wanted to take a minute to talk a little bit about Chef tooling.
There is evidently a shift going on in the Chef community and I apparently haven’t been keeping up. The Chef community flocked to Berkshelf for reasons I don’t understand. It evidently solved a problem I didn’t have. You see I used chef-client and knife (with several plugins). I work with a lot of folks who are NOT ruby or chef people. For us, Chef is a means to an end. It’s a tool just like Maven or Artifactory. We use chef-solo as the installer for our platform, for instance. We are not ruby developers or users. All of our tooling is either in Python or Java and our application code base is in Java.
Opscode (or rather Chef) has previously made a big push to make being a Chef user mean not being a ruby expert. There seems to have been not only a shift in that thinking but also in how the tools are to be used.
A good example is chef-metal. This originally confused me because this was the chef model:
With chef-metal that changes a bit because the understanding is that where you might use knife rackspace <blah> you’ll now run chef-client recipe[rackspace_servers].
So back to berkshelf and other tools…
Before these were optional. Slowly but surely they’re becoming NOT optional. The problem with this is as I described above. No longer is the workflow:
It’s now become a ruby developer workflow of somekind. I don’t have a cookbook directory. All of my cookbooks are somewhere in ~/.berkshelf and I’m expected to have every cookbook be its own repo or something. I still don’t fully understand what’s going on here and frankly I don’t have the time. I have chef novices on my team and I don’t have any official documentation to point them at because this is something that exists outside of the official chef documentation.
I’m not trying to slander ANY of these tools. I’m sure they’re all wonderful. test-kitchen looks great for being able to break away from tying the provisoner to vagrant but again that’s not the workflow that works for us (or frankly anyone who just wants to use chef). My argument is simply that if these things are going to be the defacto model then they should be rolled into Chef somehow and be documented on the official documentation.
So we have two issues here that make omnibus not a fit anymore:
That second one is really painful to swallow. Quite frankly it’s just poor form to do that. You can argue about version numbers being meaningless or “it’s stable just still in beta” but when you’re asking someone to use and depend on your tools it’s just not right. If your dependencies aren’t released yet then you don’t get to release. Let’s also not forget that EVERY anicllary add-on in the Chef world seems to have its own dependency on Berkshelf now.
When Heartbleed hit, I needed to rebuild our two big omnibus packages. Recently I had switched over to a new laptop and didn’t yet have anything checked out. This was fine because I had the omnibus projects checked out on my desktop. It was running a 1.4 release of vagrant and was where I did most of my builds before. So we generated new packages and were happy.
We also have new team members on our ops team. I was using this as an opportunity to show them the omnibus packages and let them build them as well. So I tell them to check out the repos, make sure they have the plugins installed and run vagrant up. This didn’t work and it turns out somebody had vagrant 1.5 installed. No big deal I think. We’ll punt on that one and just make a note that we’ll need a new vagrant-berkshelf plugin when it’s released.
But yesterday I went to work on a massive refactor of our omnibus packages since we’re cleaning up a bunch of extras and changing things around. I knew that omnibus 3 had several things to make the whole build process go faster. It also allowed me greater control in build determinism. So I upgrade and generate a new project to see what the new layout looks like and test the builds. When I realize there’s no Vagrantfile, I’m really confused. The readme says a Vagrantfile would be generated.
That set off the things I tweeted and posted on the mailing list. In the end it came down to me evidently relying on something I was never supposed to rely on and being told I should learn to RTFM.
Right now I have to take back everything I said about omnibus. It’s not that I don’t think it’s a great tool and I certainly don’t give two shits about getting subtweeted. I still think it’s a great tool and I think the idea is the right one.
However the main reason I recommended omnibus and bothered to integrate it is gone. It’s simply not the straightforward process it was and the removal of the vagrant build lab puts too much on the non-ruby-ecosystem user. This is where I didn’t listen to my own advice. I frequently warned people that omnibus exists first and foremost for the needs of Chef. We got lucky that it worked this long and it was an awesome ride.
I’m still trying to figure out the best way to get BACK to the vagrant build-lab but it’s not working out so well. I’m attempting to rebuild my omnibus-omnibus-omnibus project to ship everything needed but now I’m back to stepping outside the community framework and making people who wanted to just create packages needing something extra I created.
I’m not posting this expecting anyone to change anything in Omnibus and I’m not trying to be passive-aggressive. I’m not entitled to anything from anyone. This is more about providing something I can link to for users of the omnibus builds I’ve already published since they will no longer work out-of-the-box.
I’m a pretty harsh person. My wife and I have this discussion all the time about how things I say get interpreted. As the communicator, this responsibility lies squarely on my shoulders.
So before I start, I don’t “hate” distributions or the packaging format they use or the people doing the work. To this even of you who toil to track countless security reports or maintain some software package in an upstream repository because of your love for that software, here’s to you.
In general I hate very few things. When I say I hate something usually hate is even too strong of a word.
I really hate stupid policies. I hate stupid policies that are predicated on the shape of a reality that either no longer exists or never existed in the first place. I hate policies that never evolve to the reality of the world. I hate policies that throw pragmatism and common sense out the window. I also really hate ego-driven policies.
What kinds of things fit that bill?
And yes, distro packaging policies (mostly) fit that bill.
I’ve said this a lot recently (and I stand by it):
Packaging policies exist first and foremost for the benefit of the distribution. This isn’t a bad thing or a good thing - it’s just a thing.
Let’s compare a few packaging policies from different distros. I spent most of my valuable time this evening between fighting a 3 year old who didn’t want to go to sleep reading these.
Ignoring for a minute the sheer verbosity of some of these guidelines (I think Arch wins at simplicity and pragmatism), they all share a few common key themes:
Note that of all the distributions Debian is quite possibly the most offensive at this. Fedora follows a close second.
I want to address a few of these though I might have done so in the previous version of this post. I’m also going to skip the “build from source” point because I have no real problem with that on a general level.
There are two arguments here that tend to crop up in support of this:
Disk space concerns are entirely subjective. I’m not hurting for disk space and I haven’t been for quite some time. I’m anal about which packages I install, not because of disk space, but because I want to have to worry about as few security announcements as possible. Quite honestly this argument is the distro equivalent of PEP8’s column width. It is not my concern how many ISOs the distribution has to span across. I either install from a private mirror or netboot off the internet. Regardless I haven’t put an actual cd in a system in a VERY long time.
But the one that gets me is the “security” argument. The basis for this is that you can supposedly immediately get the benefit of a fix to, say openssl, in all packages that link against openssl.
This is bullshit.
For that to REALLY be true, you have to turn up the white noise reality distortion field pretty high.
Let’s take a vulnerability in a library that everything in the system links to like openssl. There have been three CVEs against openssl this year (2 of which affect versions that most distributions use today).
For a distribution to get a fix in place for openssl, they should ostensibly be testing EVERY SINGLE PACKAGE that links against openssl. In reality, you can get by with lesser testing of that fix assuming the ABI doesn’t change but that’s still a pretty big risk to take. I’m honestly not sure (and would love feedback) from distros about exactly what the test cycle is for these cases.
But let’s assume they do test that. If the vulnerability was “responsibly disclosed” it’s possible they’ve had time to do that but if not, you have a case where every single package on your system that links against openssl could be vulnerable.
So at most, what you have is a wash. I would actually argue that a package that brings its own deps is better off in this case.
Let’s also not ignore the case that RedHat 5 STILL USES RUBY 1.8.4 WHICH DOES NOT GET ANY FIXES UPSTREAM WHATSOEVER. I don’t think ANY ruby 1.8 version is getting fixes anymore. You are ENTIRELY dependent on Redhat to not only backport fixes from different versions of Ruby but also make sure they don’t break any other Ruby packages the distro ships. In some cases, Redhat will actually have to figure out how to patch that version of Ruby.
The whole “put X here, Y here, Z here” is really about consistency more than anything. I don’t entirely disagree with it but it really is a matter of preference. I personally like my configs to live close to my application. I hate bouncing around the filesystem.
This is where it gets ugly and when combined with the “use existing libraries” model that the whole policy is downright combative to people who write software.
I’ve said previously that various language communities have coalesced around their own toolchains. One thing that’s pretty common, however, is that those communities allow for multiple concurrent versions of a given package. How they isolate and define which version to use is specific to the language but it exists.
Shoehorning that into the vendor policy around versioning simply does not work.
Let’s take a java application. I need version 42 of commons-dingleberry. The vendor has packaged version 39. If this was debian, they would tell me I need to make my application work with version 39. What is more likely the case is that my application simply won’t ever be included in upstream because I’m not about to spend my free time that I contribute to an opensource project trying to make my software work with a version of a library that may simply not have the functionality I need.
This is really quite hilarious when you take something like Logstash which shades all the java deps it has in to its own jar. These packaging guidelines (and from what was communicated by someone attempting to get it into Fedora) requires someone to actually CHANGE Logstash such that the ElasticSearch version is its own package. Each version of Logstash is actually dependent on a specific version of ElasticSearch (due to the ability of Logstash to run ES embedded or as a non-data cluster member). Giving a user the “freedom” to switch ES versions actually creates a shitty experience for the user.
Jordan has asked people repeatedly to NOT try and get Logstash into upstream repositories. Here’s why:
Jordan makes a valid point. And it’s not just Logstash. The software that people are attempting to run today (yes even in the stodgiest of enterprises) changes too often to ever be valid as packaged in upstream. No software I have ever cared about running outside of the core OS was ever present in a distro’s upstream repository. Running CentOS or RHEL? EPEL is the FIRST thing I have to add to the system.
Nothing kills the relevance of a distribution faster than how much effort someone has to go to for it to be usable. Why did Ubuntu start to “win”? I see two things:
Two years, while still an eternity, is frequent enough to be able to work in relevant changes in the industry. PPAs provide an outlet for someone to provide packages in a way that is largely well integrated into the distribution workflow. However even PPAs are not keeping up with the pace these days. I’m curious if an omnibus-style package would ever work in a PPA (assuming you would go to the effort of converting an omnibus project into a source deb.
Using the vendor’s package format as an excuse not to provide packages doesn’t fly anymore. FPM has eliminated that. You don’t have to know a single goddamn thing about the RPM spec format or  deb control files.
And beyond that, with omnibus, you don’t even need to worry about dependencies on the system. By default and omnibus project will build packages for every current LTS release of Ubuntu and RHEL/RHEL clones. There’s not even a need to create a proper apt or yum repo. With an omnibus package you don’t have any external dependencies.
I’ve talked at length about this issue with a few folks but none so passionate about it as Sam Kottler and Robyn Bergeron. Robyn actively sought me out at PuppetConf a few years ago. I think we chatted for over an hour on distribution relevance.
In general I think what would help most at this point is for distributions to provide an avenue for authors to provide packages that don’t meet strict guidelines. If Opscode wants to provide omnibus’d chef clients in /opt/chef without the user having to curlbash the package, that would awesome.
There is the concern to the user but my crusade in technology has been to not treat the user like a 3 year old. Give users enough clear information about risk and let them make the decision to install a package. Communication goes a long way.
I’m going to have more to write about this topic. It’s a never-ending source of fuel really. Thanks for reading.
Yes it started on Twitter and ended up here. Circle of life and all that
Fair warning: I’m not doing ANY research for this post. Normally I do but I’m doing this off-the-cuff so to speak.
If I fuck up some specific thing, please feel free to correct. This is basically a personal perspective/history
And it’s probably full of typos so there’s that
So a discussion on twitter started because I brought up Mesos, Docker and OSv. I commented that none of these things were “new” technology really.
To be clear, it is a scientifically provable fact (for some values of ‘scientifically provable fact’) that when containers are brought up FreeBSD jails and Solaris Zones will work its way into the conversation. This is actually perfectly legitimate as the fit the same “model” as containers - lightweight ‘virtualization’. And whenever virtualization is brought up, someone will bring up IBM and LPARs. Again, perfectly legit.
In rough order of quick wikipedia’ing and personal memory, it goes something like this:
Also slot QEMU and KVM in here somewhere. These are all forms of ‘virtualization’. I’m sure there are some pedants are drafting comments now but let’s call it what everyone who isn’t a pedant calls it - virtualization (this little bit is important). Each one is better or worse for different reasons.
All I’m trying to say is that everyone has a claim at some point in the stack. I’ve always argued that really IBM is the progenitor of this whole space but I’m sure someone will point out something I missed.
The point was made that everyone seems to forget about FreeBSD jails. I don’t think that’s the case at all. Here’s my little take on why FreeBSD didn’t “take off” (and the same applies to others as well). I’m probably wrong but whatever. Not like that’s a first.
Everyone involved in this twitter convo has been in the industry a while. We remember when Linux wasn’t the defacto operating system you would use. AIX, Solaris, HPUX - THOSE were the things REAL businesses used.
So why is Linux suddenly the defacto choice and why did technically superior solutions fall by the wayside? As I said, that wasn’t always the case. We used to actually have to HIDE the fact that the print server wasn’t running WindowsNT. Linux and FreeBSD were what we used at home. The others were what we used at work. I got my start with the whole Linux world around 95 with Slackware just as Yggdrasil was going away.
Anyway here are a few things I think that “hurt” FreeBSD a bit:
Licensing wars were almost as prolific as editor wars in on Slashdot. Regardless of your position on WHICH license is more ‘liberal’, this had an impact on the success. IIRC, the original BSD license was incompatible with the GPL. This meant there was little cross-pollination between the communities.
Regardless, what you ended up seeing was more “corporate” adoption of BSD into closed hardware products (firewalls, load balancers) and that never made it back into the community because it didn’t have to.
On the Linux side, however, the GPL sort of promoted a community because of the forced pollination.
Probably not the best way to describe it but within the BSD community the 3 major derivitives ended up being pigeonholed
Again, whether or not this characterization was correct that was the general thought process most people I knew had.
Meanwhile, Linux was Linux. Yes there were distros but they largely set themselves apart by what they layered on top in userland. This is somewhat critical.
As I said above, FreeBSD was never really positioned as being for desktops among the commoners. Meanwhile Linux distributions were catering to that crowd. The thing is Linux was acceptable as a server OS as well. So if we were running Linux at home on our desktops, there was very little cognative disconnect to running it on our servers. Just don’t install X and it’s a server, right?
FWIW this is one of the things that I think helped Microsoft as well - knowledge portability.
Quite honestly, IBM was probably the biggest thing to help Linux get that final push. Yes we’d been running Linux at home, on our personal web servers and in small corners of the office but now here’s a name our bosses trust saying that Linux is a thing. That bald little boy talking about sharing shit and all that. Holy fuck! We made it. Then the COTS started coming. I remember getting that copy of Oracle 6 (or was it 7?) at Atlanta Linux Expo. Holy shit, Oracle runs on Linux!
So this IBM thing is a pretty big hurdle for a BSD to overcome. Marketing took over. Nobody cared that ufs was superior to ext2 or which is better ipfilter (then pf) vs. ipchains. IBM is backing Linux to the tune of 1 Billion dollars. Who gives a fuck about which license is more “free”?
Oh and IBM is doing it again though arguably it means fuckall at this point since Linux is, again, the defacto standard.
Mind you this is mostly personal opinion/perspective. Is FreeBSD technically superior? Probably. Did it do certain things first and better? Yep (though as I brought up someone else did it before FreeBSD in some cases).
Let’s face it, even as Linux fans you have to admit that Linux has been adopting shit from everyone else for a while and arguably as a shittier implementation. Don’t get me wrong, I love Linux and I owe it a lot. This is one reason I try and give back as much as I can. I wasn’t able to before.
I think FreeBSD has a chance for a comeback at this point (some of these have been going on for a while):
This is something I said the other day. I figured it deserved a more detailed blog post.
Most people who know me professionally know two things about me:
This second one is something Bryan Berry attributed to me in an early FoodFight episode. What’s interesting is the two things seemingly conflict.
I love learning new programming languages. This comes as a pretty big shock to me on a regular basis because I’m not a professional programmer. I didn’t go to college for programming (I actually didn’t go to college at all). My career in IT has been pretty much 100% focused on the area of operations. Anything I’ve ever touched - qa, dba, dev - has always been from that lens and to satisfy some need operationally.
So it’s weird that I find myself 18 years later having a working knowledge of ruby, python, perl, java and a few other languages to a lesser degree. Mainly I come to new languages to scratch an itch.
This leads me to picking up Go.
If you haven’t heard of Go, there are countless articles, blog posts and a shitload of new tooling written in it. The latest batch of hotness around linux containers and new deployment models (docker) is based on Go. There are also quite a few other “big” name projects built in Go as well - packer, etcd. Mozilla is doing all new internal tooling in Go (as I understand it) and quite a few folks are switching to it.
Mind you I don’t pick up languages based on popularity. I don’t care for JavaScript and Node at all, for instance. Originally I had no interest in Go either. I figured it was another Google experiment that was more academic than anything else. Besides, if I had to get a handle on a c-like language, why not just learn C and be done with it?
I actually attempted that route working on a PAM module for StormPath. While it was somewhat satisfying, it was ultimately VERY frustrating.
One of the reasons I decided to give Go another shot was that it appeared to be around for the long haul after all. That made at least a contender for me.
But then some of the tooling I was using operationally was being built in Go. Since I wanted to be able to fix issues in those tools (especially considering they were new projects which would surely need fixes) I really needed to pick up on the language.
However one tool really pushed me that last step - etcd.
You can read up on etcd yourself but if you know my history with Noah, you realize WHY I have such an interest in this.
What surprised me was when I decided that I’d probably be writing a lot of tooling myself in Go.
All the internal tooling my team develops at Dell Enstratius is written in Python. This was a pragmatic choice for us:
Why didn’t we go with Ruby considering I was personally much stronger at Ruby and we had some Ruby experience via Chef internally?
Our team weighed all the options here and we all agreed on Python. I set out to write a library for accessing our API. This would give us a foundation for our tooling as well as serve as a reference project - with tests, project structure, bin scripts and the like - for new tooling.
Things are/were going great up until a recent situation with a customer. We try and minimize dependencies in our tooling for obvious reasons. However there are a few libraries that just make things SO much easier - requests, envoy. We also like to use Fabric to wrap some things up.
However we ran into a situation where a customer refused to let us pull packages in externally. So while we could “sneakernet” the bulk of our tools over, some things wouldn’t work. Tracking down all the transitive deps and vendoring everything was a pain in the ass.
This is what lead to my statement above.
Go, while not as tight a feedback loop as Python, is still pretty tight. Compilations happen fast and you can test fairly quickly. But the dependency issue is really the killer. It simply doesn’t exist. I can take that binary I compiled and move it around with no problem without needing the runtime installed. There are lots of batteries included in the stdlib as well.
I can also compile that same code on osx, windows or linux with no modification. This bit us in Python with some of our deps as well.
As I said, while the tooling I’m currently writing has no need for any of the advanced concurrency stuff in go, it’s nice that’s it there out of the box should I want to use it.
We’re not switching to Go for our tooling but I probably will. I’m already working on writing a wrapper for our API in Go so I can duplicate some of the tools. This will be really handy when I’m on a system where dependencies are limited. That’s really what this post is about.
If you’re in operations, there is no reason you shouldn’t learn Go.
The syntax is easy. The stuff that made C painful is largely hidden from you. Meanwhile you don’t need to worry about what version of Python or Ruby is installed on your systems. It’s a great language to use for bootstrap tools where you don’t yet have your deps installed. It’ll also help should you start adopting tools like docker, packer or etcd.
Give it a shot.
I’ve noticed an annoying trend recently. I was content to ignore it for a while but now it’s getting almost stupid. That trend is the job title of “DevOps”.
I came across an article tonight that confused the hell out of me. It was an interview. The outlet wasn’t a technical one per se but it was a technical interview none the less.
This part is what confused me (highlights mine):
To quote an internet-famous person:
WAT
I don’t like the idea of devops as a job title in the first place. I don’t like it as a role either. It makes no sense. You don’t call someone an agile so why would you call them a devop?
My problem lies in the fact that it implies that there’s something wrong with being a sysadmin, operations person, developer or whatnot. Not only that but the idea behind devops is the elimination of silos, not the creation of new ones.
I have, however, made a bit of peace with the fact that devops has become a replacement title of sorts for sysadmin or developer.
I get the problem domain. Companies want to be able to qualify the types of people they want. The phrase devops carries a certain meaning with it. People are trying to leverage that. In other cases, it’s become a codeword for “generalist” or “technologist”. And, yes, even in some cases it’s become a code word for “doing both development and ops work”
Here’s the secret. I’ll tell you EXACTLY what devops means.
Devops means giving a shit about your job enough to not pass the buck. Devops means giving a shit about your job enough to want to learn all the parts and not just your little world.
Developers need to understand infrastructure. Operations people need to understand code. People need to fucking work with each other and not just occupy space next to each other.
I worked at a company several years ago. We created a dedicated devops team. The rationale was solid - the company had a monolithic idea of roles and titles. We also had a large group on both sides that were only interested in doing their little bit and going home. By creating this title/team, it was easier at a company level to justify them working on non-standard projects.
So a “devops” team was created. This was a small team of what essentially boiled down to “super sysadmins”. We wrote puppet manifests, worked with the developers to automate build processes…shit like that.
What ended up happening was that the devops team was seen as elitist by the operations team, nosy and invasive by the developers and everyone just passed the blame on to them - “Devops did that. Not us”
Having said all that, what about the quote?
This is indicative of the problem I described above. I think I’ve finally figured out the question I want to ask people who think this way:
If devops is a distinct role/title apart from development and operations, then what the fuck does a “devop” do?
Let’s look at that quote again. It implies that:
What is that third group? What possible aspect outside of development and operations of the IT needs of a company do those two groups not think affects them in some way and thus have a vested interest in being involved? (Yes I’m aware companies have dbas, security and what not - those are shitty silos too)
This topic comes up all the time on various mailing lists and it never seems to really reach any sort of consensus. So I’m asking you. If a “devops” is something different than someone in operations or development, someone different than a sysadmin or developer….
What the fuck is it?
This post was writting on an airplane with an annoying passenger in front of me, quite a bit of rum in me and a lack of sleep. I’m guessing it really doesn’t look any different than any other post though does it?
Currently RICON|EAST is going on in NYC. Tom Santero and the whole Basho crew is doing an awesome job if the content available via the live stream and twitters is to be believed.
(please note this is my first blog entry post-D. As such and because I’ve yet to talk to any legal folks, I should state that this does not represent any opinion or policy of Dell)
One thing that caught my eye/ear when I could listen/watch was an excellent presentation by Sean Cribbs. Sean holds a special place in my hero worship pantheon for a few reasons:
So in Sean’s presentation he’s talking about some changes to the Ruby client library for Riak. Many of the changes make the Ruby library a proper smart client. Read this wiki wiki entry under Connecting to Clusters for some of the features. It’s awesome (especially the transport-related failure handling).
I want to say a bit about client libraries. Regardless of what they talk to (though I’ll be talking specifically about database client libraries), this is something many companies get wrong.
Everyone knows I’m not the biggest MongoDB/10Gen fan in the world. I won’t go into detail about the technical reasons behind that. Many others have done a much more eloquent dive into that topic.
As much as it’s easy to make fun of MongoDB as being an marketing-driven database, they did get one thing right. They owned their client driver availability. Not only did they own and maintain all the drivers but they largely had the same API across the various languages.
Then again, they had to. Other databases/applications offer a REST-ish interface over HTTP (or plain-text interface like Redis) so they can punt a bit. Got a libcurl port for your language? You’re set. MongoDB has its own protocol and that god-forsaken BSON shitshow.
One of the benefits, however, of a plain-text or HTTP-based protocol is that it’s a pattern we can grok as operators and developers. We load balance webservers. We speak to third-party APIs. It’s not the most EFFICIENT but it’s a known quantity. It’s also, as I said, REALLY fucking easy to add support to your language of choice. No need to FFI some c library or make a binary extension. Any language worth its salt has http client support in stdlib (even if it’s as big a pile of dog squeeze as net/http). Again, most languages also have libcurl support for something better.
I largely dislike applications that require smart clients to get the full benefit. As an operations person, I’m USUALLY using a dynamic language like python, ruby or perl to access the system as opposed to directly from the application. This was my biggest gripe with ZooKeeper (as I’ve said many times in the past). It’s also been one of my points of contention with Datomic. If you aren’t on a JVM language, you’re shit out of luck for now. Yes, JRuby makes this billions of times easier for those of us using Ruby but Jython is still not where it needs to be for modern Python.
I also had this problem with Voldemort. Disclaimer this is 2-3 year old data from running Voldemort in production. AFAIK, it’s still the case. For the sake of this discussion, we’re going to ignore data opacity. At the time, the only way to fully access the data in and maintain a Voldemort cluster was from the JVM. I ended up writing quite a bit of JRuby wrapper around StoreClient just to see the data we had in Voldemort.
Riak (and as another example, ElasticSearch) is nice in this regard. It’s HTTP. I can curl it from a shell script. I can use the Ruby library Basho is maintaining. If I’m using a language without ‘official’ support, I can write my own. All the metadata is largely attached to http headers and even monitoring is done via the /ping and /stats urls. Something I didn’t realize until today (thanks to Benjamin Black) is that the stats interface actually exposes stuff I had previously glossed over including cluster topology. This is where the meat of the discussion on twitter today happened.
My original statements on this discussion related to using haproxy in front of your Riak cluster. There are several reasons I prefer this but a quick sidebar
I’ve had some minor operational experience with Cassandra (nothing to write home about) but one of the things that always bothered me was the idea of ‘seed nodes’. Let me be clear that Cassandra and Riak are pretty much the only two datastores I’d feel comfortable using these days (with the nod going to Riak) in any sort of scalable environment. Postgres has earned its way back to my into my graces but MySQL can insert Louis C.K. euphemism here.
My problem with seed nodes is the idea that I have special nodes. These nodes have to be hard-coded in a config file somewhere or discovered by some other method. I could store them as DNS lookups but now I’ve got to deal with TTLs on DNS. And I’ve got to deal with the fact that DNS doesn’t actually care if the host I’ve been given is actually alive or not.
I could store this information in ZooKeeper but what if I don’t actually have native ZK support in that database? I’ve got to write something that populates ZK when a new node is available and it’s not actually a live check. I still have to test that host first. Yes you should do that anyway but it’s a valid point.
So if I’m storing seed nodes as DNS names in a config file, I can never change those names without either rolling out new code or configs. That might require a restart somewhere. If I’m clever, I could probably make that an administrative hook in my application (think JMX) where I can fiddle the seed list. I can poll a config file for changes. I can do a lot of thing but none of them are “optimal” to me.
My prefered method of using Riak is to stick everything behind haproxy. There are several reasons for this but here are a few reasons (note we’re going to assume use of CM at this point):
Basically the haproxy crew has already done all the work in load balancing HTTP connections intelligently and they’re pretty damn good at it. I love my developers and I know the folks writing the various libraries I use are smart people but again it goes back to core competency. Note that Basho gets a nod here, however, in that I’m pretty sure that, what with writing webmachine, they grok http pretty well.
I’ve even gone the approach of using haproxy on every system that needs to connect to some backend locally. This totally eliminates the idea of fixed points in the network for connections (at the expense of having to deal with a bit of drift between CM runs). If I wanted to, I could even make multiple riak clusters transparent behind haproxy (though I can only think of a few REALLY specific use cases for that).
Yes there are trade-offs to this approach. As Ben pointed out, the Riak stats interface is really powerful from a topology perspective. A REALLY smart riak client can discovery data layout and make deeply intelligent decisions on that.
With other applications like ElasticSearch I can actually become a full fledged cluster member as a non-data node and actually offload some of the work of the cluster for scatter/gather type operations using the Java library.
With haproxy, I don’t get those types of benefits.
Outside of the maintainability of haproxy (which is, again, subjective) I get one benefit I CAN’T get with smart clients that is, unfortunately, neccessary with many customers - a more narrow network allowance.
Enterprises are interesting beasts and still think in terms of traditional tiered application stacks. Nothing wrong with that and it does have SOME security benefits but many deployments I’ve been involved with have official policies that ‘data tiers’ (whatever the hell those are) must be protected in a dedicated network behind an additional firewall. So here’s Riak, a ‘data tier’, that we have to have with as small an ingress as possible. That rules out smart clients of the toplogy-aware variety. So we stick haproxy in the mix. We tell them to use a load balancer. Some folks use an internal F5 HA pair with some sort of VRRP. We’ll set up haproxy + keepalived or some other combination depending.
One of the things that Riak allows is this level of flexibility. I can use HTTP and haproxy. I can use HTTP and smart client. I can use protobufs and haproxy or a smart client. It’s really that flexible. I happen to prefer the haproxy approach for reasons I’ve already mentioned but I totally grok that some folks want a more intelligent client approach. Some folks would argue that there’s a right way and a wrong way but I don’t see it like that. What I see is a datastore that, just like it letting me control the consistency levels I want, let’s me control HOW I access that data.
This is probably the most difficult blog post I’ve had to write. What’s worse is I’ve been sitting on it for months.
When I started Noah a few years ago, I had a head full of steam. I had some grand ideas but was trying to keep things realistic. I simply wanted a simple REST-ish interface for stashing nuggets of information between systems and a flexible way to notify interested parties when that information changed.
It started as a mindmap laying in bed one night. It was my first serious project and I had no idea what I was getting in to. If you’re curious, you can read quite a bit of my initial braindumps on the wiki under ‘General Thoughts’. I watched every day as more and more people started following the project.
It was a game changer for me in many ways. Working on Noah was fun and it was rewarding in more ways than one. But real life gets in the way sometimes.
One of the things I’ve learned over the past few years is that for opensource to REALLY thrive, it can’t be a one-person show. I’ve been involved with opensource for most of my 17+ year career. You think I would have learned that lesson before now.
Stewardship is a hard thing. Our arrogance and pride makes us want to keep things close to our chest.
These are all things I said to myself.
What really changed my mind was a few things. Being involved in the Padrino project. Seeing the Fog community grow after Wesley started allowing committers. Seeing Jordan trust me enough to make me a logstash committer before his daughter was born. The biggest trigger was actually one of my own projects - the chef logstash cookbook.
Bryan Berry (FSM bless him) pestered the hell out of me about getting some changes merged in. He was making neccessary changes and fixes. He was evolving it to make it more flexible beyond my own use case. I don’t recall if he asked to be a committer but I gave it to him. The pull request queue drained and he added more than I ever had time for. Not long after, I added Chris Lundquist. Those two have been running it since then really.
I think back to when I got added to the committers for Padrino. It was a rush. It was amazing and scary. Above all it was the encouragement I needed. How dare I deny someone else that same opportunity.
Making that first pull request is hard. To have it accepted is a feeling I’ll keep with me for a long time. I can only hope that some project I create some day will give someone that same confidence and feeling.
Noah is in the same place Logstash was. I’m not using it and that’s really hurting it more than anything. It’s time to let someone who IS using it take control. I care too much about it to watch it die on the vine. I still believe in what it was designed to do and every single day I get emails asking me if it’s still alive because it’s a perfect fit for what someone needs. The same stuff is STILL coming up on various mailing lists and Noah is a perfect fit. There are companies actively using it even it the current unloved state. Those folks have a vested interest in it.
When I added Chris and Bryan to the cookbook, I sent them an email with what my vision was for the cookbook. I can’t find that email now but I recall only had two real requirements:
I need to do the same thing for Noah and see where it leads.
This list isn’t comprehensive but I think it hits the key points.
Noah should be simple to interact with. It was born out of frustration with trying to interact with ZooKeeper. Nothing is more simple than being able to use curl IMHO. I can use Noah in shell scripts and I can use it in Java (we had a Spring Configurator at VA that talked to Noah. It was awesome). You should always be able to use curl to interact with Noah. I wish I could find it now but someone once brought up Noah on the ZK mailing list. This led to various rants about how it didn’t do consensus and a bunch of other stuff that ZK did. One of the Yahoo guys (I wish I could remember who) said something in favor of Noah that stuck with me:
Interfaces matter
I know I’m on the right track here because Rackspace just built a product that provides an HTTP interface to ZK. Oh and it does callbacks.
Simplicity plays into this but I wanted Noah to be the tool that solved some friction between the people who write the code and the people who run the code. Configuration is all over the place in any modern stack. Configuration management has come into its own. People are using it but you still see disconnects. Where should this config be maintained? What’s the best way to have puppet track changes to application configuration? I can’t get my developers to update the ERB templates in the Chef cookbook. All of these things are where Noah is helpful.
I still stand by the statement that not all configuration is equal. Volatility is a thing and it doesn’t have to mean the end of all the effort in moving to a CM tool. I wanted to remove that friction point.
I was also immensely inspired by Kelsey Hightower here. I’ve told the story several times of how Kelsey got so frustrated that the developers wouldn’t cooperate with us on Puppet and config files for our applications that he learned enough Java to write a library for looking up information in Cobbler. Cobbler has an XMLRPC api and that was simple enough that he could port his python skills to java and write the fucking library himself. I wanted Noah to be friendly enough that a sysadmin could do what Kelsey did.
I’ve said this before but one of the most awesome things that ZK has is watches. They have pitfalls (reregister your watches after they fire for instance) but they’re awesome. Noah’s callback system is the thing that needs the most love (it works but the plugin API was never finalized). It’s also one of the most powerful parts that meets the needs of folks that I see posting on various mailing lists.
The idea is simple. When something changes in Noah, you should be able to fire off a message however the end-user wants to get it. I think this is one of the reasons I love working on Logstash so much. Writing plugins is so simple and it’s the gateway drug to anyone who wants to contribute to logstash.
What don’t I care about?
I don’t care about the language it’s written in. If someone wants to take it and convert it to Python or Erlang or Clojure, be my guest. I just want the ideas to live on somehwere. In fact, I’ve rewritten various parts of Noah over the last year privately. Not just experimenting with moving from EM to Celluloid but as a Cherry.py app, in Clojure and I even started an Erlang attempt (except that I know almost NO Erlang so it didn’t get very far).
Honestly I don’t even care about the name. Yeah it’s witty and fits with the idea of ZooKeeper but I have no qualms about adding a link to your project from the Noah readme and recommending people use it instead.
This was never a requirement for Noah. Noah was specifically designed for certain types of information. If you need that, use the right tool.
Let’s be honest. From a simplicity standpoint, it doesn’t get much simpler than Redis. It’s one of the reasons we changed the default logstash tutorial to use Redis instead of RabbitMQ. I know Redis reinvents a lot of wheels that have already been solved but it, along with ElasticSearch, are one of the lowest friction bits of software I’ve dealt with in a long time. Not having external dependencies is a godsend for getting started.
However I’ve also got small experiments privately where I used ZMQ internally and sqlite. I’ve written a git-based persistence for it too.
Riak is also a great fit for Noah and takes care of the availability issue on the persistence side. More on Riak in a sec.
That’s really all that matters. If you want to take ownership of the project, contact me. Let me know and we’ll talk. Who knows. Maybe I’m overestimating the level of interest. Maybe ZK isn’t as unapproachable to people anymore. The language bindings have certainly gotten much better. I just want the project to be useful to folks and I’m getting in the way of that.
I don’t know of many other options out there. Doozer is picking up steam again as I understand it and it has a much smaller footprint than ZK does. There was a python project that did a subset of Noah but I can’t find it now.
One thing that is worth considering is a project that I found earlier today - zpax. While this is just a framework experiment of sorts, it could inspire you to add your own frontend to it. The same author is also working on DTLS on top of ZMQ.
I’ve thought about ways I could actually do this with Logstash plugins. It’s doable but not really feasible without making Logstash do something it isn’t shaped for.
Another idea that I’m actually toying around with is simply using Riak plus a ZeroMQ post-commit hook so that plugins could be written in a simpler way. Sean Cribbs already took the idea and made a POC 2 years ago based on a gist from Cody Soyland. You wouldn’t have the same API up front as Noah but you could stub that out in some framework and also have it be the recipient of the ZMQ publishes.
Finally you could just use ZooKeeper. Yes it has MUCH greater overhead but you DO get a lot more bang for the buck. There really isn’t anything in the opensource world right now that compares. It also provides additional features that I never really cared about or needed in Noah.
I’m not done in this space. I don’t know where I’m going next with it. Maybe I’ll start from scratch with a much simpler API. Maybe I’ll just run with the Riak idea.
I just want to give a shoutout to the countless people who helped me evangelize Noah over the last few years. It was recommended on mailing lists, twitter and many other places. It meant a lot to me and I only hope that someone will take up the mantle and make it something you would recommend again.
For those of you still using Noah, I hope we can find a home for it so that it can continue to provide value to you.
Thanks.
People may or may not have noticed but I’ve been largely offline for the past 4 weeks or so. This is because I’ve been in the middle of a pretty heavy redesign of a few key parts of our application stack. This also required me to learn Java so I’ve been doubly slammed.
As part of that redesign, I worked on what we lovingly refer to internally as the “solo installer”. I gave a bit of background on this in a post to the Chef mailing list at one point but I’ll go over it again as part of this post.
To understand why this is something of a departure for us, it’s worth understanding from whence we came. enStratus, like most hosted solutions, has experienced largely organic growth. One of the nice things about a SaaS product is that you have the freedom to experiment to some degree. You might be in the middle of a MySQL to Riak migration and still need two data stores for the time being. You might be in the process of changing how some background process works so you’ve got an older designed system running along side the newer system which is only doing a subset of the work.
With a hosted platform these kinds of things are hidden from the end-user to some degree. They don’t know what’s going on behind the scenes and they really don’t care as long as you’re doing X, Y and Z that you’re being paid to do.
Now for those of you running/developing/managing some sort of SaaS/Hosted solution I want you to take a journey with me. Imagine that tomorrow someone walked into your office and said:
That’s pretty much the place enStratus found itself. enStratus is a cloud management platform. Not all clouds are public. Maybe someone wants to use your service but has regulatory needs that prevent them from using it as is. Maybe it needs to run entirely isolated from the rest of the world. There are valid reasons for all of these despite my general attitude towards security theater in the enterprise.
Now you’ve got an interesting laundry list in front of you:
We aren’t the first company to do this and we won’t be the last. Take a look at Github. They offer a private version of Github. But we’re not just talking about one part of Github - e.g. Gist. We’re talking about the entire stack the company runs to provide Github as we know it.
Unless you design with this in mind, you can’t really begin to understand how difficult of a task this can be. As I understand it, Github finally went the appliance route and offer prefab vms with some setup glue. Please correct me if I’m wrong here.
Obviously you can see that this was/is a daunting task. Original versions of our install process were based around a collection of shell scripts. Because of certain details of the stack (such as encryption keys for our key management system), we had to maintain state between each component of the stack when it was installed. Currently there are roughly 7 core components/services that make up enStratus:
and those are just the enStratus components. You also need RabbitMQ, MySQL and Riak (as we’re currently transitioning from MySQL to Riak). All of these things largely talk to each other over some web service or via RabbitMQ. With one or two exceptions, they can all be loadbalanced in an active/active type of configuration and scaled horizontally simply by adding an additional “whatever” node.
So the original installation process was a set of shell scripts that persisted some state and this “state” file had to be copied between systems. Yes, we could use some sort of external configuration store but that’s another component that we would have to install just to do the installation.
One of my coworkers, Greg Moselle was sort of “sysadmin number one” at enStratus. This was in addition to his duties as managing all customer installs. So he did what most of us would do and brute forced a workable solution with the original shell scripts. As enStratus started to offer Chef and Puppet support in the product, Greg gets this wild hair up his ass and thinks:
You might be thinking the same thing I originally did that this was largely a bad idea. In my mind we had a workable solution for the interim in the existing shell scripts that had the install of enStratus down to a day or so. Pragmatism right? It’s also worth noting that this was how he wanted to learn Chef…
So off he goes and does what I recommend any new Puppet or Chef user does - exec resources all over the fucking place. Wrap your shell scripts in exec. Hardcode all the fucking things.
Once he did this, then I started working with him on some basic attributes to make them a bit more flexible. Before too long we had a stack of roles matching different components and we had moved everything from cookbook_file to remote_file. It was still a mess of execs but it worked.
But we still had this “state” we had to maintain between runs. This is not going away anytime soon. In production we store this state in attributes and use chef-server. We didn’t have that luxury here.
Then Jim Sander drops in and writes a small setup script that maintains some of that state for us. Basically a wrapper around raw chef-solo. Side note, if you ever need someone to drop some shell scripting knowledge on your ass, Jim’s the man to see. Ask him about his Tivoli days to really piss him off.
At this point, I start working on cleaning up the recipes as a sort of tutorial for folks. I’d pick a particular recipe and refactor it to all native resources and make it data driven. I’d commit these in small chunks so folks could easily see what the differences were easily - stuff like “instead of execing to call rpm, we’ll use the yum provider”.
At this point we’ve got something pretty far evolved from where we were. Now that we’ve got this workable chef-solo repository, I decide to hack out a quick Vagrantfile. The problem was it wasn’t entirely idempotent and we still had some manual steps that had to be dealt with. In addition to finishing up the recipes and ended up rewriting large chunks of the setup script. Now that I had something largely repeatable and localized, we suddenly had a Vagrant setup that folks could use for development. It wasn’t fully automated but it worked. We also still had this shared state thing.
So I set out to refactor the setup script a bit more. What’s important to keep in mind is that the primary use-case for this chef-solo repository wasn’t for Vagrant. This is our “installer”. The interesting part to me is that the improvements to how we do on-premise installs are coming as a direct result of making this work better with Vagrant. There’s a lot of wrapper work tied up in the setup script that wouldn’t need to be done if we used a base box that had more stuff baked in. However not baking stuff in actually gives us a more real-world scenario for installation.
Additionally we needed to be able to somehow pass user-specific configuration settings into the vagrant up process and get those into chef-solo by way of the setup wrapper. We have things like license keys, hostnames and my personal hated favorite - database credentials - that need to be handled in a way that we can make it so a developer can just type vagrant up and be running. If I have to require someone to edit a json file or anything else, the whole thing will fall flat on its face.
So any time we needed something like that, we added support to the setup wrapper and then used environment variables to pass that information in to vagrant.
We leverage environment variables pretty heavily in our Vagrantfile. If it’s something that someone might need to tune for whatever reason, it’s an environment variable that triggers an option to our setup script.
This is just a subset of the tunables we control via environment variables. The majority of these map directly to options for the setup script:
There are other options that are specific to the enStratus product as well but you get the idea.
I can’t post the full thing here but I can give you a general idea of how it works and some of the options it supports. This is a “sanitized” truncated version of the help output:
One of the “gotchas” we have is how do we basically build a node JSON file for chef-solo to use with any information we need to persist. Since we don’t know the state of all the systems involved when we go in, we have to “punt” on a few things. What we end up doing is something we call the savename. If you use this option, the settings you define will be persisted to a directory that git ignores called local_settings. This directory will contain directories named after the above savename parameter. The setup script (written for now in bash) will create a yaml file (easy to do in bash with HEREDOC as opposed to JSON) and also a copy of the generated encryption keys in a plain text file for the customer to store.
The only thing we can count on being on the system up front is the Chef omnibus install (since that’s a requirement). Instead of complicating things with ruby at this point (and chicken/egg issues since the setup script actually installs chef omnibus), we use the erubis binary that gets installed with omnibus to pass the yaml to to a JSON erb template. That generated JSON is the node json with attribute overrides. We actually support multi-node installation in the setup script if you provide a mapping of where certain components are running when calling setup. If you rerun setup using an existing savename parameter, the yaml file is updated (only certain values) and then regenerate the JSON file.
The best part of all of this is that we can now say the same process is used when installing enStratus locally in Vagrant, in our dev, staging and production environments (though production uses chef-server) as well as what we install on the customer’s site. We version this repository around static points in our release cycle. We branch for a new release and create tags at given points in the branch based on either a patch release for enStratus itself in that release OR a patch to the installer itself.
It’s not all unicorns pooping rainbows. The process is much more complicated than it needs to be but it’s almost a world of difference from where it was when I started and it was entirely a team effort. This setup allowed us to do full testing to switch entirely off the SunJDK (and the need to manually download the JCE during customer installs) onto OpenJDK. We were able to migrate from Tomcat to Jetty and refactor our build process using this method. I was able to do this work without affecting anyone else. All I had to do when we were ready for full testing was tell everyone to switch branches, run vagrant up and test away.
I want to give a serious shout-out to Mitchell Hashimoto and John Bender for the work they did with Vagrant. Last year I said that no two software products impacted my career more than ElasticSearch and ZeroMQ. This year, without a doubt, Vagrant is at the top of that list.
What follows is the sanitized version of our Vagrantfile. If anyone has any suggestions, I’m all ears:
This post is something that’s been brewing for a while. While it may sound targeted in tone, it’s more general than that. Let’s just call it an open letter to family, friends and coworkers around the world.
One thing that I have the hardest time communicating to friends and family who aren’t in the IT industry is the concept of “production” and what it means to be on-call. Even coworkers have a hard time understanding what it means.
The topic recently came up again and the confusion bothered me so much that I resolved to write this blog post as soon as humanly possible.
I want to clarify a few very important things:
Production environments take many forms. It’s even harder to define. For me, production has always meant “any system, service or component that the business requires to do business”.
I’ve worked in several different companies over the last 17 years. In some cases, production was an ERP system or a file server. In other cases, production was a web presence. What’s interesting each of these is that in some cases, production had a time associated with it.
Let’s take a few of these and compare them:
Long ago I worked for a company that did payday and title loans. We operated over 600+ retail locations from east to west coast. The primary application used by these outlets was a web-based loan management application (websphere + db2). Stores were located across the country and store hours were from 9AM to 6PM (IIRC). From this you might think “production was the web application and it needed to be online from 9AM EST to 10PM EST”. You would be correct at the highest level.
However employees started the day at 8AM (lining up customers to call and what not) and left at 7PM (closing out books for the day). After the last store went “offline”, we began various nightly batch jobs. Being that this was financial in nature, batch jobs were the norm. We also had backups that had to run as we rebuilt our QA database nightly from sanitized production database backups. If the batch jobs didn’t finish in time, we actually had to delay the start of the day for the stores. Our datawarehouse was also loaded from a secondary copy of the database restored from backup. If I recall the main reason for this was that our nightly window was SO crunched for time that we couldn’t even load the warehouse from the main database because we had to start various batch jobs as soon as backup was done.
But that’s just the main system. We had ancillary services as well. None of the retail outlets had access to the internet except through a squid proxy. There were print servers that did server-side check printing. In the backoffice, we had collections and other things that depending on the reports that came out of the data warehouse. We had nightly backups of the LAN stuff. DNS servers that the stores had to use. VPN concentrators. ALL of this had the same SLA as production.
All told, I recall the final number for any business hours outage as costing us something like $100k for 15 minutes of downtime.
This system was used by a charter school system in the state of Ohio. It was an online classroom system that provided education for at-risk students. This WAS the school for these kids. Obviously it had normal school hours but since the students had no physical textbooks of any kind, the system HAD to be online for something as simple as homework. As with the previous setup, there were all sorts of ancillary services that we had to have available. All of the static content was shared across all of the tomcat servers via a SAN (OCFS2 - I have scars). It was backed by MySQL. We still had to do backups. We had to maintain connectivity. Everything we had was ‘production’. Since we had developers in other countries on different hours, we burned what money we had when the development environment or our SVN repo was offline. That was production too.
To those in the industry I’m not telling you anything new. But to those not in the know, the internet doesn’t have office hours. Yes, you can gauge where your largest userbase is but take a system like enStratus.
It manages cloud resources for people all across the world. For many of these people, the only access they have to their cloud account is VIA enStratus. Take AWS for instance. enStratus is responsible for detecting outages and replacing components in the infrastructure for these companies or autoscaling to meet some demand. If enStratus is offline, these actions are NOT being taken on behalf of the user. The biggest fear for me is that enStratus is offline when AWS is having an outage. Some customers are paying us for this use case alone. Mind you in the last few outages, not even enStratus could fix the problem because of control plane issues. One thing enStratus can do is scale across multiple clouds so even AWS control plane issues are no excuse.
enStratus production itself is a pretty complex beast. The stack in general is designed to be fairly “SOA”. We use RabbitMQ pretty heavily for workers. However we’ve had some issues in the recent past where our workers were getting OutOfMemory exceptions. We run multiple workers (obviously) but in this case an OOM on one worker would eventually translate into OOMs across all the workers. When all the workers OOMd, they would stop processing messages from the queue. When that happened, RabbitMQ could eventually tank from units of work waiting to be picked up. We never had this happen, mind you but that was the end game.
This meant we had to be diligent on these OOMs. All the time. 24x7x365.
Luckily this problem was fairly short-lived but until the bug was identified and fixed (it happened to be related to an edge case with S3 bucket sizes), we had to be on guard for these OOM exceptions.
The thing that I want to get across is that “production” is DIRECTLY related to the bottom line of the business. If “production” is offline, customers can’t use the system. Customers are unhappy. If customers are unhappy they eventually go elsewhere. If customers go elsewhere the company loses money. If the company loses money eventually the company lays people off. This isn’t rocket science. We talk about complex systems and cascading failures. This is a cascading failure that means someone doesn’t have a job at Christmas.
Yes, I take it that seriously. When I talk about production, that’s what I mean.
Now that you know what production means and what impact it has, I shouldn’t need to say much about being “on-call”. Yes, I’m on-call now and then. Yes, just like a doctor. Sometimes, depending on the company, I’ve been the only person on-call. Ever. No rotation. No help. Just me. The one person keeping shit running all the time so that customers (internal or external) aren’t impacted by the slightest glitch in the system. Yes we should build more resilient systems and we strive to do that. However, tech debt is a thing. It’s not always immediately an option.
So when I’m on-call it means I’m the person responsible for production as defined above and all the baggage that comes with it.
Someone once said to me “Most of us work nights and weekends, although we try to balance it when we can.”
While I appreciate the sentiment, I don’t just work nights and weekends, I work ALL the time. I have to be able to respond at a moments notice to a production issue when I’m on-call. Think about that for a moment. I have to essentially be 15 minutes from a working internet connection and may need to sit in front of a computer for an unspecified amount of time until the issue is resolved. I can’t just go to bed or decide that I’ve worked enough for the day.
I’ve been pretty fortunate in the past several years to be in a situation where I can support production from pretty much anywhere. I need at most a 3G connection and my laptop. I can VPN into production and fix most any problem. Yes, I always bring my laptop on “vacation”. If I don’t have a decent signal, then there’s a chance I’ll have to drive to the McDonald’s 15 minutes away to use the wifi. I try not to be on-call when I’m on vacation but sometimes it’s not always an option.
I just got back from visiting my in-laws Up North in Michigan. The only time I was able to get a single bar of 3G was late at night when enough subscribers stopped using the cell towers. Up until a year or so ago, there was no option for any sort of broadband internet in the area.
I’ve finally gotten my in-laws to understand much of what I’ve written here. They’ll be wiring the cottage for cable internet so that I can take the family up for longer periods of time. Yes, I’ll be “working” on vacation but I’d rather work a bit on vacation and stay longer than have to cut the trip short just so I can get back.
As I said at the start, please don’t misinterpret what I’m saying as whining or some sort of god complex. This is the field I’ve chosen. I love what I do and I take that responsibility very seriously. As we start to build more resilient systems and accept that failure WILL happen and design for it, things will only get better. I still remember the first time I was able to replace a problematic system from scratch in 20 minutes via configuration management and call it a night.
As enStratus migrates its backend to Riak DS and builds out secondary and tertiary datacenters, I look forward to losing a data node not being the end of the world. DevOps über alles and all that.
So dear friends and family, the next time someone tells you they’re on-call for production….cut ‘em some slack.
Since I just tweeted about this and I know people would want an explaination, I figured I’d short circuit 140 character hell and explain why I think EBS was the worst thing Amazon ever did to AWS.
First time I’ve had to do this but: the following is my personal opinion and in no way reflects any policy or position of my employer
I remember when EC2 was first unleashed. At the time I was working at Roundbox Media (later Roundbox Global - because we had an office in Costa Rica!). I was asked frequently if we could possibly host some of our production stuff there.
It was pretty much a no go from the start:
Sure we could bake a bunch of stuff into the AMI root but the ephemeral storage wasn’t big enough to hold a fraction of our data. Still, we leveraged it as much as possible. We ran quite a bit of low risk stuff on it - test installs of our platform and demo sites for customers.
After I left RBX in Feb of 2008, I didn’t get an opportunity to work with AWS for a year or so and by then quite a bit had changed. If Amazon does one thing really well, it’s iterating quickly on its service offerings.
For Amazon, EBS is NOT a bad thing. It was probably one of the smartest business moves they made (along with Elastic IPs). They could now claim that EC2 was JUST like running your own kit - you have a SAN! you have static IPs!
The problem is it’s not.
Anyone who’s dealt with any sort of networked filesystem knows the pains it can cause with certain application profiles. Traditional databases are notorious for expecting actual local storage and real block devices. It amazes me the number of people who put up with the pain of running a database in something like vmware using virtual disks hosted on an NFS device.
The point is the block devices have specific semantics and presumptions.
With EBS you’re promised a tasty block device that your OS can address as if it were local disk. Only it’s not….
Let’s get the biggest elephant out of the way. EBS is a block device to the OS but under the hood it’s using the network. It may or may not be shared with non-block device traffic but it’s still subject to network latencies. God I hope that EBS at least gets its own port on the host side…
There’s a whole lot of sharing going on here to:
I don’t know how the connection from server to EBS is done. I would hope at least there are bonded ports or multiple uplinks/multipathing going on. I would REALLY hope that network I/O and Disk I/O are not on the same channel. Regardless, you’re still sharing whatever the size of that connection is with everyone else on the physical server your instance is on if they’re using EBS as well.
And the physical EBS array where your volume is? Depending on the size of your EBS volume, you’re dealing with network I/O on that unit’s connection from an unknown number of other customers. And to top it off, you’re not just sharing network bandwidth, you’re sharing disk bandwidth as well. There are still spindles under there folks. Sticking an API in front of it doesn’t change the fact that there is spinning rust under the covers.
Above ALL of that, you’ve got competing workloads - sequential vs random read.
Sure, just stick your root OS volume on that. That’s a great idea.
To me, however, the biggest problem with EBS is not the latency. It’s not the shared resources. It’s not even taking something that is fundamentally locality oriented and trying to shoehorn it into something distributed.
It’s the fact that it sends the wrong damn message. I’ve said this before, I’ll say it again and I’ll stand by it.
Unless you are willing, able or have designed your applications to have any single part of your infrastructure - connectivity, disk, node, whatever - ripped from under you with no warning whatsoever, you should not be running it on Amazon EC2.
By providing EBS, Amazon sends the message that “you can treat this just like your own datacenter”. Just use EBS and you can treat it just like a SAN. Look, we have snapshots!
Hell, I get pissy when folks refer to instances as “boxes” and talk about them like they’re something they physically own. Stop trying to map physical datacenter analogies to AWS. It won’t work and you’ll be disappointed.
You want to know the real kicker? You should be designing like this ANYWAY. Yes, you have much greater control over failure points when you run everything yourself. You have much greater control over resource sharing and I/O profiles. That doesn’t remove the need to design for failure. How far you take it is up to you (and realistically your budget) but when you’re running on AWS, you need to be much more attentive to it.
I still think AWS and public clouds are awesome. I really do. I think private clouds are just as awesome. The flexibility they offer is almost unmatched but that flexibility comes at a price - performance hits, multiple layers of abstraction and other things.
So it’s come to my attention that today is the “anniversary” of when I wrote my first “#monitoringsucks” blog post.
So the question I found myself asking today is “Does monitoring suck less than it did a year ago?”. I’d have to be an idiot to say anything other than “yes”.
I didn’t set out to start a “movement”. I’m not someone who handles compliments very well. Mainly because I suffer from a bad case of imposter syndrome. The other side of this is that I know that I’ve done next to nothing to make it any better. Meanwhile the real heros are people releasing code every day. People rethinking how we think about monitoring, trending, alerting and everything else. Companies like Etsy, Netflix, Yammer and countless more are sharing the deep squishy bits of how they do things and are releasing code to back it up.
I think the biggest thing that’s gotten better is that people are really starting to leverage advances we’ve had in ancillary tooling in recent times. Not that any of these ideas are new (message busses existed long before RabbitMQ) but the barrier to entry is much lower.
I still feel like what drove this was a byproduct of configuration management uptake. As it became easier to stamp out servers, the rate of change in our infrastructure surpassed what tools were original designed to deal with. As we started having more time to think about what we wanted to monitor (because we weren’t spending all our time building hand-crafted artisan machines), we started to feel the pain more. We wanted our monitoring systems to work as smoothly as the rest of the kit but it didn’t.
Combine that with:
The world is a brighter place because of this and to everyone who had something to do with it - whether discussing on a mailing list, talking on IRC, tweeting, writing code or whatever - thank you.
As a side effect of this monitoring thing, people ask my opinion a lot. Like I said, I’m still weirded out by this. Stepping back, though, and just geeking out on things, I see some really cool stuff in the future. Here’s just a subset of ‘stuff’ I’ve been thinking about:
I couldn’t think of a better way to describe it but the idea is simply (or not so simply) that by virtue of coming online, a system is saying “I wish to be monitored in this way”. This is pretty dependent on configuration management for this to go smoothly, imho.
I mentioned this in a post on the devops toolchain but it goes something like this:
Obviously this would all be very painful without some sort of configuration management system. However, it’s very easy for me in my base group or role for a system to say “Install W, register via X, listen on Y for active checks and publish everything to Z endpoint”. What W,X,Y and Z are is irrelevant. We can cookie cutter this stuff. FWIW this is nothing new. We’re just seeing “consumer-grade” options that are usable by everyone.
I’ve said many times that poll-based monitoring is dead. That’s a bit of hyperbole. What’s dead is the idea that we can only check X every N times over K period. This is a hold-over from ineffecient polling mechanisms that would crumble under too-frequent polling as well as systems that weren’t able to handle being polled that often. I see polling moving from “check host X every 5 minutes for memory usage” to “watch this bus for memory usage stats and if there’s not anything in 2 minutes, make sure the world is okay”. We’ll always need the outside-in checks of things but that’s much less intensive than polling ALL the things.
We’re so close with tools like Graphite now which can accept arbitrary metrics from anywhere with no need to preconfigure it to accept them. There are some concerns here around bad data being injected from unauthorized sources. As we automate more and make decisions based on this data, we need to be aware of it. Another discussion for another day though something akin to the way mcollective does trust is probably in order.
This is a big one too and I think will cut down on many complaints that people have around even something like Nagios.
We have to be able to say “You know what? We don’t need to monitor that. Let’s disable that check”. If something is unactionable, then why the hell are you alerting on it? This is where decoupling the trending/visualization from alerting can be so powerful. I’m currently rebuilding our monitoring setup to do most checks based on data in Graphite. Why? Because if I flip the relationship around, I’ve now got to deal with the alert question before I can even get the information. Instead of alerting on data and then storing it as an afterthought (perfdata anyone?) let’s start collecting the data, storing it and then alerting based on it.
This also provides for options around self-service. Not everyone needs to know about the disk space on nodeX. Only the people who can fix it do. Maybe your database folks want to get alerts on queries taking longer than N. As an operations person, you can’t do anything about that and certainly not at that moment (in most cases). You’re just going to push it down the line ANYWAY. And do you really want to have to deal with changing thresholds on behalf of someone?
I’m also a big fan of the idea that components in your infrastructure - applications, os, whatever - self-host a pubsub type of endpoint where users can get realtime information about the system themselves. I do this with every logstash install I setup where possible. Every remote logstash agent I’ve setup in enStratus also provides a pubsub 0mq socket that you can use to live tail log information from that host broken down in topic keys around metadata.
I’ve fawned over Coda Hale’s “Metrics” talk several times. I’m far from a fanboy but “Metrics” gets it right. This ties into self-service quite a bit. Developers need to be free to instrument the application without creating “yet another place to look”. Metrics does this so well with the idea of pushing instrumentation out of the application (oh look - push again!) and into Graphite or whereever is appropriate. And if you aren’t ready for push yet, you can still poll via JMX.
The idea has been ported to multiple other languages at this point. There no excuse not to deeply instrument your applications. If you have an application that CAN’T be instrumented properly, maybe you should consider a different application?
The last thing that I see as being a step forward is we start applying science to our process. No more -w 60,60,60 -c 75,75,75 canned thresholds. We start thinking about our thresholds. Maybe we do away with them entirely as static constructs. Instead we apply event processing and historical data to build thresholds that are intelligent.
We start looking at the shape of our infra. Is it REALLY important that you get woken up at 3AM because a Riak node is down? Not if it’s just one but maybe if it’s two depending on your cluster size. Maybe both of those nodes were in the same rack. Okay that’s bad.
We start to consider context and start applying science! We step out of the shamanistic ages of monitoring (who the hell still sets swap space to double physical memory and is 75% of a 1TB volume in use really something that can’t wait?) where “We’ve always done it this way”. Start thinking like the Apple 1984 commercial, whip out your hammer and smash your preexisting notions around what constitutes an alert.
Right now I’m spending most of my time being pragmatic. I’m still adding new checks to Nagios but the information is coming from different sources now. I’m dumping data into graphite via logstash and doing checks on that. Collectd is now pushing directly to graphite as well. Nagios is becoming less and less of a factor. When I finally strip it down to its bare essentials, I’ll have a better idea what gap needs to be filled. It’s starting to look like riemann at that point.
I still want to tackle this presence based idea in some form. Even if presence is just a signal to run chef-client. At my previous company, we used Noah for this. I’ve not yet had time to decide if Noah is the right fight here.
What’s more important is what others are building. There are too many to list but I’m going to give it a shot off the top of my head. Please don’t take offense if your project isn’t here.
Probably the best bet is to head over to the monitoringsucks tool repo on github. I can’t do the awesomeness of what people are doing justice here.
and so many more.
It always starts with a tweet. However it normally doesn’t start with a tweet from Cliff Moon.
Now for sure what spawned this comment was something unrelated but it got me thinking. Oddly enough Tim Dysinger was either poking around in my head or just had the same idea:
Tim and I hooked up via Skype and bantered about this stuff back and forth. We were on the same wavelength. That’s pretty cool because Tim is pretty fucking smart (and he was able to explain Maybe Monads to me over dinner).
What follows is something of a brain dump on what both Cliff and Tim had to say. However I’m going to be scoping in the context of security because
What I’m going to say isn’t new to anyone and smarter folks than I are already working on this (I’m sure) but this is the Internet. I get to babble too!
So what exactly IS the problem here? What’s configuration drift and how the hell does it even happen?
The problem here is that, as Tim said, configuration management systems aren’t assertive enough. Look at how a typical CM client run behaves:
That last line is part of the problem. I’ve talked about my Noah project to largish groups of folks (both Puppet and Chef users) a few times now and the answer to the question of “Do you leave puppet (or chef) running in the background?” has always been “No”. There are plenty of valid reasons for this but this is what I would consider the primary cause of drift at the node level. Now maybe this isn’t EXACTLY what Cliff was talking about. I’m not quite on his level so I sometimes misinterpret but when I heard ‘drift of state that occurs in idiomatic usage’, this was what came to mind.
The thing is that these tools are designed to verify state of a resource at the point they run
And then they go away. They don’t manage the state of those resources until they next inspect them. The act of managing those resources is not in response to those resources changing but in response to a user ASKING them to be checked. I would even wager that when a user runs chef-client the first thing on her mind isn’t “I sure hope chef fixes my sudoers file” but “I need chef to update my Nagios configs again”. The incorrect state of the sudoers file isn’t really even thought about. That’s because we shove that stuff into some “base” role or group. Something that’s applied to all nodes in our infrastructure. We don’t think of a node as being a “managed sudoers” node. We think of it as a “web server”.
Additionally, because we aren’t in a constant state of verification about these resources, we may have drift that occurs across nodes of different types whilst they share a common base block. Sure I just ran my CM tool to update my Nagios server but what about my web servers? I don’t want to run it there because I KNOW nothing has changed in the web server role.
To me, this is the “idiomatic” usage Cliff spoke about. The tools encourage us to think in terms of composition and reusable patterns but the final function of the node is the way we classify it. Mind you, the answer here is really to run your CM tool in the background but that still doesn’t take us to the next level. We’re still exposed to drift even if it’s for a short period of time. What’s worse is these tools operate by default with a splay value. This actually makes the drift exposure even worse as you can’t even guarantee that it will run at the interval specified.
I first heard about CFEngine when Mark talked about “Anomoly Detection” at LISA ‘04 in Atlanta. My mind was blown but I could never get past the idea that I couldn’t dictate state immediately. The idea (partially a naive understanding on my part) that systems would not become X when I said “Become X” bothered me. The idea that systems have a personality that needs to be respected bothered me.
The point here is that when I want a system to look like X, I want it to look like X right then. I want it to STAY looking like X and I don’t want it to try and account for localized variations. I might feel differently if I were managing a network of servers that were essentially treated like desktops.
Yes and no. If you’re living the cloud life, probably not. The reason is that resources tend to have a short shelf life. If I’m autoscaling via ‘the cloud’ to meet capacity demands then it’s highly likely that those systems won’t be around long enough to drift that far. In the land of configuration management, drift is largely time driven. The longer systems stay around, the greater the chance for drift.
However if you’re running physical hardware that you don’t tear down regularly, then drift is likely to become more pronounced. Interestingly enough there’s a psychological factor at play here. Systems become like pets instead of cattle. We become attached to them. “Oh that’s just db1 acting up again. You know it’s like the oldest one in the fleet”. People start forgetting that the system will fail (Everything fails. Embrace failure!). The start storing one-off scripts on there. Maybe it’s core kit and while it’s managed with Puppet, it’s not frequently touched.
Here’s another interesting point. As time progresses and modules, cookbooks, recipes, bundles, promises whatever are more infrequently touched, the confidence in them goes down. I’ve frequently found myself saying “Shit…I wrote that code like…I don’t even fucking remember when. I have no idea what would happen if I ran it now.”. This uncertainty eventually leads to me MANUALLY COMPARING the current state of resources that would be modified with the versions that would be generated. I’ve even copied comment blocks wholesale from one-off changes I’ve made into ERB templates just to ensure that a service restart didn’t happen.
How fucked is that? Pretty fucked, Alex.
This partially leads into a quote from John Allspaw on the dangers of OVER automation:
and is even discussed in Patrick McDonnell’s talk at ChefConf.
I don’t agree with John 100% on his take but I can totally understand his perspective. Maybe I’m just more optimistic around exactly how far we can automate.
Here’s yet another quote from Tim Dysinger on this topic:
Mind you security is only one aspect of this thought process. The thing that makes it applicable is that the security domain has already tackled this problem a bit. The problem is it still requires human response. We have tools like Tripwire, Samhain and OSSEC that do active inspection of state but the response is left up to a human. Additionally they’re cumbersome to configure (even with CM). What’s missing is the ‘glue’ between the two problem spaces.
In my head I envisioned something much like Tim described. In fact I even thought about a way that existing tools could be leveraged. It’s not pretty but it’s possible. The idea here, if it wasn’t already blindingly obvious, is that the response to an event that the security tool recognizes should be to run configuration management to correct the errant state.
There are a few problems with this approach that should also be immediately obvious:
What’s also missing in this picture is something to identify patterns. So now we’re bolting three tools together - the tripwire component, our CM tool and some sort of CEP. But again, even if we had this wondertool nirvana, how do we express it?
Let me be clear that I firmly believe that configuration management is absolutely a part of the security story. I stand by my assertion that consistent and repeatable configuration of a system from base OS to in-service is the foundation. Being able to express in code what state a system should have means that you never have to think “Did I forget to disable that apache module?” or “Did I make sure and disable root logins over SSH”. Where we find gaps in this is how we assert the negative without going insane.
Denied unless explicitly allowed is the mantra I followed for years when I was responsible for security. Ask me some time WHY I got out of security and why I don’t have ulcers anymore.
The questions I find myself asking are:
As I said, the original discussion was around configuration drift. I realize I went off on a tangent about security but that was intended as an example. I do believe that folks are working on this idea of “active assertion of state” as Tim puts it. I just wanted to brain dump my take on it. I don’t know that it can be solved with even the most flexible of CM tools. I do feel like it’s going to have to be a new generation of tool that takes these ideas into account and includes them in a ground-up design.
So it looks like Adrian Cockcroft finally spilled the beans on Netflix (no)Operations and sadly it reads like I expected.
Regardless of what words Adrian uses, Netflix still does operations. John Allspaw summed it up pretty well in this tweet:

and here are the things, he mentions:
These are just a few things that jumped out at me (and annoyed me)
Ops is ops is ops. No matter what you call it, Operations is operations.
There’s no such thing as a “DevOps tool”. People were using CFengine, Puppet and Chef long before DevOps was even a term. These are configuration management tools. In fact Adrian has even said they use Puppet in their legacy datacenter:

yet he seems to make the distinction between the ops guys there and the “devops” guys (whatever those are).
Just because you outsourced it, doesn’t mean it doesn’t exist. Oh and it’s not your cloud. It’s Amazon’s.
Actually this doesn’t take much reading between the lines. It’s out there in plain sight:
I’m glad to see this spelled out in such detail. This is what I’ve been telling people semi-privately for a while now. Because Netflix had such a terrible experience with its operations team, they went to the opposite extreme and disintermediated them.
Imagine you were scared as a kid by a clown. Now imagine you have kids of your own. You hate clowns. You had a bad experience with clowns. But it’s your kid’s birthday party so here you are making baloon animals, telling jokes and doing silly things to entertain the kids.
Just because you aren’t wearing makeup doesn’t make you any less of a clown. You’re doing clown shit. Through the eyes of the kids, you’re a clown. Deal with it.
Netflix is still doing operations. What should be telling and frightening to operations teams everywhere is this:
The Netflix response to poorly run operations that can’t service the business is going to become the norm and not the exception. Evolve or die.
Please note that I don’t lay all the blame on the Netflix operations team. I would love to hear the flipside of this story from someone who was there originally when the streaming initiative started. It would probably be full of stories we’ve heard before - no resources, misalignment of incentives and a whole host of others.
Adrian, thank you for writing the blog post. I hope it serves as a warning to those who come. Hopefully someday you’ll be able to see a clown again and not get scared ;)
Recently I saw a tweet from Kohsuke Kawaguchi that really got me frustrated.
I’ve addressed this topic a bit before here. At the time it was addressing specifically dynamic languages. However the post that Kohsuke wrote (and the post that inspired it) have led me to a new line attitude.
Don’t bother trying to get your packages into upstream vendor distros
Let me clarify something first. System packages are a good thing. The hassle has always been with BUILDING those packages. It was simply easier to build the software on the machine and install to /usr/local/ than to try and express anything more than the most moderately simple application in RPM or DEB build scripts:
Yes, you’re right. We now have tools like fpm that take the pain out of it! Maven has had plugins that generate rpms and debs for you for a while now. Things are looking up! Let’s just use those tools.
So now you think, I’ll just get these things submitted to Debian….
KABLOCK
I could rant a bit about Debian’s packaging policy but it’s addressed in the posts above. So maybe the Fedora people are more flexible?

WAT
So here we have the two major distros that won’t even consider your package unless you give the end-user the “freedom” to make your application unusable. Essentially you are told if you want your package to be included in upstream then you have to make sure they can swap out libfunkytown.so.23 with libfunkytown.so.1.
But maybe your application doesn’t work on that version. So maybe you think, I’ll just vendor ALL the things and shove it into /opt or /usr/local? Yeah that doesn’t fly either (for various reasons).
The point is that you’ll probably never be able to get your package included upstream because you’ll never be able to jump through the hoops to do it.
I know, I know. It would be awesome if you could tell users to just yum install kickass or apt-get install kickass but it’s not worth it for several reasons as enumerated above.
Distributions are not your friend. One could argue that its not thier job to be your friend. I would even agree with that argument. The distros have (or at least SHOULD have) an allegience to their user base. My argument is that position is directly opposed to your needs as a software provider.
You will be happy. Your users will be happy. The distros can go lick themselves. We have reached something of a crossroads. As I argued in the previous post, the concept of a distribution is becoming somewhat irrelevant. Distros are more concerned about politics and making statements and broken concepts like software that doesn’t need upgrading for 7 years (or even 2 years) than providing a framework and ecosystem that encourages developers to target software at it.
If someone takes up the noble cause of trying to get your software included upstream, I would go so far as to make it plainly clear on whatever communication you have that you simply cannot support an unofficial repackaging of your software. Be polite. These are still your potential userbase. Simply state that those were not created by you and that the official packages are here.
What I’m suggesting you do is not unheard of and honestly is the most tenable long term path for your users. Look at projects like Vagrant, Chef and Puppet among others. All of these tools are “owning their availability” the right way and are arguably providing better end user experiences than getting included in upstream could provide. In fact the experience of official packaging is above and beyond trying to do it yourself. As it should be.
So anyone who knows me knows I spend an inordinate amount of time bitching about Maven. I don’t know if it’s the type of companies I end up working for or what but I always seem to find myself ass-deep in Maven.
please note that I’m drifiting into deeply unfamiliar territory for me. Someone once told me the best way to learn about something is to write about it. Keep that in mind when making comments?
One of the more interesting parts of maven is the dependency graph and concepts like transitive and (god forbid) circular dependencies. These problems aren’t exlcusive to java, mind you. See bundler for Ruby.
Graph is a fairly overloaded term. In the context of this discussion I’m talking about graph theory (insofar as I can grok it). Specifically I want to talk about it in the context of IT operations.
Graphs are nothing “new”. Programmers have binary trees. Network geeks have OSPF. Puppet and Git are fans of the DAG (directed acyclic graph). These are all rooted in the same place no? You have nodes and edges. It’s math all the way down. Unfortunately I suck at math.
If the topic interests you at all, wikipedia has a good couple of articles worth reading. Seeing as I’m far from a domain expert, I can’t vouch for the quality:
I’ve said for a while now that I feel like there’s something fuzzy on the horizon that I can’t make quite make out and it involves orchestration and graphs. I’m still not clear on how to express it but I’ll try.
Anyone who has ever used Puppet or Git has dabbled in graphs even if they don’t know it. However my interest in graphs in operations relates to the infrastructure as a whole. James Turnbull expressed it very well last year in Mt. View when discussion orchestration. Obviously this is a topic near and dear to my heart.
Right now much of orchestration is in the embryonic stages. We define relationships manually. We register watches on znodes. We define hard links between components in a stack. X depends on Y depends on Z. We’re not really being smart about it. If someone disagrees, I would LOVE to see a tool addressing the space.
Justin Sheehy did an awesome high level presentation on distributed systems, databases and the like at Velocity last year. While the talk was good, one thing that stuck out with me was his usage of the Riak logo:

During the presentation he would zoom out of the logo and replace it with the same logo. It expressed the idea of moving up the stack. Macro versus micro. I have the same feeling about where orchestration is going.
Currently we do a great job (and have the tools) to express relationships and dependencies at the node level:
Going a level higher, we even have some limited ability to express relationships between nodes:
We’re not quite as good at this part yet but people have workarounds. I use Noah for this. enStratus also handles this very well.
But we’re still defining those relationships manually.
When we get to this next level up, things get REALLY fuzzy. As people start to (re)discover SOA, we now have stacks that have dependencies on other stacks. Currently we use tools like Zookeeper to broker that relationship. But we still have to explcitly manage it.
The level of coupling here isn’t the problem. You can mitigate failure in one stack as it relates to another stack. Fail fast and fall back to sane/safe defaults. Read any article about how Netflix architects to get an idea.
What I feel like we’re missing is a way to express those relationships and then trigger on them all the way up and down the chain as needed. We’re starting to get into graph territory here.
We must we be able to express and act on changes at the micro level (I changed a config, I must restart nginx) and even at the intranode level (something changed in my app tier, need to tell my load balancer) but now we need a way handle it at that macro level. Not only do we need a way to handle it but we must also be able to calculate what is impacted by that change.
It seems to me that a graph of SOME kind is the best way to express this. I just can’t quite make it out. Does current graph technology even handle that subgraph relationship? Excuse the pun but where do we draw the line? Are there multiple lines?
Maybe this isn’t an issue. Maybe through resilience engineering we simply keep that “intrastack” dependency as loose as possible so that we don’t have this problem?
A few days ago I wrote up some notes on how we’re making Logstash better by adding ZeroMQ as an option for inputs and outputs. That night we decided to take it a bit further and add support for ZeroMQ as a filter plugin as well.
I’ve had a lot of people ask me what’s so hot about ZeroMQ. It’s hard to explain but I really would suggest you read the excellent zguide. The best way I can describe it is that it’s sockets on steroids. Sockets that behave the way you would expect sockets to behave as opposed to the way they do now. Just open a socket!.
I’m only going to touch briefly on inputs and outputs. They were discussed briefly previously and I have a full fledged post in the wings about it.
They essentially work like the other implementations (AMQP and Redis) with the exception that you don’t have a broker in the middle. Let me show you:
As you can see we’re doing a pattern very similar to before. We want to send events of our nodes over to a cluster of indexers that do filtering. The difference here is that we don’t have a broker. Not big deal, right? One less thing to worry about! You don’t have to learn some new tool just to get some simple load balancing of workers. This works great…..until you need to scale workers.
Even using awesome configuration management, you’ve now got to cycle all your collectors to add the new endpoints. This means lost events. This makes me unhappy. It makes you unhappy. The world is sad. Why are you doing this to us?
Luckily I’ve been authorized by the Franklin Mint to release the source code to an enterprise class ZeroMQ broker that you can use. Not only is it enterprise class but it has built-in clustering. You can grab the code here from github.
Here are the configs for the logstash agents (output.conf is collector config, input.conf is indexer config):
output.conf:
input.conf:
Here’s a shot of our fancy clustered broker in action (click to zoom):

As you can see the two events we sent were automatically load balanced across our “brokers” which then load balanced across our indexers.
Obviously this is all something of a joke. All we have done is point our collectors at other nodes instead of directly at our indexers. But realize that you can create 2 fixed points on your network with 8 lines of core code and use those as the static information in your indexers and collectors. You can then scale either side without ever having to update a configuration file.
I dare say you can even run those on t1.micro instances on Amazon.
Oh and if you don’t like Ruby, write it in something else. That’s the beauty of ZeroMQ.
The thing that has me most excited is the addition of ZeroMQ as a filter to logstash. As you’ve already seen, ZeroMQ makes it REALLY easy to wire network topologies up with complex patterns. In the inputs and outputs we’ve exposed a few topologies that make sense. However there’s another topology that we had not yet exposed because it didn’t make sense - reqrep.
reqrep is short for request and reply. The reason we didn’t expose it previously is that it didn’t really make sense with the nature of inputs and outputs. However after talking with Jordan, we decided it actually DID make sense to use it for filters. After all, filters get a request -> do something -> return a response.
If it’s not immediately clear yet how this makes sense, I’ve got another example for you. Let’s take the case of needing to look something up externally to mutate a field. You COULD write a Logstash filter to do this ONE thing for you. Maybe you can make it generic enough to even submit a pull request.
Or you could use a ZeroMQ filter:
Here’s the code for the filter:
By default, the filter will send the entire event over a ZeroMQ REQ socket to tcp://localhost:2121. It will then take the reply and send it up the chain to the Logstash output with the following results:

Alternately, you can send a single field to the filter and have it to work with:
and the code:
and the result:

Many people have been asking for an exec filter for some time now. Dealing with that overhead is insane when coming from the JVM. By doing this type of work over ZeroMQ, there’s much less overhead AND a reliable conduit for making it happen.
Here’s just a few of the use cases I could think of:
All the ZeroMQ support is currently tagged experimental (hence the warnings you saw in my screenshots). It also exists in the form described only in master. If this interests you at all, please build from master and run some tests of your own. We would love the feedback and any bugs or tips you can provide are always valuable.
Every once in a while, a software project comes along that makes you rethink how you’ve done things up until that point. I’ve often said that ElasticSearch was the first of those projects for me. The other is ZeroMQ.
Evidently my testing missed a pretty critical usecase - pubsub. It doesn’t work right now. Due to the way we’re doing sockopts works for setting topics. However we don’t have a commensurate setting on the PUB side. I’ve created LOGSTASH-399 and LOGSTASH-400 to deal with these issues. I am so sorry about that however it doesn’t change the overall tone and content of this message as pair and pushpull still work.
In January of this year, Jordan merged the first iteration of ZeroMQ support for Logstash. Several people had been asking for it and I had it on my plate to do as well. Funny side note, the pull request for the ZeroMQ plugin was my inspiration for adding plugin_status to Logstash.
The reason for wanting to mark it experimental is that there was concern over the best approach to using ZeroMQ with Logstash. Did we create a single context per agent? Did we do a context per thread? How well would the multiple layers of indirection work (jvm + ruby + ffi)?
Brice’s original pull request only hadnled one part of the total ZeroMQ package (PUBSUB) but it was an awesome start. We actually had two other pull requests around the same time but his was first.
A week or so ago, I started a series of posts around doing load balanced filter pipelines with Logstash. The first was AMQP and then Redis. The next logical step was ZeroMQ (and something of a “Oh..and one more thing..” post). Sadly, the current version of the plugin was not amenable to doing the same flow. Since it only supported PUBSUB, I needed to do some work on the plugin to get the other socket types supported. I made this my weekend project.
One thing that ZeroMQ does amazingly well is make something complex very easy. It exposes common communication patterns over socket types and makes it easy to use them. It really is just plug and play communication.
However it also makes some really powerful flows available to you if you dig deep enough. Look at this example from the zguide

Mind you the code for that is pretty simple (ruby example) but we need to enable that level of flexibility and power behind the Logstash config language. We also wanted to avoid the confusion that we faced with the AMQP plugin around exchange vs. queue.
Jordan came up with the idea of removing the socket type confusion and just exposing the patterns. And that’s what we’ve done.
In the configuration language, Logstash exposes the ZeroMQ socket type pairs in the using the same syntax on both inputs and outputs. We call these a “topology”. In fact, out of the box, Logstash ZeroMQ support will work out of the box with two agents on the same machine:
Because any side of a socket type in ZeroMQ can be the connecting or binding side (the underlying message flow is disconnected from how the connection is established), Logstash follows the recommendation of the zguide. The more “stable” parts of your infrastructure should be the side that binds/listens while they ephemeral side should be the one that initiates connections.
Following this, we have some sane defaults around the plugins:
The last two are obviously pretty “duh” but worth mentioning. Right now Logstash exposes three socket types that make sense for Logstash:
It’s worth reading up on ALL the socket types in ZeroMQ.
By default, because of how ZeroMQ will most commonly be slotted into your pipeline, it sets the default message format to the Logstash native json_event.
You can still get to the low-level tuning of the sockets via the sockopts configuration setting. This is a Logstash config hash. For example, if you wanted to tune the high water mark of a socket (ZMQ_HWM), you would do so with this option:
zeromq { topology => "pushpull" sockopts => ["ZMQ::HWM", 20] }
These options are passed directly to the ffi-rzmq library we use (hence the syntax on the option name). If a new option is added in a later release, it’s already available that way.
While I have a few more blog posts in the hopper around ZeroMQ (and various patterns with Logstash), I’ll briefly cover where each type might fit.
This is exactly what it sounds like. Each output (PUB) broadcasts to all connected inputs (SUB).
This most closely mimics the examples in my previous posts on AMQP and Redis. Each output (PUSH) load-balances across all connected inputs (PULL).
This is essentially a one-to-one streaming socket. While messages CAN flow both directions, Logstash does not support (nor need) that. Outputs stream events to the input.
ZeroMQ has other topologies (like REQREP - request response and ROUTER/DEALER) but they don’t really make sense for Logstash right now. For the type of messaging that Logstash does between peers, PAIR is a much better fit. We have plans to expose these in a future release.
As I said, I’ve got quite a few ideas for posts around this plugin. It opens up so many avenues for users and makes doing complex pipelines much easier. Here’s a sample of some things you’ll be able to do:
Current ZeroMQ support only exists in master right now. However building from source is very easy. Simply clone the repo and type make. You don’t even need to have Ruby installed. This will leave your very own jar file in the build directory.
After yesterday’s post about load balancing logstash with AMQP and RabbitMQ, I got to thinking that it might be useful to show a smilar pattern with other inputs and outputs.
To me this, is the crux of what makes Logstash so awesome. Someone asked me to describe Logstash in one sentence. The best I could come up with was:
I hope this post helps you understand what I meant by that
If you recall from the post yesterday, we had the following ‘requirements’:
Originally our list stated the requirements as No lost messages and No duplicate messages. I’ve amended those with a slight modification to closer reflect the original intent. Please see comment from Jelle Smet here for details. Thanks Jelle!
Our design looked something like this:

One of the reasons that post was so long was that AMQP is a complicated beast. There was quite a bit of dense frontloading I had to do to cover AMQP before we got to the meat.
We’re going to take that same example, and swap out RabbitMQ for something a bit simpler and achieve the same results.
Redis is commonly lumped in with a group of data storage technologies called NoSQL. Its name is short for “REmoteDIctionaryServer”. It typically falls into the “key/value” family of NoSQL.
Several things set Redis apart from most key/value systems however:
I’m not going to go into too much detail about the data types except to list them and highlight the one we’ll be leveraging. You can read more about them here
Looking back at our AMQP example, we note three distinct exchange types. These are mapped to the following functionality in Redis (and Logstash data_type config for reference):

This is a somewhat over simplified list. In the case of a message producer, mimicing direct exchanges is done by writing to a Redis list while consumption of that is done via the Redis command BLPOP*. However mimicing the fanout and topic functionality is done strictly with the commands PUBLISH*, SUBSCRIBE* and PSUBSCRIBE*. It’s worth reading each of those for a better understanding.
Oddly enough, the use of Redis as a messaging bus is something of a side effect. Redis supported lists that are auto-sorted by insert order. The POP command variants allowed single transaction get and remove of the data. It just fit the use case.
As with our previous example, we’re going to show the configs needed on each side and explain them a little bit.
This is where we tell Logstash how to send the data to Redis. In the case, again, we’re storing it in a list data type.
Unfortunately, key means different things (though with the same effect) depending on the data_type being used. In the case of a list this maps cleanly to the understanding of a key in a key/value system. It’s common in Redis to namespace keys with a : though it’s entirely unneccesary.
As an aside, when using key on channel data type, this behaves like the routing key in AMQP parlance with the exception of being able to use any separator you like (in other words, you can namespace with .,:,:: whatever).
This needs to match up with the value from the output plugin. Again, in this example list.
In the case of a list this needs to map EXACTLY to the output plugin. Following on to our previous aside, for data_type values of channel input, the key must match exactly while pattern_channel can support wildcards. Redis PSUBSCRIBE wildcards actually much simpler than AMQP ones. You can use * at any point in the key name.
We’re going to simplify our original tests a little bit in the interest of brevity. Showing 2 producers and 2 consumers gives us the same benefit as showing four of each. Since we don’t have the benefit of a pretty management interface, we’re going to use the redis server debug information and the redis-cli application to allow us to see certain management information.
Start the server with the command redis-server I’m running this from homebrew but you literally build Redis on any machine that has make and a compiler. That’s all you need. You can even run it straight from the source directory:

You’ll notice that the redis server is periodically dumping some stats - number of connected clients and the amount of memory in use.
We’re going to start two producers (redis output) and two consumers (redis input):

Back in our redis-server window, you should now see two connected clients in the periodic status messages. Why not four? Because the producers don’t have a persistent connection to Redis. Only the consumers do (via BLPOP):

As with our previous post, we’re going to alternate messages between the two producers. In the first producer, we’ll type window 1 and in the second window 2. You’ll see the consumers pick up the messages:

If you look over in the redis-server window, you’ll also see that our client count went up to four. If we were to leave these clients alone, eventually it would drop back down to two.

Feel free to run the tests a few times and get a feel for message flow.
This is all well and good but as with the previous example, we want to test how this configuration handles the case of consumers going offline. Shut down the two indexer configs and let’s verify. To do this, we’re going to also open up a new window and run the redis-cli app. Technically, you don’t even need that. You can telnet to the redis port and just run these commands yourself. We’re going to use the LLEN command to get the size of our “backlog”.
In the producer windows, type a few messages. Alternate between producers for maximum effect. Then go over to the redis-cli window and type LLEN logstash:redis. You should see something like the following (obviously varied by how many messages you sent):

You’ll also notice in the redis server window that the amount of memory in use went up slightly.
Now let’s start our consumers back up and ensure they drain (and in insert order):

Looks good to me!
You might have noticed I didn’t address disk-based persistence at all. This was intentional. Redis is primarily a memory-based store. However it does have support for a few different ways of persisting to disk - RDB and AOF. I’m not going to go into too much detail on those. The Redis documentation does a good job of explaining the pros and cons of each. You can read that here.
One thing that’s important to note is that Redis is pretty damn fast. The limitation for Redis is essentially memory. However if speed isn’t your primary concern, there’s an interesting alpha project called edis worth investigating. It is a port of Redis to Erlang. Its primary goal is better persistence for Redis. For this post I also tested Logstash against edis and I’m happy to say it works:

I hope to do further testing with it in the future in a multinode setup.
I’m also working on a part three in this “series”. The last configuration I’d like to show is doing this same setup but using 0mq as the bus. This is going to be especially challenging since our 0mq support is curretly ‘alpha’-ish quality. Beyond that, I plan on doing a similar series using pub/sub patterns. If you’re enjoying these posts, please comment and let me know!
AMQP in Logstash is one of the most complicated parts of the workflow. I’ve taken it on myself, as the person with the most AMQP experience (both RabbitMQ and Qpid) to try and explain as much as need for logstash users.
Patrick DeBois hit me up with a common logstash design pattern that I felt warranted a full detailed post.
Warning: This is an image heavy post. Terminal screenshots are linked to larger versions
Originally our list stated the requirements as No lost messages and No duplicate messages. I’ve amended those with a slight modification to closer reflect the original intent. Please see comment from Jelle Smet here for details. Thanks Jelle!
We’re going to leave the details of filtering and client-side input up to the imagination.
For this use case we’ll simply use stdin as our starting point. You can modify this as you see fit.
The same goes for filtering. The assumption is that your filters will be correct and not be the source of any messages NOT making it into ElasticSearch.
Each configuration will be explained so don’t stress over it at first glance. We’re also going to explicitly set some options for the sake of easier comprehension.
The amqp output:
This is the name that will be provided to RabbitMQ for the exchange. By default, the Bunny driver will auto-generate a name. This won’t work in this usecase because the consumers will need a known name. Remember exchanges are for producers. Queues are for consumers. When we wire up the indexer side, we’ll need to know the name of the exchange to perform the binding.
For this particular design, we want to use a direct exchange. It’s the only way we can guarantee that only one copy of a log message will be processed.
We’re going to explicitly set the routing key as direct exchanges do not support wildcard routing key bindings. Again, we’ll need this on the consumer side to ensure we get the right messages.
This setting controls if the exchange should survive RabbitMQ restarts or not.
This is for the messages. Should they be persisted to disk or not?
Note that for a fully “no lost messages scenario” to work in RabbitMQ, you have to jump through some hoops. This is explain more below.
This same configuration should be used on ALL host agents where logs are being read. You can have variation in the inputs. You can have additional outputs however the amqp output stanza above will ensure that all messages will be sent to RabbitMQ.
The amqp input:
This is the name that will be provided to RabbitMQ for the queue. Again, as with exchange, we need a known name. The reason for this is that all of our indexers are going to share a common queue. This will make sense in a moment.
This should match exactly with the name of the exchange that was created before in the host-side config.
This should, again, match the routing key provided in the host-side configuration exactly. direct exchanges do NOT support wildcard routing keys. By providing a routing key, you are creating a binding in RabbitMQ terms. This binding says “I want all messages sent to the logstash-exchange with a routing key of logstash-routing-key to be sent to the queue named indexer-queue.
As with the exchange in the host-side config, we’re going to have multiple workers using this queue. This is another AMQP detail. When you bind a queue to an exchange, a channel is created for the messages to flow across. A single queue can have multiple channels. This is how our worker pool is going to operate.
You do not want a different queue name for each worker despite how weird that sounds
If you give each worker its own queue, then you WILL get duplicate messages. It’s counterintuitive, I know. Just trust me. The way to ensure that multiple consumers don’t see the same message is to use mutliple channels on the same queue.
Same as the exchange declarition, this ensures that the queue will stick around if the broker (the RabbitMQ server) restarts.
This is the setting most people miss when trying to ensure no lost messages. By default, RabbitMQ will throw away even durable queues once the last user of the queue disconnects.
This is the standard logstash requirement for inputs. They must have a type defined. Arbitrary string.
Simply put, RabbitMQ makes you jump through hoops to ensure that no message is lost. There’s a trifecta of settings that you have to have for it to work:
EVEN IF YOU DO ALL THESE THINGS, YOU CAN STILL LOSE MESSAGES!
I know … you’re thinking “What the F—?”. There is still a scenario where you can lose messages. It has to do with how you start things up.
While RabbitMQ let’s you predeclare exchanges and queues from the command-line, it normally only creates things when someone asks for it. Since exchanges know nothing about the consumption side of the messages (the queues), creating an exchange with all the right settings does NOT create the queue and thus no binding is ever created.
Conversely, you can’t declare a totally durable queue when there is no exchange in place to bind against.
Follow these rules and you’ll be okay. You only need to do it once:
Once the indexer agent has started, you will be good to go. You can shutdown the indexers and messages will start piling up. You can shut everything down - rabbitmq (with backlogged messages), the indexer agent and the host-side agent. When you start RabbitMQ, the queues, exchanges and messages will all still be there. If you start an indexer agent, it will drain the outstanding messages.
However, if you screw the configuration up you’ll have to delete the exchange and the queue via rabbitmqctl or the management web interface and start over.
There are two plugins you should install with RabbitMQ:
The first will provide a web interface (and HTTP API!) listening on port 55672 of your RabbitMQ server. It provides a really easy way to see messages backlogged, declared exchanges/queue and pretty much everything else. Seeing as it also provides a very nice REST api to everything inside the RabbitMQ server, you’ll want it anyway if for nothing but monitoring hooks.
The visualizer is an ad-hoc addon that helps you see the flows through the system. It’s not as pretty as the management web interface proper but it gets the job done.
Now we can start things up
We’re going to start up our four client side agents. These will create the exchange (or alternately connect to the existing one). If you look at the management interface, you’ll see four channels established:
Management view:

Visualizer view:

Remember that until we connect with a consumer configuration (the indexer) messages sent to these exchanges WILL be lost.
Now we start our indexer configurations - all four of them
Now if we take a peek around the management interface and the visualizer, we start to see some cool stuff.
In the managment interface, you’ll see eight total channels - four for the queue and four for the exchange

If you click on “Queues” at the top and then on the entry for our indexer-queue, you’ll see more details:

But the real visual is in the visualizer tab. Click on it and then click on the indexer-queue on the far right

You can see the lines showing the flow of messages.
One thing to make note of about RabbitMQ load balancing. Messages are load balanced across CONSUMERS not QUEUES. There’s a subtle distinction there from RabbitMQ’s semantic point of view.
Over in your terminal window, let’s send some test messages. For this test, again, I’m using stdin for my origination and stdout to mimic the ElasticSearch destination.
In my first input window, I’m going just type 1 through 4 with a newline after each. This should result in each consumer getting a message round-robin style:

Now I’m going to cycle through the input windows and send a single message from each:

You can see that messages 4-7 were sent round-robin style.
All of this is for naught if we lose messages because our workers are offline. Let’s shutdown all of our workers and send a bunch of messages from each input window:

We sent two lines of text per window. This amounts to eight log messages that should be queued up for us. Let’s check the management interface:

Now if we stop rabbitmq entirely and restart it, those messages should still be there (along with the queue and exchanges we created).
Once you’ve verified that, start one of the workers back up. When it comes fully online, it should drain all of the messages from the exchange:

Yep, there they went. The last two messages you get should be the ones from window 4. This is another basic functionality of message queue software in general. Messages should be delivered in the order in which they were recieved.
Here’s a flowchart I created with Gliffy to show what the high-level overview of our setup would look like. Hope it helps and feel free to hit me up on freenode irc in the #logstash channel or on twitter.

This post will eventually make its way into the Logstash Cookbook Site.
I mentioned briefly in my previous post that I got quite a few people coming up to me after the panel and asking me for advice on monitoring.
I tweeted about this scenario not long after it happened but here’s the gist:
The person who asked this was very friendly and I could sense the frustration in her voice. It frustrates me to no end to hear stories of my tribe being this way to customers.
I thought for a minute because I really wanted to help and the best thing I could think of was Jenkins. Yes, Jenkins.
Let’s look for a minute at what we need from a simple health check system:
Now you might think to your self “Self, this sure does sound a lot like cron”. You’d be right. And that’s EXACTLY what took me down the Jenkins path. There have been numerous posts about people replacing individual cron jobs with a centralized model based on Jenkins. This makes perfect sense and is something of a holy grail. I clearly remember researching and evaluating batch scheduling products many years ago to essentially do just this. If only Jenkins had been around then.
While Jenkins is a great low friction way to accomplish this task, it may or may not be scalable in the long run. While Jenkins jobs are defined as XML files and can be managed via an API, it’s still a bit cumbersome to automate.
First thing to do is grab the latest Jenkins war. The nice thing about Jenkins is that it ships in such an easy to use format - a self-contained executable war. You can start it very simply with:
You should probably click around to get comfortable with the interface. It’s pretty difficult to screw something up but if you do, just shutdown jenkins, rm -rf ~/.jenkins and start it back up.
Since this post is geared primarily at someone who probably isn’t familiar with Jenkins, I’m going to go over a few quick basics and key areas we’ll be working with:
The menu is the section on the left handside. It will change based on your location in the application. If you don’t always see something you’re expecting, you can use the breadcrumb navigation to work your way back. Alternately, you can click on the Jenkins logo to get to the main page.
This is the menu you see from the top-level of the Jenkins interface

This is the menu you see when you are viewing the main page of a job

Note the “Build History” section at the bottom. This is a list of all builds that have been performed for this job. You can click on a given build to see details about it.
This menu is visible when you select a specific build from the “Build History” menu of a Job page

Notice the “Console Output” menu option. This will show you the log of what Jenkins did during a build. If you ever have problems with a build, you should come here and look at what happened.
In the interest of eliminating any confusion, we’re going to enable “Auto Refresh” from the link on the top right:

For the purposes of this exercise, we won’t do too much configuration. We’re going to take the perspective of the person above. We’ll make few assumptions though in the interest of expidiency:
The key to success here is something called a “free-style software project”. This is essentially a blank canvas with very few requirements. I’m aware that the “Monitor an external job” type has been recently added but the steps were a bit too invasive for this particular case.
I don’t obviously have the specifics of what the user wanted checked so I’m going to extrapolate from her original statement:
The test database will be MySQL running on a Linux VM. Getting this going is an exercise for the reader, however here is the DDL and test data we’re using:
So we’ll create a new freestyle job called “Check FooDB Backlog”. Click on “New Job” from the main menu.

Once you’ve created the job, the screen gets a bit more hectic. We’re only going to concern ourselves with a few key areas:
Under build triggers, we want to use the “Build Periodically” option. The syntax is akin to cron and there are some additional macros for known intervals. As with any Jenkins option, you can click on the ? icon to the right of the option for inline help.

So we’re going to set up our health check to run every 15 minutes:

Through Jenkins plugins, you can get an insane amount of additional build steps. However, the shipped experience has the stuff we need for now. We’re going to be using the “Execute Shell” option. If you are running Jenkins on Windows, you’ll want to use the “Execute Windows Batch command” instead. You will, of course, need to modify the commands appropriately yourself.

Here’s the body of our build step:

Once you click save, you can click “Build Now” on the job menu to give it a test. It should fail:

Let’s modify the job so we can see what success looks like. Click on the “Configure” link in the build menu and modify your build step. Set the threshold in the query to 101. The build should now be blue:

This all works very well if you just want to manually inspect the status however let’s take it a step further. Click on the “Configure” link from the Job menu. Notice at the bottom of the following screen, there’s a section called “Post-build Actions”. The very last option is “E-mail Notification”. You can click the ? to see the default behaviour. Check the box and add your email address:

Sadly, this isn’t enough to enable email notifications. You’ll need to tell Jenkins an SMTP server it can use. Go back to the main menu and click “Manage Jenkins”.

From here, we’re going to click “Configure System”
Another busy screen! The settings in this section can get you in trouble if you aren’t careful. The most common problem is people attempting to enable security and inadvertently locking themselves out.
We’re not worried about that for now. Scroll to the bottom and configure your SMTP server. The settings shown are for gmail and you’ll need to click the “Advanced” button to enable additional settings.

You can select the last checkbox to test that your settings work.
Once that’s done, click save. Now we’re going to rerun the job (Go back to the main menu then click your job from the list to see the “Build Now” option in the job menu.
You most likely won’t get an email because the job is passing. Let’s configure our job again and set the threshold back to 100. Save the job and click “Build Now” again from the job menu.
You should get an email that looks something like this:
There’s not much information in there since our job is swallowing the mysql output and using it as the exit code. You can spice the output however you like it by adding echo statements to the build step. Any output from the job will be included in the email. If you change the thresholds back to a value that you know will pass, you’ll get at least one email when the build recovers. Unless the build starts failing again, you won’t get any emails.
So now we’ve got something handling our DB test. We also needed to check to see if some process was running. Let’s do a simple one to see if MySQL is running. Let’s call it “Check MySQL Running”. Follow the steps for creating a free-style job but this time we’re going to create our build step like so:
Again, we’re going to assume that SSH keys are setup with no password. We’re keeping it simple. Just as in the case of the other job, we should get a blue build status.
The third job is the most complex in that we’re going to need to install a plugin for maximum effect. This will have you jumping around a bit but hopefully you’re a bit more comfortable navigating by now.
At a high level we’re going to do the following:
We’re going to go back to “Manage Jenkins” (accessible from the main menu) but now we’re going to select “Manage Plugins”.

Once on the plugin screen, click the “Available” tab. This part can be overwhelming. It’s especially confusing since plugins will be listed twice if they fall into multiple categories. However, you only need to mark it once.
The plugin we want is called the “Log Parser Plugin”. If you can’t easily find it, use your browser’s “find on page” (CTRL-F, APPLE-F) to find it.
Check the box and click “Install without Restart”. You should see a screen similar to this:

Now let’s create our final job. Following the same steps as above, create a new job called “Check DHCP Errors”. Again, reaching for a contrived case, I’m going to check my VM’s syslog to see if it had any errors related to DHCP.
Now we could have done this with a grep statement just like above. However I wanted to show installing plugins and the “Log Parser Plugin” actually offers some more flexible options, understands more than just pass or fail and can match multiple items without building overly complex flow into your shell step.
You’ll notice at the bottom we now have an ADDITIONAL option in our “Post-build Actions” - Console output (build log) parsing:

Whenever you install a plugin, where it’s used depends on what it does. In this case, we’re doing post processing of the job run log. We can add a third state via this plugin as opposed to just “Pass” or “Fail” - “Unstable”. Before we can enable it, however, we need to give it some parsing rules.
For now leave the option unchecked and click “Save”
Go back to the “Manage Jenkins” screen (where you set the Email settings). At the bottom, you should now have an option for Console Output Parsing:

Again, anything you configure in this section is GLOBAL. Luckily you can define various rule sets for parsing and apply them individualy to jobs. This plugin is a bit complex so you’ll probably want to look at the documentation.
We’re going to create a very basic rules file in /tmp on our LOCAL machine (where Jenkins is running) called jenkins-dhclient-rules:
This is telling the log parser that the following line is a “warning”:
Jan 23 01:49:52 ubuntu dhclient: can't create /var/lib/dhcp3/dhclient.eth1.leases: No such file or directory
and that
Jan 23 01:49:52 ubuntu dhclient: bound to 192.168.56.101 -- renewal in 1367 seconds.
is informational. These distinctions are handy for the plugin’s colorized output support.
Now that we’ve created that file, under the plugin settings we want to name it and give it the location to the file:

Finally!
Let’s go back to our new job (Check DHCP Errors) and modify it. We want to enable the parsing plugin in the post-build steps. We’re going to check “Mark build Unstable” for warnings and select our rule. Now save the job. The reason we’re going for warning is that this error is not fatal. Our system still gets an IP address. What we want to do is draw attention to it.

Now if you run the job, you’ll get a yellow ball indicating that the job is unstable. If we were to change the first line of our rule to error and check the appropriate box, the job would have been marked a failure. Something additional this plugin provides is the “parsed console output”. If you click on the job detail and select “Parse Console Output” from the job menu, you’ll actually get a nicer way to see exactly what was wrong:

Again, this is a totally contrived example. Obviously we would fail long before the parsing had the host been down.
All of these individual jobs are neat but there’s an obvious dependency there. We need to be able to SSH to the host, we need mysql to be running and then we want to query it. We don’t want multiple emails for each failure. We only want the actual failed job to alert us. Let’s chain these jobs together to match that flow.
Now if you run the top-level job (Check DHCP Errors), all of the jobs will run. If any fail, the run will stop there and alert you! Since this is now scheduled, every 15 minutes this entire workflow will be checked.
Jenkins has a boatload of plugins. It’s worth investigating them to see if they make some given task (like output parsing) easier. Some provide additional notification paths like jabber or irc. Others provide additional build step types in specific languages like Groovy or Powershell. You can also do things like create a “Parameterized Build”. This is especially handy for thresholds. There’s also a very handy SSH plugin that let’s you define hosts globally and keys per host. This helps clean up your build steps too.
One plugin that was recommended is the “Email-ext” plugin. This allows you to REALLY spice up and configure your email notifications.
There’s a plugin for checking a web site for some criteria and plugins for starting virtual machines. There are also plugins for creating a radiator view so you can get a nice big dashboard for just checking the state of jobs at a glance.
The key to remember is that Jenkins is an unopinionated build tool. This flexiblity lends itself to doing off-the-wall stuff (like being a monitoring system or a cron replacement). The trick is translating the concepts and terminology of building software to something that fits your use case.
I’d like to thank Joe Miller, Ches Martin and R. Tyler Croy for reviewing this post and offering up corrections, tips and advice.
This past week I had the awesome pleasure of participating in my first SoCal Linux Expo. As I later discovered, this was the 10th installment of this awesome event (hence the 10x).
I got an email from Ilan Rabinovitch just as things were going down with me headed to enStratus. Since the event was going to be right around the time I started, I pretty much put it out of my mind.
Then I realized that my boss was going to be attending. I figured it wouldn’t hurt to ask and it was decided that I would shadow John on his trip to enStratus HQ for my mandatory cultural immersion (translation: does the fat redneck own a winter coat?) and on to SCaLE. While I didn’t make it to Minnesota (diverted to San Jose on business), I did still make it to the conference.
I had an awesome time in San Francisco and San Jose. I got to meet a great bunch of folks and geek out hardcore.
Ilan asked me if I would be willing to be on a panel about the whole #monitoringsucks thing. We were able to score a great panel of folks:
The event was awesome. I did some minor introductions, got the ball rolling with some questions and then we let the audience take it from there.
The participation was AWESOME. We had great questions from the audience and the feedback I got AFTER the fact was mindblowing. One particular post-panel question is worth a blog post in its own right.
One thing that really stood out was this: People just don’t know where to start. The landscape is pretty “cluttered”. Chris Webber brought up a very salient point that I sometimes forget; When we talk about “monitoring”, we’re really talking about multiple things - collection, alerting, visualization, trending and multitudes of other aspects.
I got asked several times in the hallway - “What should I use?” or “What do you think about ?”. My first response was always “What are you using now?”.
I like to think I’m pretty pragmatic. I love the new shiny. I love pretty graphs. I’m a technologist. However, I know when to be realistic. My thought process goes something like this:
Why are you looking to switch? Is it unreliable? Is it painful to configure? Basically, if it’s getting the job done and has relatively minor overhead there’s no reason to switch.
The pain points for me with monitoring solutions usually come much later. It doesn’t scale or scaling it is difficult. It doesn’t provide the visibility I need. It’s unreliable (usually due to scaling problems).
Until then, use what you’ve got and be guard for early signs of problems like check latency going up or missed notifications.
If you have a configuration management solution in place, it probably has native support for configuring Nagios. When you add a new host to your environment, you only need to tell your CM tool to run on your monitoring server. If you’ve done any sort of logical grouping, you’ll have the right things monitored quickly.
If you don’t have ANYTHING in place, you need to cover two bases pretty quick:
For outside in checks, use something quick and easy like Pingdom. For the inside checks, don’t underestimate the power of a cron job. If you want something a bit more packaged, look at monit. It’s dead simple and can get you to a safe place.
Monitoring tools are great but many times they fall down when you need to diagnose a problem ex post facto. If you went the simple route, you probably don’t have any real trending data. This is where many complaints start to come from folks. You end up monitoring the same thing twice - once for alerting systems like Nagios and another time for your visualization, trending and other engines. When you reach this point, start looking at things like Sensu or all-in-one solutions that, while cumbersome and imprecise use the same collected data - Zenoss, Zabbix, Icinga (originally a fork of Nagios).
The event was recorded (both audio and video) but I have no timeframe on when it’s going to be available but I’ll let you know as soon as it’s up.
The rest of the conference was epic as well. Being that this was my first time, I didn’t know what to expect. The thing that most stood out was the number of children. This was probably the most family friendly conference I’ve ever been to. Encouraging stuff. Plenty of events and in fact an entire track dedicated to children.
I didn’t get to attend as many talks as I wanted to. While the facility was really nice, the building is like a faraday cage. My phone spent what little battery life it had just trying to get a signal. I spent quite a bit of time running back to my room to charge up. Chris Webber totally got me hooked on portable chargers.
disclaimer: I’m fully aware that Juju is undergoing heavy active development and is a very young project
One of the talks I attended was on Juju. I was probably a bit harsh on Juju when it was first announced. The original name was much better and the whole witch doctor thing just doesn’t sit well with me.
I also hate the tag line - “DevOps distilled”. It’s marketing pure and simple. I have very little tolerance for things that bill themselves as a “devops tool” or “for devops”.
But more than the name, something about Juju didn’t feel right. After the talk, something still doesn’t feel right. While I don’t like pooping all over someone else’s hard work so writing this part is tough.
Right now, I don’t think Juju even knows where it fits. It’s got some great ideas and on any other day, I’d be all over it. The problem is that Juju tries to do too much in some areas and not enough in others.
Parts of Juju are EXACTLY what I see as my primary use case for Noah. The service orchestration is great. The ideas are pretty solid. Juju even uses ZooKeeper under the hood.
Everyone knows that I preach the mantra of “services matter. hosts don’t”
The problem is that in an attempt to be the Nagios (unlimited flexibility) of configuration management, it can’t actually do enough in that area. Because it only concerns itself with services (and the configuration of them), it doesn’t do enough to manage the host. Just because the end state is “I’m serving a web page” doesn’t mean you should ignore the host its running on. Since Juju isn’t designed to deal with that (and actually LACKS any primitives to do it), you’re left with needing to manage a system in multiple places - once with your CM tool and then again with the charms.
Someone said it best when he described Juju as “apt for services”. It’s quite evident that the same broken mentality that apt takes to managing packages is applied to Juju as well. Charms have upgrade and downgrade steps. They’re just as complicated too. Not only is there no standard (since charms can be written in any language) it’s actually detrimental. The reason for a common DSL or language like the ones exposed by CM tools is not some academic mental masturbation. It’s repeatability and efficiency. I can go into a puppet shop and look at a module and know what it does. I can look at most chef recipes (outside of ones that might use a custom LWRP) and know what’s going on.
In the Juju world, a single charm could be written in one spot in Python and another spot in Bash. It pushes too much responsibility to the end user NOT to mess something up. I dare say that idempotence doesn’t even exist in Juju.
Again, I’m going to do some more playing around with Juju. I think it can meet a critical need for folks but I think they need to revisit what problem they’re trying to solve. I appreciate the work they’ve done and I’m totally excited that orchestration is getting the proper attention. The presenters were fantastic.
I attended a really good talk about the history of Openstack and where it’s going. It was great. As someone who is working with openstack professionally now (and had just dealt with some of its warts not 3 days before hand), I found it very valuable. Also congrats to the speaker, Jesse Andrews on the birth of his first child!
I managed to make it to Brendan Gregg’s talk as well. If you ever have the opportunity to hear him speak, you should take it. While I’m not a SmartOS user, the talk was really not about that. I walked out with some amazing insight on how smart people troubleshoot performance problems. Very well done.
Of course the real value in any conference is the hallway track. The chance to interact with your peers. I met so many smart people (some twice because I suck at remembering faces at first - sorry!). Chatting with folks like C. Flores, Jason Cook, Sean O’Meara, Chris Webber, Dave Rawks, Matt Ray, Matt Silvey and so many others that I can’t keep straight in my head. Everyone was awesome and I hope that you were able to get as much out of me as I got out of you.
Thanks again to Ilan for the invitation and for running such an amazing conference.
Also, little known made-up fact: Lusis is Tagalog for “He who eats with both hands”…..
The holidays are a busy time for me. I was hoping to get this written before the end of the year but it didn’t happen.
I can say, wihtout a doubt, that 2011 has been the most awesome year both professionally and personally in my life. And I have pretty much everyone else to thank for it.
There are so many folks to thank for this year. I owe so many beers that I can’t keep count. I can’t possibly thank everyone but I want to throw a few special shoutouts to folks.
Why she puts up with my shit, I’ll never know. Needless to say, without her this year would have been radically different. She managed two toddlers by herself on almost every trip I took. She’s been nothing but encouraging and she also helps keep me grounded by reminding me what’s important.
Thanks for giving me the opportunity to help with the DevOps Days events. Through the events I’ve met some of the most amazing people in the world. The DevOps community is a wonderful group of folks and I would never have met half of them if Patrick hadn’t given me the opportunity to participate.
While I’m sad to be leaving friends behind, VA was amazing in letting me travel so much. Not only that but they trusted and valued my opinion on so many things. Whoever takes my place will be lucky to work with such an awesome group of folks.
Not only for being a good friend but for giving me an opportunity to work with him at enStratus.
Puppet Labs gets double the thanks - for giving me the opportunity to talk about my project at PuppetConf and also for sponsoring me to travel to Goteborg and speak. The whole crew over there is amazing.
I’m grateful to DTO for giving me the opportunity to attend Velocity and letting me be a booth babe. Damon and Alex both have been forces of awesome for the DevOps community.
John asked me early on to help with the Atlanta DevOps meetups and I’m glad he did. He stands alone in the corporate bullshit world of the financial services industry. He tought me a lot and I want to thank him for it.
For being pretty much awesome by listening to my ranting, letting me bounce ideas off her. And for being my sister from another mother.
For the various lunches, talks, introductions and meetup involvement. Local folks rock. Seth rocks.
For being awesome, down to earth and not an asshole. And for all the code. And for giving me the honor of contributing to SysAdvent.
For helping me navigate my foray into the world of Python (technically that was a few years ago). Also for showing folks how to just get shit done.
I can’t possible fit everyone here’s an abbreviated list of folks, in no specific order, who have impacted me this year off the top of my head. If I leave you off, please don’t take offense. I’m shooting from the cuff here.
Bradley Taylor, Will Farrington, Corey Haines, Tim Dysinger, Joe Miller, Mathias Meyer, Vladimir Vuksan, Adam Jacob, Sean Porter, Tony Arcieri, R.I. Pienaar, Adam Fletcher, Anthony Goddard, Joe Williams, Brad Anderson, Cat Muecke (alas, Cat does not tweet!), Harlan Barnes, Wesley Beary, Mitchell Hashimoto, Wayne Seguin, Dan DeLeo, Josh Timberman, Noah Kantrowitz, Andrew Clay Schafer, Mark Imbriaco, Stephen Nelson-Smith, Gareth Rushgrove, Ian Meyer, Devdas Bhagat, Martin Jackson, Michael Leinartas, Kris Buytaert, Brandon Burton, Al Tobey, Matthew Jones, Julian Simpson, Jason Cook, Jos Boumans, Susan Potter, Thom May, Kit Plummer, Sascha Bates, Bob Martin, Bryan Horstmann-Allen, Benjamin W. Smith, Ches Martin, Jason Dixon, Phil Hollenback, Nate St. Germain, Scott Smith, Sean Cribbs, Andy Gross, Ben Rockwood, James Casey, Les Hazlewood, Allan Ditzel, Marius Ducea, Noah Campbell, Tim Anglade, Corey Donohoe, Matt Simmons, Ernest Mueller, Lindsay Holmwood, Christian Paredes, Brice Figureau, Grig Gheorghiu, Darrin Eden, Shay Banon, Ramon Van Alteren and so many others.
I also wanted to give a shoutout to a few projects that pretty much changed how I thought about the software world around me.
ElasticSearch has beeen, bar none, in my top two amazing things the past year. Having first heard about it via Logstash, when I started digging in it blew my mind. The one thing that amazed me most about ES was the Zen discovery. It’s like the first time you heard about consistent hashing. It’s one of those things that makes you say “how the fuck did I not think of this first?”. The other thing that I find awesome is that ES not only makes scaling up painless but scaling DOWN (which is the hard part) is just as easy. As a sysadmin, ElasticSearch has been the most pleasant bit of infrastructure I’ve ever had the pleasure of standing up.
The other thing that amazed me this year was 0mq. 0mq essentially makes the difficult and next to impossible things possible. I am not lying when I say that every project I have floating around in my head is either built around or has a perfect spot for 0mq. Along with ElasticSearch, it has fundamentally changed how I think about software, infrastructure and more.
While I’m not a fan of ZooKeeper on several levels, It would be wrong to totally ignore it. For the longest time, ZK stood alone in what it provided. People are building amazing things with it and it inspired me to write Noah.
At first I was pretty dismissive of Logstash. Mainly because I didn’t have a real need. Then I started digging in and realized that Logstash is only tangentially about logs. Logstash is kind of what you always wanted a pipe to be. Arbitrary input, arbitrary filtering, arbitrary output. The use cases for logstash are so much greater when you stop thinking about logs and start thinking about moving data.
While my Erlang only extends to passable reading, via Riak, I found a desire to learn more about it. The biggest thing that stuck in my head and also changed the way I think is the Actor model. For the first time that I can remember, a concept made perfect sense to me. While learning Erlang in earnest is a goal for 2012, I think about how simple and understandable the Actor model was.
Following up on the Actor model, I have mad respect for Tony Arcieri. If you look back at his projects, they all follow a similar theme: improving the concurrency story on Ruby. He’s tenacious and passionate about something that most people would have (and if they’re arrogant dickfaces) laughed at by now. Celluloid brings some amazing functionality to Ruby inspired by Erlang and OTP. I find myself defaulting to it whenever I need to even think about concurrency in Ruby. Even outside of that, it encourages good behaviour with threads and reduces the chances you’ll fuck something up. The companion project, DCell, is something I’m itching to work with as well.
If this past year was about anything, it was about metrics. Lots and lots of metrics. Etsy pushed out statsd and brought metrics collection to the masses. Coda Hale gave an amazing talk on metrics and released the code to back it up. Shooting in the dark sucks. You need numbers. Collect ALL the metrics.
The world of open source and the community around devops is amazing. I learned from and met so many people in 2011. I’m hoping that 2012 is the year that I can give back to them in some small way. Thanks to everyone for making this past year amazing.
Last Friday was a pretty crappy day.
I’m a fairly active Twitter user.
Patrick has joked that it’s as if I have Twitter wired directly to my brain. It’s not far from the truth.
I like to engage people and normally Twitter is great medium for engaging folks. Unfortunately, the message size limit makes Twitter an imperfect medium for involved discussions.
I know better but sometimes I forget.
Anyway, last friday I realized near the end of the day that I had pretty much gone off the rails. If I wasn’t bitching about Maven and Java, I was involved in random discussions about the SaltStack project. Combine that with normal inane bullshit and I somehow managed to pull off a 60+ tweets. It took a comment by roidrage on IRC to point out that I really needed to calm down.
With that, I declared communication blackout for the weekend. I decided to go to happy hour and spend the weekend just having fun with the family. It was awesome. So sorry for the sheer number of people I managed to piss off on Friday.
One of the things I also decided to do not stress about making time to hack. I knew that if I got working on one of my projects, I would totally stay distracted thinking about it.
So I went trolling. On Github.
I was just poking around Github, when I saw in my feed that some commits were done to the user’s guide for ZeroMQ. Because I have a serious geek woody for ZeroMQ, I got wrapped up reading the guide and looking at some of the more advanced examples. I’ve got some ideas I want to implement in Ark and Noah that involved 0mq so I figured it would be time well spent.
Now if anyone has bothered to read the zguide, you’ll know that one of the BEST parts is the code samples. Seriously. They have examples for all of the architectures in almost every language. I don’t know a single goddamn person who knows Haxe, but there are examples in the guide for Haxe. You can see an example of what I’m talking about here.
Notice at the bottom the list of examples for languages. If you mouse over the last entry, many times you’ll get multiples highlighted. This means that chunk of highlighted languages doesn’t have any examples written.
I noticed that quite a few of the advanced ones didn’t have Ruby versions. I started back at the beginning of the guide until I found the first one that didn’t have a Ruby example - the interrupt example.
So here I am - resolved not to work on any of my own projects and knowing that I didn’t have time to get involved with something TOO heavy. I decided to fork the guide and start adding missing Ruby examples.
Now I only got two example done the entire weekend. This mainly revolved around how limited my time was but also around getting REALLY comfortable with ffi-rzmq. I wanted to make sure that the examples I wrote had the write mix of idiomatic Ruby and yet explicit enough for someone who didn’t know the specifics of ffi-rzmq.
One that I really struggled with was this one:
https://github.com/imatix/zguide/commit/4c231d1023819152813fad09a45458bd33cb02a9

If you get familiar with the zguide, you’ll see a lot of references to zhelpers. It’s really just a bunch of boilerplate code that helps keep the actual examples to a nice consumable chunk size. There was not a zhelpers for the Ruby examples. I looked at the others to get an idea of what kinds of things were in there. In relation to the identity examples, there was a dump helper that just dumped the contents of a message. If you look at the Python and C examples for dump, you’ll see how they pull the identity of the message out. An interesting comparision, is how the Scala version of dump works.
Instead of focusing on duplicating the strategy employed by the C and Python versions, I went with something that fit how ffi-rzmq works a bit more. I realized that the point was not the content of the helpers so much as the end result, showing that 0mq would generate an identity for a message if one wasn’t explcitly provided.
I’m quite sure that at some point, ZMQ::Message objects will get an attribute accessor to simply return the identity. Right now the code base is under a bit of a refactor.
I really want to encourage others to do something like this. No pressure. Just troll Github. Look at some projects that are interesting. Look at the open issues. Fork, fix a bug or two and make some pull requests. After that, go on your merry way. No obligations. At worst, you’ve spent some time sharpening your skills. At best, however, you’ve made a lasting contribution.
And shit, it doesn’t even have to be a code contribution. If you can grok the project well enough, add some wiki pages.
I dunno. Github just has this amazingly easy flow for contribution. Do unto others and all that.
This is part 2 in a post on deployment strategies. The previous post is located here
My previous post covered some of the annoying excuses and complaints that people like to use when discussing deployments. The big take away should have been the following:
I want to make one thing perfectly clear. I’ve said this several times before. You can get 90% of the way to a fully automated environment, never go that last 10% and still be better off than you were before. I understand that people have regulations, requirements and other things that prevent a fully automated system. You don’t ever have to flip that switch but you should strive to get as close as possible.
Operations is an interesting word. Outside of the field of IT it means something completely different than everywhere else in the business world. According to Wikipedia:
IT operations traditionally does nothing in that regard. Instead IT operations has become about cock blocking and being greybeareded gatekeepers who always say “No” regardless of the question. We shunt the responsibility off to the development staff and then, in some sick game of ‘fuck you’, we do all we can to prevent the code from going live. This is unsustainable; counter-productive; and in a random twist of fate, self destructive.
One thing I’ve always tried to get my operations and sysadmin peers to understand is that we are fundamentally a cost center. Unless we are in the business of managing systems for profit, we provide no direct benefit to the company. This is one of the reasons I’m so gung-ho on automation. John Willis really resonated with me in the first Devops Cafe podcast when he talked about the 80/20 split. Traditionally operations staff spends 80% of its time dealing with bullshit fire-fighting muck and 20% actually providing value to the business. The idea that we can flip that and become contributing members of our respective companies is amazing.
Don’t worry. I’ll address development down below but I felt it was important to set my perspective down before going any further.
Glancing back to my list of take-aways from the last post, I make a pretty bold (to some people) statement. When I say that deploy risk is not the deploy itself but everything up to that point, I’m talking about technical debt.
Technical debt takes many forms and is the result of both concious, deliberate choices as well as unintended side-effects. Some examples of that are:
All of these things can lead to technical debt - the accumulation of dead bodies in the room as a byproduct of how we work. At best, someone at least acknowledges they exist. At worst, we stock up on clothespins, pinch our nostrils shut and hope no one notices the stench. Let’s address a couple of foundational things before we get into the fun stuff.
Test coverage is one of the easiest ways to manage risk in software development. One of the first things to go in a pinch is testing. Even that assumes that testing was actually a priority at some point. I’m not going to harp on things like 100% code coverage. As I said previously, humans tend to overcompensate. Test coverage is also, however, one of the easiest places to get your head above water. If you don’t have a culture of committment to testing, it’s hard but not impossible to get started. You don’t have to shutdown development for a week.
The key here is baby steps. Small victories. Think Fezzik in ‘The Princess Bride’ - “I want you to feel like you’re winning”.
Testing is one of the foundations you have to have to reach deploy nirvana. System administrators have a big responsiblity here. Running tests has to be painless, unobstrusive and performant. You should absolutely stand up something like Jenkins that actually runs your test suite on check-in. As that test suite grows, you’ll need to be able to provide the capacity to grow with it. That’s where the next point can be so important.
Just as testing is a foundation on the code side, operations has a commensurate responsibility to reduce the number of human hands involved with creating systems. We humans, despite the amazing potential that our brains provide, are generally stupid. We make mistakes. Repeatability is not something we’re good at. Some sort of automated and repeatable configuration management strategy needs to be adopted. As with testing, you can make some amazing progress in baby steps by introducing some sort of proper configuration management going forward. I don’t recommend you attempt to retrofit complex automation on top of existing systems beyond some basics. Otherwise you’ll be spending too much time trying to differentiate between “legacy” and “new” servers roles. If you are using some sort of virtualization or cloud provider like EC2, this is a no brainer. It’s obviously a bit harder when you’re using physical hardware but still doable.
Have you ever played the little travel puzzle game where you have a grid of moving squares? The idea is the same. You need just ONE empty system that you can work with to automate. Pick your simplest server role such as an apache webserver. Using something like Puppet or Chef, write the ‘code’ that will create that role. Don’t get bogged down in the fancy stuff the tools provide. Keep it simple at first. Once you think you’ve got it all worked out, blow the server away and apply that code from bootstrap. Red, green, refactor. Once you’re comfortable that you can reprovision that server from bare metal, move it into service. Make sure you have your own set of ‘test cases’ that ensure the provisioned state is the correct one. This will become important later on.
Take whatever server it’s replacing and do the same for the next role. When I came on board with my company I spent many useless cycles trying to retrofit an automation process on top of existing systems. In the end, I opted to take a few small victories (using Chef in this case):
Using this strategy, I was able to replace all of our legacy instances for the first and second tiers of our stack in a couple of months time. We are now at the point where, assuming Amazon plays nice with instance creation, we can have any role in those tiers recreated at a moment’s notice. Again, this will directly contribute to how we mitigate risk later on.
I came up with this from first principles so I’m sure there’s a better name for it. The idea is simply this:
System Administrators often pride ourselves on how cleverly and quickly we can solve a problem. It’s good for our egos. It’s not, however, good for our company. Take a little extra time and consider the longer term impact of what solution you’re about to do. Step away from the desk and move. Consult peers. Many times I’ve come to the conclusion that my first instinct was the right one. However more often than not, I’ve come across another solution that would create less technical debt for us to deal with later.
A correlary to this is the decision to ‘fix it or kick it’. That is ‘Do we spend an unpredictable amount of time trying to solve some obscure issue or do we simply recreate the instance providing the service from our above configuration management’. If you’ve gone through the previous step, you have should have amazing code confidence in your infrastructure. This is very important to have with Amazon EC2 where you can have an instance perform worse overtime thanks to the wonders of oversubscription and noisy neighbors.
Fuck that. Provision a new instance and run your smoke tests (I/O test for instance). If the smoke tests fail, throw it away and start a new one. It’s amazing the freedom of movement afforded by being able to describe your infrastructure as code.
I would say that without the above, most of the stuff from here on out is pretty pointless. While you CAN do automated and non-offhour deploys without the above, you’re really setting yourself up for failure. Whether it’s a system change or new code, you need to be able to ensure that that some baseline criteria can be met. Now that we’ve got the foundation though, we can build on it and finally adopt some distinct strategies for releases.
The next areas you need to work on are a bit harder.
Shooting in the dark sucks. Without some sort of baseline metric, you authoritatively say whether or not a deploy was ‘good’. If it moves, graph it. If it moves, monitor it. You need to leverage systems like statsd (available in non-node.js flavors as well) that can accept metrics easily from your application and make them availabile in the amazing graphite.
The key here is that getting those metrics be as frictionless as possible. To fully understand this, watch this presentation from Coda Hale of Yammer. Coda has also created a kick-ass metrics library for the JVM and others have duplicated his efforts in their respective languages.
You need to adopt a culture of backwards compatibility between releases. This is not Microsoft levels we’re talking about. This affects interim releases. As soon as you have upgraded all the components, you clean up the cruft and move on. This is critical to getting to zero/near-zero downtime deploys.
I won’t go into the whole SOA buzzword bingo game here except to say that treating your internal systems like a third party vendor can have some benefits. You don’t need to isolate the teams but you need to stop with shit like RMI. Have an established and versioned interface between your components. If component A needs to make a REST call to component B, upgrades to the B API should be versioned. A needs version 1 of B’s api. Meanwhile new component C can use version 2 of the API.
While this ties a lot into the testing and configuration management topics, the real goal here is that you adopt a posture of automation by default. The reason for this should be clear in Eric Ries’ “Five Whys” post:
One of the best ways to eliminate human problems is to take the human out of the problem. Machines are very good at doing things repeatedly and doing them the same way every single time. Humans are not good at this. Let the machines do it.
Here are some of the key strategies that I (and others) have found effective for making deploys a non issue.
The idea here is that for any new code path you insert in the system, you actually exercise it before it goes live. Let’s face it, you can never REALLY simulate production traffic. The only way to truly test if code is performant or not is to get it out there. With a dark launch, you’re still making new database calls but using your handy dandy metrics culture above, you now know how performant it really is. When it gets to acceptable levels, make it visible to the user.
Feature flags are amazing and one of the neat tricks that people who perform frequent deploys leverage. The idea is that you make aspects of your application into a series of toggles. In the event that some feature is causing issues, you can simply disable it through some admin panel or API call. Not only does this let you degrade gracefully but it also provides for a way to A/B test new features. With a bit more thought put into the process, you can enable a new feature for a subset of users. People love to feel special. Being a part of something like a “beta” channel is an awesome way to build advocates of your system.
This is one that I really like. The idea is simply that your application has a basic set of ‘tests’ it runs through at startup. If any of those tests fail, the code is rolled back.
Now this is where someone will call me a hypocrite because I said you should and can never really roll back. You’re partially right. In my mind, however, it’s not the same thing. I consider code deployed once it’s taken production traffic. Up until that point, it’s just ‘pre-work’ essentially. Let’s take a random API service in our stack. I’m assuming you have two API servers in this case.
Now you might see a bit of gotcha there. I intentionally left out a step. This is a bit different than how shops like Wealthfront do it. They actually DO roll back if production monitoring fails. My preference is to use something similar to em-proxy to do a sort of mini-dark launch before actually turning it over to end-users. You don’t have to actually use em-proxy. You could write your own or use something like RabbitMQ or other messaging system. This doesn’t always work depending on the service the component is providing but it does provide another level of ‘comfort’.
Of course this only works if you maintain backwards compatibility.
This is probably the hardest of all to accomplish. You may be limited by your technology stack or even some poor decision made years ago. Backwards compatibility also applies to more than just your software stack. This is pretty much a critical component of managing database changes with zero downtime.
Your code needs to understand ‘versions’ of what it needs. If you leverage some internal API, you need to maintain support for an older version of that API until all users are upgrade. Always be deprecating and NEVER EVER redefine what something means. Don’t change a property or setting that means “This is my database server hostname” to “This is my mail server hostname”. Instead create a new property, start using it and remove the old on in a future release. Don’t laugh, I’ve seen this done. As much as I have frustrations with Java, constructor overloading is a good example of backwards compatibility.
Specifically as it relates to databases, consider some of the following approaches:
Some of these techniques would make Codd spin in his grave.
We’re undergoing a similar situation right now. We originally stored a large amount of ‘blob’ data in Voldemort. This was a bit perplexing as we were already leveraging S3 for similar data. To migrate that data (several hundred gigs) we took the following approach:
This worked really well in this scenario. These aren’t new techniques either. Essentially, we’re doing a variation of a two-phase commit.
Now you might think that all this backwards compatibility creates cruft. It does. Again, this is something that requires a cultural shift. When things are no longer needed, you need to clean up the code. This prevents bloat and makes understanding it down the road so much easier.
Here’s another real world example:
Our code base originally used a home-rolled load balancing technique to communicate with one of our internal services. Additionally, all communication happened over RPC using Hessian. Eventually this became untenable and we decided to move to RabbitMQ and JSON. This was a pretty major change but at face value, we should have been able to manage with dual interfaces on the provider of the service. That didn’t happen.
You see, to be able to use the RabbitMQ libraries, we had to upgrade our version of Spring. Again, not a big deal. However our version of Hessian was so old that the version of Hessian we would have to use with the new version of Spring was backwards incompatible. This is yak shaving at its finest, folks. So basically we had to upgrade 5 different components all at once just to get to where we wanted and NEEDED to be for the long term.
Since I had already finished coding our chef cookbooks, we went down the path of duplicating our entire front-end stack. What made this even remotely possible was the fact that we were using configuration management in the first place. Here’s how it went down:
Once we were sure that things looked good, we swung all the traffic to the new instances and pulled the old ones out. We never even bothered to upgrade the old instances. We just shut them down.
Obviously this technique doesn’t work for everyone. If you’re using physical hardware, it’s much more costly and harder to pull off. Even internally, however, you can leverage virtualization to make these kinds of things possible.
What should be the real story in this is that bitrot happens. Don’t slack on keeping third-party libraries current. If a third-party library introduces a breaking change and it affects more than one part of your stack, you probably have a bit too tight of a coupling between resources.
This post came out longer than I had planned. I hope it’s provided you with some information and things to consider. Companies of all shapes, markets and sizes are doing continuous deployment, zero downtime deploys and all sorts of things that we never considered possible. Look at companies like Wealthfront, IMVU, Flickr and Etsy. Google around for phrases like ‘continuous deployment’ and ‘continuous delivery’.
I’m also painfully aware that even with these tricks, some folks simply cannot do them. There are many segments of industry that might not even allow for this. That doesn’t mean that some of these ideas can’t be implemented on a smaller scale.
I came across an interesting post today via HN. I’m surprised (only moderately) that I missed it the first time around since this is right up my alley:
Why are you still deploying overnight?
I thought this post was particularly apropos for several reasons. I just got back from DevOpsDays EU AND I’m currently in the process of refactoring our deploy process.
I’m breaking this up into two parts since it’s a big topic. The first one will cover the more “theoretical” aspects of the issue while the second will provide more concrete information.
Before I go any further, we should probably clear up a few things.
Understand, first and foremost, that I’m no spring chicken in this business. I’ve worked in what we now call web operations and I’ve worked in traditional financial environments (multiple places). If it CAN go wrong, it has gone wrong for me. Shit, I’ve been the guy who dictated that we had to deploy after hours.
Also, this is not a “tell you what to do” post.
So what are some of the myths and other crap people like to pull out when having these discussions?
There’s plenty more but these are some of the key ones that I hear.
There is nothing inherent in change that makes it risky, dangerous or anything more than change. Change is neither good or bad. It’s just change.
The idea that change has a risk associated with it is entirely a human construct. We have this false assumption that if we don’t change something then nothing can go wrong.
At first blush that would make sense, right? If it ain’t broke, don’t fix it.
Why do we think this? It’s mainly because we’re captives to our own fears. We changed something once, somewhere, and everything went tango uniform. The first reaction after a bad experience is never to do whatever caused that bad experience again. This makes sense in quite a few cases. Touch fire, get burned. Don’t touch fire, don’t get burned!
However this pain response tends to bleed over into areas. We deployed code one time that took the site down. We changed something and bad things happened. Engage overcompensation - We should never change anything.
As with change, a deploy (a change in and of itself) is not inherently risky. Is there a risk associated with a deploy? Yes but understand that the risk associated with pushing out new code is the culmination of everything you’ve done up to that point.
I can’t even begin to count the number of ways that a deploy or release has gone wrong for me. Configuration settings were missed. Code didn’t run properly. The wrong code was deployed. You name it, I’ve probably seen it.
The correct response to this is NOT to stop doing deploys, do them off-hours or do them less often. Again with the overcompensation.
The correct way to handle deployment problems is to do MORE deploys. Practice. Paraphrasing myself here from an HN comment:
“Release early, release often” isn’t just about time to market. The way to reduce risk is not to add more risky behavior (introducing more vectors for shit to go wrong). The way to reduce the risk associated with deploys is to break them into smaller chunks.
You need to stop thinking like Subversion and start thinking like Git.
One of the reasons people don’t feel comfortable performing deploys during the day is because deploys are such a big deal. You’ve got to make deploys a non-issue.
Yes, it’s true. You can never roll back. You can’t go back in time. You can fake it but understand that it’s typically more risky to rollback than rolling forward. Always be rolling forward.
The difficulty in rolling forward is that it requires a shift in how you think. You need to create a culture and environment that enables, encourages and allows for small and frequent changes.
It amazes me that in this day and age people seem to think you can prevent failure. Not only can you not prevent it, you should embrace it. Learn to accept that failure will happen.  Often spending your effort decreasing MTTR (mean time to recovery) as opposed to increasing MTBF (mean time between failures) is a much better investment. Failure is not a question of ‘if’ but a question of ‘when’.
Systems should be designed to be tolerant of failure. This is not easy, it’s not always cheap and it can be quite painful at first. Failure sucks. Especially as systems administrators, we tend to personalize a failure in our systems as a personal failure.
The best way to deal with failure is to make failure a non-issue. If it’s going to happen and you can’t prevent it, why stress over trying to prevent it? This absolutely doesn’t mean that you should do some level of due dilligence. I’m not saying that you should give up. What I’m saying is that you should design a robust system that handles failures gracefully and returns you to service as quickly as possible. It’s called fault TOLERANCE for a reason.
SLAs are in general fairly silly things. Before you get all twisted and ranty, let me clarify. SLAs have value but the majority of that value is to the provider of the SLA and not the person on the other end. SLAs are a lot like backup policies.
Look at it this way. I’m giving you an SLA for four nines of availability. That allows me to take around 50 minutes of downtime a year. Of course you assume that means 50 minutes spread over a year. What you fail to realize is that I can take all 50 minutes at once and still meet my SLA. Taking 50 minutes at one time is much more impacting than taking ten 5-minute outages. What’s worse is I can take that downtime not only in one chunk but I can take it at the worst possible time for you.
The other side of SLAs is that we tend to equate them with servers as opposed to services. The SLA is a Service Level Agreement. Not a Server Level Agreement. Services are what matters, not servers.
When you start to equate an SLA with a specific server, you’ve already lost.
As I said, this topic is too big to fit in one post. The next post will go into specifics about strategies and techniques that will hopefully give you ideas on how to make deploys less painful.
wherein John admits he was wrong about something
As I was checking my Github feed tonight (as I’ve been known to do on occassion), I saw an update for a project that I was watching. This project is, for all intents and purposes, a redo of Capistrano with some additional system management stuff on top. From the description:
Now I’ve said before I’m a tool junkie. I’m always looking for ideas and inspiration from other tools. I also love to contribute where I can.
What bothered me particularly about this project is that it felt like a “solved problem”.
So at DevOps Days Mt. View this year, I made a statement. I said with quite a bit of firmness that I thought configuration management was a solved problem. I didn’t get a chance to clarify what I meant by that. At least not before Andrew Clay Shafer strongly disagreed with me. Before I go any further, I want to clarify what I meant by that.
I, personally, feel like there comes a point where a class of tool reaches a certain level that makes it “good enough”. So what is good enough?
By “good enough”, I mean that it solves the first in a broader series of problems. By no means am I implying that we should no longer pursue improvement. But what I am suggesting is that at a certain point, tools are refining the first stage of what they do.
When we get to this point in a class of tool (let’s stick with CM), we start to see gaps in what it can do. At this point, you get a rush of tools that attempt to fill that gap. What we essentially do is try and figure out if the gap should be filled by the tool or does it make sense to exist apart. So taking the discussion I was involved in at the time - orchestration, what I was attempting to say (epic fail, I might add) is that the current crop of configuration management tools have reached a usable point where they do enough (for now). What we’re seeing as questions now are “How do I think beyond the single node where this tool is running?”. What we might find is that functionality DOES belong in our CM tool. We might also find that, no, we need this to exist apart from it for whatever reasons. Basically I was attempting to say “Hey, CM is in a pretty good state right now. Let’s tackle these OTHER problems and regroup later”.
So where was I wrong?
I made the following comment on Twitter earlier:
What I find most interesting about these various “clones” is that they’re all created by developers. People apparently pine for the days of Capistrano. Come to think of it though, who blames them?
As I look at the current crop of configuration management tools, and follow various tweets and blog posts I realize that people either aren’t aware of tools like puppet and chef or, in the worst cases, they feel that they’re too much hassle/too complicated to deal with. What we’re seeing is the developer community starting to come to the same realizations that the sysadmin community came to a while ago. What’s also interesting is that the sysadmin community is coming to the same realizations that developers came to a while ago.
It’s like some crazy romantic movie where the two lovebirds, destined to be together in the end have the pivotal mix-up scene. He leaves the bar to stop her from getting on the airplane. Meanwhile she heads to the bar upon realizing that she can’t get on the plane without him.
People are going to great lengths, either out of ignorance* about available tools or from frustration about the complexities involved.
I think the divide is in the message. While I still stand behind the statement that the “dev” vs “ops” ratios are regionally specific, I’m starting to agree that the current crop of tools ARE very operationally focused. That’s not a bad thing either. Remember that the tools were created by people who were primarily by sysadmins.
When you look at the tools created by people who were primarily developers, what do you see?
What’s interesting about all of these tools is that they’re designed to get the code out there as easily as possible or to stand up a stack as quickly as possible. What’s frustrating for me, as primariy a sysadmin, is that I see the pain points that will come down the road. These tools don’t really scale. Yes, sometimes you need “ssh in a for loop” however inherting these types of environments can be painful. Concepts like idemopotence and repeatability don’t exist. They generally don’t take into account the non-functional requirements. They certainly don’t handle multiple operating environments or distributions very well.
What’s really sad is that the end goal is the same. We just want to automate away the annoying parts of our jobs so we can get on to more important shit.
I figured I’d get that out of the way now. It’s very easy to dismiss these concerns as some pissy sysadmin but I don’t think that’s entirely fair. Remember what I said earlier. Sysadmins are starting to come to realizations that developers had a long time ago. The same exists for developers. Both sides, regardless of primary role, still have much to learn from each other.
I’m going to share a fairly generic dirty little secret. Developers don’t want to write puppet manifests/modules. They don’t want to write chef cookbooks/recipes. In most every situation I’ve been in, there has been little interest in those tools from outside the sysadmin community. That’s changing. I think as people are getting introduced to the power they have, they come around. But there’s still a gap. Is the gap around deployment? Partially. I think the gap also exists around configuration. Obviously I’m biased in that statement.
A bit of a personal story. At my previous company, we were a puppet shop. We tried to get developers to contribute to the modules. It didn’t work. It just didn’t make sense. It’s not that they were stupid. It’s that it was an extra step. “Oh you mean I have to put that variable over here instead of in my configuration file? That’s annoying because I have to be able to test locally”. What ended up happening was that one of the guys on the operations side learned just enough Java to write lookup classes himself. Instead of us populating hosts using ERB templates, we were now querying Cobbler for classes using XML-RPC. There were some other factors at play, mind you. It was a really large company with developers who came from the silo’d worldview. There was also quite a bit of ass-covering attitude running around.
This is why I’m so bullish on bridge tools like Noah and even Vagrant. We’re all attempting to do the same thing. Bridge that last little bit between the two groups. Find a common ground. Noah is attempting to bridge that by allowing the information to be “shared” between teams. ZooKeeper let’s the developers manage it all themselves (just push this app out, we’ll find each other). Vagrant takes the route of bringing the world of production down to the developer desktop.
But none of these tools address the deploy issue. Do we want to use the Opscode deploy cookbook? We can but it’s fairly opinionated**. Maybe we decide to use FPM to generate native system packages and roll those out with a Puppet run? Putting on my fairly small developer hat, none of these sounds really appealing to me. Maybe as the java developer, I just want to use JRebel. That’s nice but what about the configuration elements? Do we now write code to ask Puppet or Chef for a list of nodes with a given class or role?
Look at what Netflix does (not that I approve really). They roll entire fucking AMIs for releases. While the sysadmin in me is choking back the bile at the inflexibility of that, stepping into another perspective says “It works and I don’t have to deal with another server just to manage my systems”.
That much is obvious. What I can say is that I see a need. I’m addressing it the way I think is best but I still see gaps. Shared configuration is still complicated. Deploy is still complicated. While I would generally agree that things like rolling back are the wrong approach, I also realize that not everyone is at the point where they can roll-forward through a bad deploy. Hell, we do all of our deploys with Jenkins and some really ugly bash scripts and knife scripts.
I’d love any commentary folks might have. I’ll leave you with a few comments from other’s on twitter when I made my original comment:
Many, many years ago I started blogging. It’s fun and I like to feel self-important by dumping my ideas. I enjoy writing so blogging is cool like that.
Over the past 12 years I’ve gone through various tools to help me do that (in no particular order):
With the exception of one, all of these tools were simply a pain in the ass. They required lots of moving pieces, we’re bug ridden and security nightmares.
The one tool I enjoyed the most?
rst2html in Vim
The only reason I used those tools was because I hated writing HTML. I hated dealing with styling. About 3 years ago I finally settled on using Blogger. Now I’m changing again.
While I was perfectly happy with Blogger, one thing that kept annoying me was that writing posts became tedious. Working inside a textarea widget was still painful. I used Scribefire for a while in Firefox. For the last 4 months or so, I’ve been writing my blog posts in Markdown, manually converting them to HTML with pandoc and then pasting them into blogger.
I tried the google CLI tools but I still had to massage the generated output so I never bothered to automate any of the posting part. Additionally, as much more of posts became technical, I found myself jumping over to gists and pasting the embedded content link into the posts. The whole workflow sucked.
The other day I came across Octopress. The default style was attractive. It handled code VERY well. Best of all, I could work in Vim, run a few rake commands and my content would be published to Github.
WIN!
I find this workflow MUCH easier and sane. It’s very coder friendly.
What’s also nice is that, should github go away (god forbid), I have everything here self-contained to run on my own server.
I’m currently in the process of redoing what blogger posts I have that weren’t already in Markdown. I’m converting the more “popular” posts first and then I’ll get the remainder. It’s a little painful but the light at the end of the tunnel is that I only have to do this once.
warning! This is a really long post
In the course of rewriting the Noah callback daemon, I started to get really frustrated with EventMachine. This is nothing against EventMachine by any stretch of the imagination. I really like it.
What I was having issues with is making the plugin framework as dirt simple as possible. By using EM, I had no choice but to require folks to understand how EM works. This primarily meant not blocking the reactor. Additionally, through no fault of EM, I was starting to get mired in callback spaghetti.
I’ve mentioned several times before that I love the actor model. It makes sense to me. The idea of mailboxes and message passing is really simple to understand. For a while, there was project that implemented actors on top of EM called Revactor but it stalled. I started following the author (Tony Arcieri) on GitHub to see if he would ever update it. He did not but I caught wind of his new project and it was pretty much exactly what I was looking for.
Actors have a proven track record in Erlang and the Akka framework for Scala and Java uses them as well.
Celluloid is an implementation of Actors on Ruby. At this point, it lacks some of the more advanced features of the Akka and Erlang implementations. However Tony is very bullish about Celluloid and is pretty awesome in general.
I’m not going to go over Celluloid basics in too much detail. Tony does an awesome job in the README for the project. What I want to talk more about is how I want to use it for Noah and what capabilities it has/is missing for that use case.
I won’t bore you with a rehash of Noah. I’ve written a ton of blog posts (and plan to write more). However for this discussion, it’s important to understand what Noah callbacks need to do.
Any object in Noah can be “watched”. This is directly inspired by ZooKeeper. Because Noah is stateless, however, watches need to work a little differently. The primary difference is that Noah’s watches are asynch. As a side-effect of that, we get some really cool additional functionality. So what does a Noah watch consist of?
Let’s say you had a small sinatra application running on all your servers. Its only job was to be a listener for messages from Noah. This daemon will be responsible for rewriting your hosts file with any hosts that are created, modified or deleted on your network.
In this case, you might register your watch with a path of /hosts/ and an endpoint of http://machinename:port/update_hosts. Any time a host object is created, updated or deleted Noah will send the JSON representation of that object state along with the operation performed to that endpoint. Let’s say you also want to know about some configuration setting that has changed which lives at /configurations/my_config_file.ini. Let’s put a kink in that. You want that watch to drop its message onto a RabbitMQ exchange.
So now we have the following information that we need to act on:
Not so hard right? But we also have some additional moving parts. Something needs to monitor Redis for these various CRUD messages. We need to compare them against a list of endpoints that want notification about those messages. We also need to intercept any messages from Redis that are new endpoints being registered. Oh and we also need to know about failed endpoints so we can track and eventually evict them. Obviously we don’t want to stop http messages from going out because AMQP is slow. Imagine if we implemented FTP endpoint support! Essentially we need high concurrency not only on each ‘class’ of endpoint (http, amqp, ftp whatever) but also within each class of endpoint. If any individual endpoint attempt crashes for any reason, we need to take some action (eviction for instance) and not impact anyone else.
So thinking about how we would do this with actors, I came up with the following basic actors:
As I said previously, we also need to ensure that if any worker crashes, that it gets replaced. Otherwise we would eventually lose all of our workers.
With this information, we can start to build a tree that looks something like this:
The master process is responsible for handling the Redis, Broker and Pool actors. Each pool actor is responsible for its workers. Not really visible in the ASCII above is how messages flow:
Where this became a slight problem with Celluloid is that it lacks two bits of functionality currently:
Right now in Celluloid, there is no way to build “pools” of supervised processes. The supervised part is important. If a process is supervised, crashes will be trapped and the process will be restarted.
So how did we “fake” this with the existing functionality?
The generic tree was fairly easy. The main Ruby process creates supervised processes for each actor:
The workers were a bit more complicated. What I ended up doing was something like this:
The problem as it stands is that we can’t really have “anonymous” supervised processes. Each actor that’s created goes into Celluloid’s registry. We need a programatic way to look those up so we use supervise\_as to give them a name.
This gives us our worker pool. Now Redis can shovel messages to the broker who filters them. He sends a unit of work to a Pool which then selects a random worker to do the REAL work. Should any actor crash, he will be restarted. Because each actor is isolated, A crash in talking to redis, doesn’t cause our existing workers to stop sending messages.
Obviously this a fairly naive implementation. We’re missing some really important functionality here.
You might wonder why we care if a worker is dead or not? Currently Celluloid buffers messages in each actor until the can be dealt with. In the case of our Pool, it will select a worker and buffer any messages if the worker is blocked. If our worker crashes on its current unit of work, it returns control to the pool. The pool then attempts to send the worker the next message but the worker is dead and hasn’t respawned yet.
Yes, we’ve finally made it to the end.
I’ve created a fun little sinatra application to make it easier for me to test my pools. It consists of a generic Pool class that can be subclassed and take a the name of a worker class as an argument. When a worker gets a message of “die”, it will raise an exception thus simulating a crash. Additionally, the “message processing” logic includes sleep to simulate long running work.
The reason Sinatra is in the mix is to provide an easy way for me to fire off simulated requests to the pool so I can experiment with different approaches. Eventually, Celluloid will have a proper Pool construct. I plan on using this as the basis for a pull request. You can see it here. Please feel free to fork and experiment with me. It’s really fun.
The following post is a recap of what was discussed in the 07/21/11 #monitoringsucks irc meeting
Before I get any further, I just want to thank everyone who attended,
either in virtual person or in spirit. There have been so many awesome
discussions going around this topic since we started. I am truly
priviledged to interact with each and every one of you. I struggle to
count myself a peer and I can only hope that I provide something in
return.
I mentioned to someone today that I’m literally sick of the current
landscape. I consider the current crop of monitoring solutions to be
technologically bankrupt. The situation is fairly untenable at this
point.
I just installed (after having a total loss of an existing Zenoss setup)
Nagios again. I’m not joking when I say that it depressed the everliving
hell out of me. The monitoring landscape simply has not kept up with
modern developments. At first it was mildly frustrating. Then it was
annoying. Now it’s actually a detriment.
Now that we have that out of the way….
Communication is important. Like Picard and Dathon, we’ve been stranded
on a planet with shitty monitoring tools and we’re unable to communicate
about the invisibile threat of suck because we aren’t even speaking the
same language. I say event, you hear trigger, I mean data point. So the
first order of business was to try and agree on a set of terms. It was
decided that we would consider these things primitives. Here they are:
Please read through this before jumping to any conclusions. I promise it
will all become clear (as mud).
a numeric or boolean data point
The data type of a metric was something of a sticking point. People were
getting hung up on data points being various things (a log message, a
“status”, a value). We needed something to describe the origin. The
single “thing” that triggered it all. That thing is a metric.
So why numeric OR boolean? It was pretty clear that many people
considered, and rightly so I would argue, that a state change is a
metric. A good example given by Christopher Webber is that of a BGP route going away.
Why is this a less valid data point than the amount of disk space in use
or the latency from one host to another? Frankly, it’s not.
But here’s where it gets fuzzy. What about a log message. Surely that’s a data point and thus a metric.
Yes and No. The presence of a log message is a data point. But it’s a boolean. The log message itself?
metadata about a metric
Now metadata itself is a loaded term but in this scope, the “human
readable” attributes are considered context. Going back to our log
example. The presence of the log message is a metric. The log message
itself is context. Here’s the thing. You want to know if there is an
error message in a log file. The type of error, the error message text?
That’s context for the metric to use in determining a course of action.
Plainly speaking, metrics are for machines. Context is for humans. This
leads us to….
metric combined with context
This is still up in the air but the general consensus was that this was
a passable definition. The biggest problem with a group of domain
experts is that they are frequently unable to accept semantic
approximation. Take the discussion of Erlang Spawned process:
The fact is that an Erlang spawned process has shades of a virtual
machine is irrelevant to the domain expert. We found similar discussions
around what we would call the combination of a metric and its context.
But where do events come from?
the source of a metric
Again, we could get into arguments around what a resource is. One thing
that was painfully obvious is that we’re all sick and tired of being
tied to the Host and Service model. It’s irrelevant. These constructs
are part “legacy” and part “presentation”.
Any modern monitoring thought needs to realize that metrics no longer
come from physical hosts or are service states. In the modern world,
we’re taking a holistic view of monitoring that includes not only bare
metal but business matters. The number of sales is a metric but it’s not
tied to a server. It’s tied to the business as a whole. The source of
your metrics is a resource. So now that we have this information - a
metric, its context and who generated it - what do we do? We take….
a response to a given metric
What response? It doesn’t MATTER. Remember that these are primitives.
The response is determined by components of your monitoring
infrastructure. Humans note the context. Graphite graphs it. Nagios
alerts on it. ESPER correlates it with other metrics. Don’t confuse
scope here. From this point on, whatever happens has is all decided on
by a given component. It’s all about perspective and aspects.
I’m sure through much of that, you were thinking “alerting! graphing!
correlation!”. Yes, that was pretty much what happened during the
meeting as well. Everyone has pretty much agreed (I think) at this point
that any new monitoring systems should be modular in nature. As Jason
Dixon put it - “Voltron”. No single
system that attempts to do everything will meet everyone’s needs.
However, with a common dictionary and open APIs you should be able to
build a system that DOES meet your needs. So what are those components?
Sadly this part is not as fleshed out. We simply ran out of time.
However we did come up with a few basics:
getting the metrics
It doesn’t matter if it’s push or pull. It doesn’t matter what the
transport is - async or point-to-point. Somehow, you have to get a
metric from a resource.
taking action
Extract the metric and resource from an event. Do something with it.
Maybe you send the metric to another component. Maybe you “present” it
or send it somewhere to be presented. Maybe you perform a change on a
resource (restarting a service). Essentially the decision engine.
While you might be thinking of graphing here, that’s a type of
presentation. You know what else is presentation? An email alert. Stick
with me. I know what’s going through your head. No..not that…the other
thing.
This is pretty much correlation. We didn’t get a REAL solid defintion
here but everyone was in agreement that some sort of analytics is a
distinct component.
As I said, we had to kind of cut “official” things short. There was
various discussion around Storage and Configuration. Storage I
personally can see as a distinct component but Configuration not so
much. Configuration is an aspect of a component but not a component
itself.
Remember when I said I know what you’re thinking? This is what I think
it was.
You can look at the above items and from different angles they look
similar. I mean sending an email feels more like event processing than
presentation. You’d probably be right. By that token, drawing a point on
a graph is technically processing an event. The fact is many components
have a bit of a genetic bond. Not so much parent/child or sibling but
more like cousins. In all honesty, if I were building an event
processing component, I’d probably handle sending the email right there.
Why send it to another component? That makes perfect sense. Graphing?
Yeah I’ll let graphite handle that but I can do service restarts and
send emails. Maybe you have an intelligent graphing component that can
do complex correlation inband. That makes sense too.
I’m quite sure that we’ll have someone who writes a kickass event
processor that happens to send email. I’m cool with that. I just don’t
want to be bound to ONLY being able to send emails because that’s all
your decision system supports.
Speaking personally, I really feel like today’s discussion was VERY
productive. I know that you might not agree with everything here. Things
are always up for debate. The only thing I ask is that at some point,
we’re all willing to say “I know that this definition isn’t EXACTLY how
I would describe something but it’s close enough to work”.
So what are the next steps? I think we’ve got enough information and
consensus here for people to start moving forward with some things. One
exercise, inspired by something Matt Ray said, that we agreed would be
REALLY productive is to take an existing application and map what it
does to our primitives and components. Matt plans on doing that with
Zenoss since that’s what he knows best.
Let me give an example:
Out of the box, Nagios supports Hosts and Services which map pretty
cleanly to resources. It is does not only collection but event
processing and presentation. It not only supports metrics but also
context (Host down is the boolean metric. “Response timeout” is the
context. Through something like pnp4nagios, it can support different
presentations. It has very basic set of Analytic functionality.
Meanwhile Graphite is, in my mind, strictly presentation and deals only
with metrics. It does support both numeric and boolean metrics. It also
has basic resource functionality but it’s not hardwired. It doesn’t
really do event handling in the strict sense. Analytics is left to the
human mind. It certainly doesn’t support context.
I’d love to see more of these evaluations.
Also, I know there are tons of “words” that we didn’t cover - thresholds
for instance. While there wasn’t a total consensus, there was some
agreement that somethings were attributes of a component but not a
primitive itself. It was also accepted that components themselves would
be primitives. You correlation engine might aggregate (another word) a
group of metrics and generate an event. At that point, your correlation
engine is now a resource with its own metrics (25 errors) and context
(“number of errors across application servers exceeded acceptable
limits”) which could be then sent to an event processor.
That’s the beauty of the Voltron approach and not binding a resource to
a construct like a Host.
I’m very sorry that we couldn’t get everyone together. I’ve scheduled
another meeting where we can start from scratch just like this one, or
build on what was discussed already. I’m flexible and willing to wake up
at whatever time works best for you guys
Thanks again to everyone who attended. If you couldn’t be there, I hope
you can make the next one.
(and what we’re doing about it)
About two weeks ago someone made a tweet. At this point, I don’t
remember who said it but the gist was that “monitoring sucks”. I
happened to be knee-deep in frustrating bullshit around that topic and
was currently evaluating the same effing tools I’d evaluated at every
other company over the past 10 years or so. So I did what seems to be
S.O.P for me these days. I started something.
Heck no! Monitoring is AWESOME. Metrics are AWESOME. I love it. Here’s
what I don’t love: - Having my hands tied with the model of host and
service bindings. - Having to set up “fake” hosts just to group
arbitrary metrics together - Having to either collect metrics twice -
once for alerting and another for trending - Only being able to see my
metrics in 5 minute intervals - Having to chose between shitty interface
but great monitoring or shitty monitoring but great interface - Dealing
with a monitoring system that thinks IT is the system of truth for
my environment - Perl (I kid…sort of) - Not actually having any real
choices
Yes, yes I know:
Seriously? Kiss my ass. I’m a huge fan of the Unix pipeline philosophy
but, christ, have you ever heard the phrase “antipattern”?
I’m going to let smart people be smart and do smart things.
Step one was getting everyone who had similar complaints together on
IRC. That went pretty damn well. Step two was creating a github repo.
Seriously. Step two should ALWAYS be “create a github repo”. Step three?
Hell if I know.
Here’s what I do know. There are plenty of frustrated system
administrators, developers, engineers, “devops” and everything under the
sun who don’t want much. All they really want is for shit to work. When
shit breaks, they want to be notified. They want pretty graphs. They
want to see business metrics along side operational ones. They want to
have a 52-inch monitor in the office that everyone can look at and say:
So the plan I have in place for the repository is this. We don’t really
need code. What we need is an easy way for people to contribute ideas.
The plan I have in place for this is partially underway. There’s now a
monitoringsucks organization on Github. Pretty much anyone who is
willing to contribute can get added to the team. The idea is that, as
smart people think of smart shit, we can create new repository under
some unifying idea and put blog posts, submodules, reviews,
ideas..whatever into that repository so people have an easy place to go
get information. I’d like to assign someone per repository to be the
owner. We’re all busy but this is something we’re all highly interested
in. If we spread the work out and allow easy contribution, then we can
get some real content up there.
I also want to keep the repos as light and cacheable as possible. The
organization is under the github “free” plan right now and I’d like to
keep it that way.
This repo serves as a place to collect general information about blog
posts people come across. Think of it as hyper-local delicious in a
DVCS.
Currently, by virtue of the first commit, Michael Conigliaro is the
“owner”. You can follow him on twitter and github as @mconigliaro
This repo is a log of any “scheduled” irc sessions. Personally, I don’t
think we need a distinct #monitoringsucks channel but people want to
keep it around. The logs in this repo are not full logs. Just those from
when someone says “Hey smart people. Let’s think of smart shit at this
date/time” on twitter.
Currently I appear to be the owner of this repo. I would love for
someone who can actually make the logs look good to take this over.
This repo is really more of a “curation” repo. The plan is that each
directory is the name of some tool with two things it in:
Again, I think I’m running point on this one. Please note that the
submodule links APPEAR to have some sort of UI issue on github. Every
submodule appears to point to Dan DeLeo’s ‘critical’ project.
This is our latest member and it already has an official manager! Jason
Dixon (@obfuscurity on github/twitter - jdixon on irc) suggested it so
he get’s to run it ;) The idea here is that this will serves as a set of
best practices around what metrics you might want to collect and why.
I’m leaving the organization up to Jason but I suggested a
per-app/service/protocol directory.
So that’s where we are. Where it goes, I have no idea. I just want to
help where ever I can. If you have any ideas, hit me up on
twitter/irc/github/email and let me know. It might help to know that if
you suggest something, you’ll probably be made the person reponsible for
it ;)
Update!
It was our good friend Sean Porter (@portertech on twitter), that we
have to thank for all of this ;)
  
  From Public Photos
Update (again)
It was kindly pointed out that I never actually included a link to the
repositories. Here they are:
https://github.com/monitoringsucks
This is the fourth part in a series on Noah. Part 1, Part 2 and Part 3 are available as well
In Part 1 and 2 of this series I covered background on Zookeeper and
discussed the similarities and differences between it and Noah. Part 3
was about the components underneath Noah that make it tick.
This post is about the “future” of Noah. Since I’m a fan of Fourcast
podcast, I thought it would be nice to do an immediate, medium and long
term set of goals.
In the most immediate future there are a few things that need to happen.
These are in no specific order.
Now that doesn’t look like a very cool list but it’s a lot of work for
one person. I don’t blame anyone for not getting excited about it. The
goal now is to get a functional and stable application out the door that
people can start using. Mind you I think it’s usable now (and I’m
already using it in “production”).
Obviously if anyone has something else they’d like to see on the list,
let me know.
So beyond that 1.0 release, what’s on tap? Most of the work will
probably occur around the watcher subsystem and the callback daemon.
However there are a few key server changes I need to implement.
Also during this period, I want to spend time building up the ecosystem
as a whole. You can see a general mindmap of that
here.
Going into a bit more detail…
It’s plainly clear that something which has the ability to make runtime
environment changes needs to be secure. The first thing to roll off the
line post-1.0 will be that functionality. Full ACL support for all
entries will be enabled and in can be set at any level in the namespace
just the same as Watches.
Again for all entires and levels in the namespace, versioning and
auditing will be allowed. The intention is that the number of revisions
and audit entries are configurable as well - not just an enable/disable
bit.
While I’ve lamented the fact that watches were in-band only in
Zookeeper, there’s a real world need for that model. The idea of
long-polling functionality is something I’d actually like to have by 1.0
but likely won’t happen. The intent is simply that when you call say
/some/path/watch, you can pass an optional flag in the message stating
that you want to watch that endpoint for a fixed amount of time for any
changes. Optionally a way to subscribe to all changes over long-polling
for a fixed amount of time is cool too.
These two are pretty high on my list. As I said, there’s a workable
solution with minimal tech debt going into the 1.0 release but long
term, this needs to be a distinct package. A few other ideas I’m kicking
around are allowing configurable filtering on WHICH callback types an
agent will handle. The idea is that you can specify that this invocation
only handle http callbacks while this other one handles AMQP.
One idea I’d REALLY like to come to fruition is the Sinatra Helper. I
envision it working something like this:
The idea is that the helper allows you to register your application very
easily with Noah for other components in your environment to be know. As
a byproduct, you get the ability to get/set certain configuration
parameters entirely in Noah. The watch setting is kind of cool as well.
What will happen is if you decide to watch something this way, the
helper will create a random (and yes, secure) route in your application
that watch events can notify. In this way, your Sinatra application can
be notified of any changes and will automatically “reconfigure” itself.
Obviously I’d love to see other implementations of this idea for other
languages and frameworks.
There aren’t so much specific list items here as general themes and
ideas. While I list these as long term, I’ve already gotten an offer to
help with some of them so they might actually get out sooner.
This is something I’m VERY keen on getting accomplished and would really
consider it the fruition of what Noah itself does. The idea is simply
that multiple Noah servers themselves are clients of other Noah servers.
I’ve got several ideas about how to accomplish this but I got an
interesting follow up from someone on Github the other day. He asked
what my plans were in this area and we had several lengthy emails back
and forth including an offer to work on this particular issue.
Obviously there are a whole host of issues to consider. Race conditions
in ordered delivery of Watch callbacks (getting a status “down” after a
status “up” when it’s supposed to be the other way around..) and
eventual consistency spring to mind first.
The general architecture idea that was offered up is to use
NATS as the mechanism for
accomplishing this. In the same way that there would be AMQP callback
support, there would be NATS support. Additional Noah servers would only
need to know one other member to bootstrap and everything else happens
using the natural flows within Noah.
The other part of that is how to handle the Redis part. The natural
inclination is to use the upcoming Redis clustering but that’s not
something I want to do. I want each Noah server to actually include its
OWN Redis instance “embedded” and not need to rely on any external
mechanism for replication of the data. Again, the biggest validation of
what Noah is designed to do is using only Noah itself to do it.
If NATS says anything to me, it says “Why do you even need Redis?”. If
you recall, I went with Redis because it solved multiple problems. If I
can find a persistence mechanism that I can use without any external
service running, I’d love to use it.
If I were to end up moving off Redis, I’d need a cross platform and
cross language way to handle the pubsub component. NATS would be the
first idea but NATS is Ruby only (unless I’ve missed something). ZeroMQ
appears to have broad language and platform support so writing custom
agents in the same vein as the Redis PUBSUB method should be feasible.
This is more of a command-and-control topic but a set of
high-performance specialized agents on systems that can watch the PUBSUB
backend or listen for callbacks would be awesome. This would allow you
really integrate Noah into your infrastructure beyond the application
level. Use it to trigger a puppet or chef run, reboot instances or do
whatever. This is really about bringing what I wanted to accomplish with
Vogeler into Noah.
A lot of people have asked me about this. I’ll state right now that I
can only make it through about 20-30% of any reading about Paxos before
my brain starts to melt. However in the interest of proving myself the
fool, I think it would be possible to implement some Paxos like
functionality on top of Noah. Remember that Noah is fundamentally about
fully disconnected nodes. What better example of a network of unreliable
processors than ones that never actually talk to each other. The problem
is that the use case for doing it in Noah is fairly limited so as not to
be worth it.
The grand scheme is that Noah helps enable the construction of systems
where you can say “This component is free to go off and operate in this
way secure in the knowledge that if something it needs to know changes,
someone will tell it”. I did say “grand” didn’t I? At some point, I may
hit the limit of what I can do using only Ruby. Who knows.
Again with the recap
I’m not kidding on that last one. Ask me about Parrot AR drones and
Noah sometime
If you made it this far, I want to say thank you to anyone who read any
or all of the parts. Please don’t hesitate to contact me with any
questions about the project.
This is the third part in a series on Noah. Part 1 and Part 2 are available as well
In Part 1 and 2 of this series I covered background on Zookeeper and
discussed the similarities and differences between it and Noah. This
post is discussing the technology stack under Noah and the reasoning for
it.
I’ve told a few people this but my original intention was to use Noah as
a way to learn Erlang. However this did not work out. I needed to get a
proof of concept out much quicker than the ramp up time it would take to
learn me some Erlang. I had this
grandiose idea to slap mnesia, riak_core and webmachine into a tasty
ball of Zookeeper clonage.
I am not a developer by trade. I don’t have any formal education in
computer science (or anything for that matter). The reason I mention
this is to say that programming is hard work for me. This has two side
effects:
So in the interest of time, I fell back to a language I’m most
comfortable with right now, Ruby.
Noah isn’t so much a web application as it is this ‘api thing’. There’s
no proper front end and honestly, you guys don’t want to see what my
design deficient mind would create. I like to joke that in the world of
MVC, I stick to the M and C. Sure, APIs have views but not in the “click
the pretty button sense”.
I had been doing quite a bit of glue code at the office using
Sinatra (and EventMachine) so I went with
that. Sinatra is, if you use sheer number of clones in other languages
as an example, a success for writing API-only applications. I also
figured that if I wanted to slap something proper on the front, I could
easily integrate it with Padrino.
But now I had to address the data storage issue.
Previously, as a way to learn Python at another company, I wrote an
application called Vogeler. That
application had a lot of moving parts - CouchDB for storage and RabbitMQ
for messaging.
I knew from dealing with CouchDB on CentOS5 that I wasn’t going to use
THAT again. Much of it would have been overkill for Noah anyway. I
realized I really needed nothing more than a key/value store. That
really left me with either Riak or Redis. I love Riak but it wasn’t the
right fit in this case. I needed something with a smaller dependency
footprint. Mind you Riak is VERY easy to install but managing Erlang
applications is still a bit edgy for some folks. I needed something
simpler.
I also realized early on that I needed some sort of basic queuing
functionality. That really sealed Redis for me. Not only did it have
zero external dependencies, but it also met the needs for queuing. I
could use lists as dedicated direct queues and I could use the
built-in pubsub as a broadcast mechanism. Redis also has a fast atomic
counter that could be used to approximate the ZK sequence primitive
should I want to do that.
Additionally, Redis has master/slave (not my first choice) support for
limited scaling as well as redundancy. One of my original design goals
was that Noah behave like a traditional web application. This is a model
ops folks understand very well at this point.
When you think asynchronous in the Ruby world, there’s really only one
tool that comes to mind, EventMachine. Noah is designed for asynchronous
networks and is itself asynchronous in its design. The callback agent
itself uses EventMachine to process watches. As I said previously, this
is simply using an EM friendly Redis driver that can do PSUBSCRIBE
(using em-hiredis) and send watch messages (using em-http-request since
we only support HTTP by default).
Finally I slapped Ohm on top as the
abstraction layer for Redis access. Ohm, if you haven’t used it, is
simply one of if not the best Ruby library for working with Redis. It’s
easily extensible, very transparent and frankly, it just gets the hell
out of your way. A good example of this is converting some result to a
hash. By default, Ohm only returns the id of the record. Nothing more.
It also makes it VERY easy to drop past the abstraction and operate on
Redis directly. It even provides helpers to get the keys it uses to
query Redis. A good example of this is in the Linking and Tagging code.
The following is a method in the Tag model:
Because Links and Tags are a one-to-many across multiple models, I drop
down to Redis and use sadd to add the object to a Redis set of objects
sharing the same tag.
It also has a very handy feature which is how the core of Watches are
done. You can define hooks at any phase of Redis interaction - before
and after saves, creates, updates and deletes. the entire Watch system
is nothing more than calling these post hooks to format the state of the
object as JSON, add metadata and send the message using PUBLISH
messages to Redis with the Noah namespace as the channel.
I’ve used this phrase with a few people. Essentially, I want as many
people as possible to be able to use the Noah server component. I’ve
kept the Ruby dependencies to a minimum and I’ve made sure that every
single one works on MRI 1.8.7 up to 1.9.2 as well as JRuby. I already
distribute the most current release as a war that can be deployed to a
container or run standalone. I want the lowest barrier to entry to get
the broadest install base possible. When a new PaaS offering comes out,
I pester the hell out of anyone I can find associated with it so I can
get deploy instructions written for Noah. So far you can run it on
Heroku (using the various hosted Redis providers), CloudFoundry and
dotcloud.
I’m a bit more lax on the callback daemon. Because it can be written in
any language that can talk to the Redis pubsub system and because it has
“stricter” performance needs, I’m willing to make the requirements for
the “official” daemon more stringent. It currently ONLY works on MRI
(mainly due to the em-hiredis requirement).
Some people have asked me why I didn’t use technology A or technology B.
I think I addressed that mostly above but I’ll tackle a couple of key
ones.
ZeroMQ
The main reason for not using 0mq was that I wasn’t really aware of it.
Were I to start over and still be using Ruby, I’d probably give it a
good strong look. The would still be the question of the storage
component though. There’s still a possible place for it that I’ll
address in part four.
NATS
This was something I simply had no idea about until I started poking
around the CloudFoundry code base. I can almost guarantee that NATS will
be a part of Noah in the future. Expect much more information about that
in part four.
MongoDB
You have got to be kidding me, right? I don’t trust my data (or anyone
else’s for that matter) to a product that doesn’t understand what
durability means when we’re talking about databases.
Insert favorite data store here
As I said, Redis was the best way to get multiple required functionality
into a single product. Why does a data storage engine have a pubsub
messaging subsystem built in? I don’t know off the top of my head but
I’ll take it.
So again, because I evidently like recaps, here’s the take away:
If you haven’t guessed, I’m doing one part a night in this series.
Tomorrow is part four which will cover the future plans for Noah. I’m
also planning on a bonus part five to cover things that didn’t really
fit into the first four.
This is the second part in a series on Noah. Part 1 is available here
In part one of this series, I went over a little background about
ZooKeeper and how the basic Zookeeper concepts are implemented in Noah.
In this post, I want to go over a little bit about a few things that
Noah does differently.
As mentioned in the previous post, Noah has 5 essential data types, four
of which are what I’ve interchangeably refered to as either Primitives
and Opinionated models. The four primitives are Host, Service,
Application and Configuration. The idea was to map some common use cases
for Zookeeper and Noah onto a set of objects that users would find
familiar.
You might detect a bit of Nagios inspiration in the first two.
Hosts and Services have a unique attribute known as status. This is a
required attribute and is one of up,down or pending. These
primitives would work very well integrated into the OS init process.
Since Noah is curl-friendly, you could add something globally to init
scripts that updated Noah when your host is starting up or when some
critical init script starts. If you were to imagine Noah primitives as
part of the OSI model, these are analagous to Layers 2 and 3.
Applications and Configurations are intended to feel more like Layer 7
(again, using our OSI model analogy). The differentiation is that your
application might be a Sinatra or Java application that has a set of
Configurations associated with it. Interestingly enough, you might
choose to have something like Tomcat act as both a Service AND an
Application. The aspect of Tomcat as a Service is different than the
Java applications running in the container or even Tomcat’s own
configurations (such as logging).
One thing I’m trying to pull off with Configurations is limited
mime-type support. When creating a Configuration in Noah, you can assign
a format attribute. Currently 3 formats or types are understood:
The idea is that, if you provide a type, we will serve that content back
to you in that format when you request it (assuming you request it that
way via HTTP headers). This should allow you to skip parsing the JSON
representation of the whole object and instead use it directly. Right
now this list is hardcoded. I have a task to convert this.
Hosts and Services make a great “canned” structure for building a
monitoring system on top of Noah. Applications and Configurations are a
lightweight configuration management system. Obviously there are more
uses than that but it’s a good way to look at it.
Ephemerals, as mentioned previously, are closer to what Zookeeper
provides. The way I like to describe Ephemerals to people is a ‘512 byte
key/value store with triggers’ (via Watch callbacks). If none of the
Primitives fit your use case, the Ephemerals make a good place to start.
Simply send some data in the body of your post to the url and the data
is stored there. No attempt is made to understand or interpret the data.
The hierarchy of objects in the Ephemeral namespace is completely
arbitrary. Data living at /ephemerals/foo has no relationship with
data living at /ephemerals/foo/bar.
Ephemerals are also not browseable except via a Linking and Tagging.
Links and Tags are, as far as I can tell, unique to Noah compared to
Zookeeper. Because we namespace against Primitives and Ephemerals, there
existed the need to visualize objects under a custom hierarchy.
Currently Links and Tags are the only way to visualize Ephemerals in a
JSON format.
Tags are pretty standard across the internet by now. You might choose to
tag a bunch of items as production or perhaps group a set of Hosts and
Services as out-of-service. Tagging an item is a simple process in the
API. Simply PUT the name of the tag(s) to the url of a distinct named
item appended by tag. For instance, the following JSON posted to
/applications/my_kick_ass_app/tag with tag the Application
my_kick_ass_app with the tags sinatra, production and foobar:
Links work similar to Tags (including the act of linking) except that
the top level namespace is now replaced with the name of the Link. The
top level namespace in Noah for the purposes of Watches is //noah. By
linking a group of objects together, you will be able to (not yet
implemented), perform operations such as Watches in bulk. For instance,
if you wanted to be informed of all changes to your objects in Noah, you
would create a Watch against //noah/*. This works fine for most people
but imagine you wanted a more multi-tenant friendly system. By using
links, you can group ONLY the objects you care about and create the
watch against that link. So //noah/* becomes //my_organization/* and
only those changes to items in that namespace will fire for that Watch.
The idea is also that other operations outside of setting Watches can be
applied to the underlying object in the link as well. The name Link was
inspired by the idea of symlinking.
In the first post, I mentioned that by nature of Noah being
“disconnected”, Watches were persistent as opposed to one-shot.
Additionally, because of the pluggable nature of Noah Watches and
because Noah has no opinion regarding the destination of a fired Watch,
it becomes very easy to use Noah as a broadcast mechanism. You don’t
need to have watches for each interested party. Instead, you can create
a callback plugin that could dump the messages on an ActiveMQ Fanout
queue or AMQP broadcast exchange. You could even use multicast to notify
multiple interested parties at once.
Again, the act of creating a watch and the destination for notifications
is entirely disconnected from the final client that might use the
information in that watch event.
Additionally, because of how changes are broadcast internally to Noah,
you don’t even have to use the “official” Watch method. All actions in
Noah are published post-commit to a pubsub queue in Redis. Any language
that supports Redis pubsub can attach directly to the queue and
PSUBSCRIBE to the entire namespace or a subset. You can write your own
engine for listening, filtering and notifying clients.
This is exactly how the Watcher daemon works. It attaches to the Redis
pubsub queue, makes a few API calls for the current registered set of
watches and then uses the watches to filter messages. When a new watch
is created, that message is like any other change in Noah. The watcher
daemon sees that and immediately adds it to its internal filter. This
means that you can create a new watch, immediately change the watched
object and the callback will be made.
So to wrap up:
Part three in this series will discuss the technology stack under Noah
and the reasoning behind it. A bit of that was touched on in this post.
Part four is the discussion about long-term goals and roadmaps.
This is the first part in a series of posts going over Noah
As you may have heard (from my own mouth no less), I’ve got a smallish
side project I’ve been working on called
Noah.
It’s a project I’ve been wanting to work on for a long time now and
earlier this year I got off my ass and started hacking. The response has
been nothing short of overwhelming. I’ve heard from so many people how
they’re excited for it and nothing could drive me harder to work on it
than that feedback. To everyone who doesn’t run away when I talk your
ear off about it, thank you so much.
Since I never really wrote an “official” post about it, I thought this
would be a good opportunity to talk about what it is, what my ideas are
and where I’d like to see it go in the future.
fair warning. much of the following may be duplicates of information in
the Noah wiki
The inspiration for Noah came from a few places but the biggest
inspiration is Apache Zookeeper. Zookeeper is one
of those things that by virtue of its design is a BUNCH of different
things. It’s all about perspective. I’m going to (yet again) paste the
description of Zookeeper straight from the project site:
Now that might be a bit confusing at first. Which is it? Is it a
configuration management system? A naming system? It’s all of them and,
again, it’s all about perspective.
Zookeeper, however, has a few problems for my standard use case.
By the first, I mean that the only official language bindings are C and
Java. There’s contributed Python support and Twitter maintains a Ruby
library. However all of these bindings are “native” and must be
compiled. There is also a command-line client that you can use for
interacting as well - one in Java and two C flavors.
The second is more of a showstopper. Zookeeper uses the client
connection to the server as in-band signaling. This is how watches
(discussed in a moment) are communicated to clients. Persistent
connections are simply not always an option. I can’t deploy something to
Heroku or AppEngine that requires that persistent connection. Even if I
could, it would be cost-prohibitive and honestly wouldn’t make sense.
Looking at the list of features I loved about ZK, I thought “How would I
make that work in the disconnected world?”. By that I mean what would it
take to implement any or all of the Zookeeper functionality as a service
that other applications could use?
From that thought process, I came up with Noah. The name is only a play
on the concept of a zookeeper and holds no other real significance other
than irritation at least two people named Noah when I talk about the
project.
So working through the feature list, I came up with a few things I
REALLY wanted. I wanted Znodes, Watches and I wanted to do it all
over HTTP so that I could have the broadest set of client support. JSON
is really the defacto standard for web “messaging” at this point so
that’s what I went with. Basically the goal was “If your language can
make HTTP requests and parse JSON, you can write a Noah client”
Zookeeper has a shared hierarchical namespace similar to a UNIX
filesystem. Points in the hierarchy are called znodes. Essentially
these are arbitrary paths where you can store bits of data - up to 1MB
in size. These znodes are unique absolute paths. For instance:
Each fully qualified path is a unique znode. Znodes can be ephemeral or
persistent. Zookeeper also has some primitives that can be applied to
znodes such as ‘sequence`.
When I originally started working on Noah, so that I could work with a
model, I created some base primitives that would help me demonstrate an
example of some of the use cases:
These primitives were actual models in the Noah code base with a strict
contract on them. As an example, Hosts must have a status and can have
any number of services associated with them. Services MUST be tied
explicity to a host. Applications can have Configurations (or not) and
Configurations can belong to any number of Applications or not.
Additionally, I had another “data type” that I was simply calling
Ephemerals. This is similar to the Zookeeper znode model. Originally I
intended for Ephemerals to be just that - ephemeral. But I’ve backed off
that plan. In Noah, Ephemerals can be either persistent or truely
ephemeral (not yet implemented).
So now I had a data model to work with. A place to store information and
flexibility to allow people to use the predefined primitives or the
ephemerals for storing arbitrary bits of information.
As I said, the model for my implementation was “disconnected”. When
thinking about how to implement Watches in a disconnected model, the
only thing that made sense to me was a callback system. Clients would
register an interest on an object in the system and when that object
changed, they would get notified by the method of their choosing.
One thing about Watches in Zookeeper that annoys me is that they’re
one-shot deals. If you register a watch on a znode, once that watch is
triggered, you have to REREGISTER the watch. First off this creates, as
documented by the ZK project, a window of opportunity where you could
miss another change to that watch. Let’s assume you aren’t using a
language where interacting with Zookeeper is a synchronous process:
In between those last two steps, you risk missing activity on the znode.
In the Noah world, watches are persistent. This makes sense for two
reasons. The first is that the latency between a watch callback being
fired and proccessed could be much higher than the persistent connection
in ZK. The window of missed messages is simply much greater. We could
easily be talking 100’s of milliseconds of latency just to get the
message and more so to reregister the watch.
Secondly, the registration of Watches in Noah is, by nature of Noah’s
design and as a byproduct, disconnected from the consumer of those
watches. This offers much greater flexibility in what watches can do.
Let’s look at a few examples.
First off, it’s important to understand how Noah handles callbacks. The
message format of a callback in Noah is simply a JSON representation of
the changed state of an object and some metadata about the action taken
(i.e. delete, create, update). Watches can be registered on distinct
objects, a given path (and thus all the children under that path) and
further refined down to a given action. Out of the box, Noah ships with
one callback handler - http. This means that when you register a watch
on a path or object, you provide an http endpoint where Noah can post
the aforementioned JSON message. What you do with it from there is up to
you.
By virtue of the above, the callback system is also designed to be
‘pluggable’ for lack of a better word. While the out of the box
experience is an http post, you could easily write a callback handler
that posted the message to an AMQP exchange or wrote the information to
disk as a flat file. The only requirement is that you represent the
callback location as a single string. The string will be parsed as a url
and broken down into tokens that determine which plugin to call.
So this system allows for you to distribute watches to multiple systems
with a single callback. Interestingly enough, this same watch callback
system forms the basis of how Noah servers will share changes with each
other in the future.
So wrapping up what I’ve discussed, here are the key take aways:
In part two of this series we’ll discuss some of the additions to Noah
that aren’t a part of Zookeeper such as Tags and Links. Part 3 will
cover the underlying technology which I am intentionally not discussing
at this point. Part 4 will be a roadmap of my future plans for Noah.
I’ve done a lot of tweeting about systemd lately. My internal conscience constantly reminds me of John Allspaw saying that twitter is just pretty much perfect for snarky comments (paraphrase).
Al Tobey asked me a good question:
First mistake is thinking I know wtf is going on. However the question was asked. What “technical” concerns do I have with systemd?
I don’t (sort of). Here are my primary ones:
Yes journald can be setup to use syslog but by default, it’ll use a binary log format. Sure you can use “strings” on it but is anyone seriously considering that a proper way to get to your system logs? In fairness, journalctl provides some nice mechanisms for targeting specific message types, sources and scope but at the expense of having to use journalctl as the unified interface. Keep this tradeoff in mind when I get to the “real problems” section.
On the architecture of systemd, I have a legitimate concern with the scope. Let’s use the image from wikipedia:

I previously stated that systemd provided a nice juicy attack surface. There are valid arguments that not all these components are “core” systemd. Regardless, they are still components and there is an implicit trust relationship with “core” vs “components”. Yes systemd sticks everything in cgroups (another minor issue I have) but with the coming Dockerpocalypse didn’t everyone learn that cgroups were not a security mechanism (nor are containers for that matter)? I still stand by my statement that the “big one” linux exploit will somehow be tied to systemd.
But back to that architecture for a minute. There are a lot of things in there, that while possibly optional, are things I have zero need for where systemd affects me the most. Telephony? Graphical sessions? I didn’t even know what Tizen is before this post (and I think the modified image on wikipedia came from the Tizen wiki). Maybe it’s not required. I can’t tell. Keep this in mind also.
Probably the best argument against the architecture of systemd is from one of the primary authors here. A list of “advantages” that includes the SCM system in use or the fact that there are “Specialized professional consulting and engineering services available” is not a valid technical merit. Finally buried deep in the text near the end, we come to understand the biggest architectural problem of all:
I also personally think that the systemd design motivations are “flawed” at the core:
and
I’m going to go on record and say that this is quite possibly the worst idea to anyone running a server. The acceptable use cases for this are so narrow that it’s hardly justification for everything that followed.
I know my “technical” arguments are flimsy. The fact is there some really cool shit in systemd including many of the things listed in the linked post.
The problem with systemd is that it is the single most invasive change to Linux in a long line of changes that ultimately mean that Linux may be headed towards uselessness as a server operating system.
I’m going to state up front (and people are free to disagree with me) that I believe you cannot provide a distribution of Linux that is both designed for the “server” and the “desktop” and provide a product that is worth using on either.
We’ve see this happening with regularity in other places such as d-bus. Again, these things aren’t neccessarily BAD things (and kdbus will enable some REALLY cool shit) but at what cost? I think motivation matters considerably here.
Understand that I exclusively run “linux on the desktop” and I have for a VERY long time. I have a vested interest in Linux not sucking on the desktop. However I have a GREATER interest in Linux on the server not sucking. My linux desktop doesn’t send me pager alerts at 3AM when pulseaudio shits the bed because of some USB interrupt issue with my headset. Pagerduty will, however, call me on the phone and wake up my sleeping partner when there’s a kernel panic.
In fact, I’ll go even further and say that ANY kernel or distro related change that was driven by “the linux desktop” is suspect to me.
The problem is I don’t have that luxury. I have competing responsiblities. I have to provide a system that runs reliably and can easily be reasoned about and yet I have to build it on distributions created by people who consider how long it takes to get to the fucking GDM login screen and if shutting the laptop lid will cause the system to hibernate properly or not.
I realize that there is overlap in these cases. A power efficient operating system has benefit to me sure but it’s not my primary concern.
This could be classified as technical but it’s not just about the project itself. Systemd IS an immature system. Wikipedia puts the initial release as 3/30/2010. Lennart’s “announcement” has a date of 04/30/2010. Let’s call it four years among friends.
We have a system that has gone from a blog post to being the “comprehensive, integrated and modular platform providing everything needed to bootstrap and maintain an operating system’s userspace”.
I don’t think so.
Let’s also not forget that systemd uptake was LARGELY restricted to Fedora up until the point that the Gnome team decided that logind would be a future requirement. I want that to sink in VERY clearly.
Systemd did not get to the place it was in UNTIL it became, by proxy, a requirement for GNOME. What did that give us?
Now I’m the first person to complain about distros keeping way old versions of stuff around but this is ridiculous. You cannot tell me that is considered “baked” by any stretch of the imagination.
I can’t say much here except that my experience with previous projects from Poettering (pusleaudio and avahi) give me very little faith in systemd.
Is that a fair assessment? I think it has relevance. There’s a question of what the driving force is behind someone’s logic. There’s a question of previous quality. Does the person go after the new shiny and abandon some previous project?
The only upshot, I guess, is that distros have a vested interest now as there is no avoiding systemd. This is likely a change that will never get rolled back. We can only hope that the Linux certain people want is the Linux that meets our needs as system administrators.
This issue is probably irrelevant to most people but it bothers me greatly.
With the systemd adoption comes the first steps to more applications being “Linux” only. When the creator of systemd says that we should ignore POSIX compatability and systemd itself relies on Linux-only features like cgroups there’s really little hope left. GNOME requiring logind means realistically that GNOME will only ever run on Linux. Will something step up and take its place? Maybe but it will likely see zero adoption and be a niche player in the overall scheme.
Linux is becoming the thing that we adopted Linux to get away from.
I am fully willing to concede that systemd is going to enable some really cool stuff. CoreOS has adopted nspawn. Unit files can provide a straight up dead simple mechanism for applications to daemonize themselves. Finally you can say “just daemonize this command” for me. Cgroups integration is really quite awesome as well. I’m totally for Linux adopting some of these awesome new things.
The problems I have are the tradeoffs. This is very similar to a previous discussion I was involved in regarding another tool. In this case you came for cgroups and faster boot times(*) and you got stuck with:
Oddly enough, the thing that is giving more uniformity to Linux is making it less “Linux” to me.
I am, as always, willing to be corrected in places where I got things wrong. Please be aware that I check in for comments on posts and don’t get notified on new ones. If you feel like the discussion doesn’t cleanly fit in a comment, feel free to post a gist and I’ll respond there and link here.
(*) The fastest part of booting my servers is the init. It’s the 7 minutes of POST+device enumeration that takes more time. My instances in CloudStack are nearly instant boot as well.
Note this post has comments disabled. This is a first for me but if someone wants to ask me anything else, there are multiple personal ways to contact me.
Recently I posted a message to the chef-users mailing list. It was a hard post for me to write because I was attempting to be as tactful as possible about the issue. While I think it was the right move and some good came out of it, I now feel like I have to defend myself for some reason.
My concern over Berkshelf came from one single place, what is the implication to Chef (the tool) itself where everything in the ecosystem adopts Berkshelf for dependency solving.
Why do I care? Because EVERY SINGLE EXPERIENCE I’ve had with Berkshelf has been crappy. I’m never quiet about crappy software. Ask anyone I work with. I’m just as matter of fact about it in our own software as well as software I’ve had to use.
Understand that my frustration with Berkshelf came out of using it with omnibus early on and the resultant breakage from either vagrant-berkshelf or omnibus. Every attempt I’ve made to use Berkshelf internally has ended badly including restoring my local checkout from an internal repo.
You can ask anyone on our operations team but I have said if our team decides we want to use Berkshelf then we’ll use it. Multiple attempts have been tried and everyone has come away with a bad experience.
Why is that? Why is something as simple as a dependency solver so painful? Julian Dunn said it best:
I hope this makes my concerns about where Berkshelf itself is going in Chef much more clear. No one is arguing that depsolving isn’t a problem. The issue is that along with that comes a set of entirely unrelated things. If the entire Chef ecosystem is moving to Berkshelf (the depsolver) plus Berkshelf (the everything else) then, yes, that lessens the value of the ecosystem to me. I stand by my statement that Berkshelf is impossible to avoid these days because it IS integrated into every part of the ecosystem regardless if it’s actually a requirement of chef itself.
Understand I am not paid to work on Chef, Chef ecosystem tools or anything else. I am paid to keep our applications and servers running. To do this, we leverage tools like Artifactory Pro, Chef, Jenkins, Rundeck, Omnibus, Vagrant, Nginx and countless others. If any of those tools start causing an impediment to our ability to ship then we have an obligation to revisit if that tool is the right fit. Maybe we’ve outgrown it. Maybe the tool (or its ecosystem) has taken a different approach. In the end it doesn’t matter. If the tool isn’t working, we either have to deal with finding a replacement or fight it until we can find (or create) a replacement. Every tool choice we make has implications on everything from availability to business agility to how often people get woken up at night.
I’m truly sorry if people took these criticisms personally. I realize the discussion got heated and others were a bit more stern in the criticism they used. I never asked anyone to “come to my defense”. I also have never pushed my view on anyone else and told them they shouldn’t use Berkshelf. I’ve been blunt about my experiences and pain points but never said either “You shouldn’t use Berkshelf or I don’t think you should use Berkshelf”.
The people working on these tools are nice people (at least the ones I’ve met in person). I realize how hard it is to separate the opinion of something you’ve created or maintain from yourself. Your effort in maintaining opensource software is truly appreciated.
The last thing I want to say in my defense is this. If you think that any of this over the past few days is somehow my fault or that I started all this, that’s simply wrong. I addressed this in the mailing list post. If you want to be mad at ME that’s fine but consider this. You don’t always get negative feedback from your users or your customers. At best you get a small chance to salvage the relationship from a public complaint but more often that not, people just go away mad.
The problem is that this carries over in to discussions you never hear about. Joe asks Sally her opinion on X and Sally recounts her personal experience. This shapes Joe’s perception of X.
If anyone would like to contact me about this, I will be glad to talk about it as time permits but I’m this is last I plan on talking about it in public.
I’ve gotten quite a bit of constructive feedback on the PaaS realism post and I wanted to aggregate it here.
I was humbled to see a very awesome post from Luke Meyer who works on the OpenShift team.  I think if you are going to deploy OpenShift, his post is very important to read.
I wanted to respond to a few points specifically he made (and again say thank you for taking the time to respond/educate me)
Luke is absoltely correct that statefulness and stateful requirements are not a limitation of a PaaS. I’ll address this a bit at the bottom a bit more clearly but I would say the issue is AMPLIFIED by a PaaS.
Luke points out that database cartridges on OpenShift are not redundant. I was informed that there IS an HA cartridge of PGSQL available though it appears to be a commercial offering. The marketing fluff doesn’t go into any useful information to clarify how that works (and I’ve not yet dug in to see if there’s freely available tech information).
And frankly, similarly to the state issue, database usage is pretty app specific. One thing I take issue with is that if you do end up using an external DB, have you really bought yourself that much? Yes your application has a common ‘environment’ to it now but there’s still this non-PaaS component that someone has to use. Unless you’re setting up an external development database you now have a tangible difference between production and development that you have to account for. Again, this is not SPECIFIC to a PaaS but it is a variable that I think gets glossed over.
I think this came across incorrectly in my original post. If your application requires persistant storage, you’ve already hit the first strike in my “Is your app ready” list. If you are using a platform as a service and you require some form of persistent storage, you should go back to the drawing board.
I can’t go into details but I can tell you this is definitely an issue. A predictable enterprise IT security bullshit issue but an issue none the less. As in a complete non-starter issue.
I’m going to hold off on this until the end because this ties into an overarching concern/commentary I have.
I think everyone should read the rest of Luke’s post that I’m not responding to specifically. It’s a very well thought out post and he makes very excellent points. In fact at the end he does ask a very legitimate question:
I didn’t get much feedback on CF as I’d liked but in fairness I didn’t give CF the same attention as I did OpenShift. I did, however, get quite a bit of good information from Twitter from both Dave McCrory and James Watters as well as someone I’m not comfortable naming considering it was not public communication.
Before I address the CF specifics, however, I think the most critical deciding factor in why NOT to choose CF right now is that it’s undergoing a rewrite. I don’t know what the upgrade path for that rewrite is. My guess is it’s a parallel deploy and then migrate considering the scope of the change but someone PLEASE correct me if I’m wrong on that.
Based on what I’ve seen, the rewrite ACTUALLY sounds like it will make CF a solid choice. The problem here is that standing up a system like CF (or OpenShift or even OpenStack) are not things that should be taken lightly. You are going to be putting your PRODUCTION workloads on these systems. If you stand up CF now and then come back in three to six months telling everyone you have to transition to a new setup (regardless of the migration process), you risk burning a lot of personal capital.
Now on to the feedback
I incorrectly stated that CF used LXC and according to both Dave and James, that was incorrect. I can’t find the link that made me think that (poor form on my part). This is currently controlled by Warden (as I grok it).
James pointed me to an interesting blog post about how CF handles session state. One thing that’s interesting about this post is that it honestly isn’t even CF specific. However it still doesn’t address my concern about databases on a PaaS.
So the demo application is using redis as a session store. Great! We’re going to ignore the work that Kyle Kingsbury did on Redis with Jepsen for a minute.
What this article DOESN’T cover is how might I deploy a redis “cluster” to CF:
The post goes into terribly awesome detail about how to make your app handle the reconnection while conviently leaving out how one might deal with the loss of the redis instance itself. I mean let’s be fair. This post basically just told you how to write reconnect logic. It gives you all the APP bits but nothing about the INFRASTRUCTURE bits. I’ll address this at the end but it’s just more of the kind of thing that is driving me crazy about the magical PaaS landscape.
I’m going to disagree with James here. This video was recently posted from the CloudFoundry conference. While Onsi (who is now my new favorite speaker btw), doesn’t call these things “bugs”, I would consider the issues he brings up and the end results to be bugs. Again this is subjective but it does get to my primary area of concern addressed below.
James pointed me to this blog post about SAP building their nexgen PaaS on CF. While this is interesting and exciting (especially coming from a legacy like SAP) it means very little to me.
I said this SEVERAL times and reiterated it on Twitter but I want to clarify it one more time:
My questions and concerns, while very much focused on the developer experience, are MORE focused on the OPERATIONAL experience of running any of these products. Yes, there may be “hundreds of thousands of production apps” running on CloudFoundry (to quote James) but I want to know what the OPERATIONAL burden is to running those.
These are the things I care about (outside of the developer experience):
and this is just the SHORT list.
When Luke tells me the operations team running the hosted version of OpenShift says
That’s great but doesn’t mean ANYTHING to me. What matters to me is MY operational experience with MongoDB. Here I have one data point as a ‘positive’ and in my own experience and the documented experience of others AS well as the actual math done by Kyle Kingsbury with Jepsen, MongoDB is not suitable for any production workload I wish to manage.
Luke says “Was the use of MongoDB your only criticism here?” to which I would say “It’s not the only concern but it is the single LARGEST concern I have with OpenShift and one that immediately rules it out for me”.
Operations is hard to back with science in the same way that doing a Jepsen series is. In the end what we have to go in is best worded by my coworker Tim Freeman:
If the message here isn’t clear, the experience of running a platform by the authors of the platform means VERY little to me when it comes to deciding if I or my company should run it. There are plenty of tools I use daily that are SaaS that run on MongoDB (that I’m aware of and more that I’m not). There’s a valid argument about “should I trust someone who would wilfully choose MongoDB” but that’s not something I control. If the service does what I need and I haven’t been directly affected by MongoDB’s issues then I really don’t have any room to complain. If YOUR ops team wants to run product X, that’s great. My duty and responsibility is to my ops team, my developers and my business units.
Mark Imbriaco brought up a point that I do agree with (and explicitly state in my previous post) in response to me stating this concern:
but there is, again, a very subtle distinction here. An unspoken word and a bit of a mismatch in what I’m talking about. Let me restate Mark’s tweet with that word and clarify what I think he meant and what I definitely meant (Mark please please correct me if I’m wrong in your intention here):
Mark is 1000% right. Supporting a PaaS-hosted application is infinitely less complex than multiple inconsistent ones.
Supporting a PaaS however, is not infinitely less complex. It is MORE complex. Mark did follow on with this:
Now in fairness (and I love Mark to death and respect him immensely) that’s a bit of arrogant way to word it. EVERY environment, regardless of size, should deal with foundational issues such as deployment and runtime before adding another layer of complexity. Another point to keep in mind is that Mark has his background with Heroku. That’s not a positive or a negative it’s just a very important data point. Mark knows how to run a PaaS. He’s run arguably the largest public PaaS out there and dealt with all of its failure points.
Also no one has yet to address my concerns about the centralized management of the PaaS itself or the data IN that PaaS. This is something that Heroku is actually a very POOR model for as Heroku does not concern itself with those things (nor does it need to). While Heroku does offer and document how an individual might handle an HA or DR scenario note that Heroku doesn’t centrally backup every single database hosted on its platform. (It was pointed out to me that I misread the Heroku docs. All PGSQL dbs are backed up but there ARE limits related to the db that vary by tier). Also worth noting that Heroku’s own offering is PGSQL and that the addon providers are responsible that comparible service. When you are running your own PaaS you are not only Heroku but also that addon provider.
So to go back to the quote from Luke:
As I said, this is a good question but it’s indicative of the problems with all the solutions to date from the Docker based ones to CloudFoundry to OpenShift. It even extends to the IaaS offerings like OpenStack and CloudStack. Every single time the discussion is framed as “you should use this thing. It makes [deploying apps|managing apps|creating infrastructure|autoscaling|blah blah blah] so much easier and better.
And guess what? They’re all right. These tools DO make these things easier and in many cases better but they ALL (each and every one of them) ignore (and I would argue INTENTIONALLY) the question staring them in the face.
Who the fuck is going to RUN this shit?
I realize I was pretty down on PaaS the past couple of days. Lest I send the wrong message, I figure a clarification is in order
Before we start, we should define some things. It’s always important to be on the same page:
I also want to be clear that I ONLY care about production workloads. The reason I defined production the way I did is because only the end user can define the business criticality of a service or system function. If you consider an idle bench of engineers unable to work because your build farm is down a bad thing, then your build farm is “production”.
I also want to point out that I inherently belive that a Private PaaS is probably a really good thing for your business. My argument is largely that most enterprises are not ready for it and are not willing to live with the shift it will require.
Let’s go with the good news first. A PaaS (and more importantly a private PaaS) has a lot of benefits.
Most private PaaS solutions tend to follow the Heroku model of a PaaS. In the Heroku model, You follow a normal development workflow using your VCS as a model for deployment:
That’s the sum of the deployment. Your deployment to production is no different.
With Heroku, the “moving bits” of your stack are hidden from you. You don’t stand up a database in the traditional sense. You tell Heroku to wire up the database to your application as an add-on. Heroku exposes this add-on to your stack via environment variables. You reference those environment variables in your application code instead of hard-coded settings in property or yaml files. Both CloudFoundry and OpenShift follow the same model:
This is really awesome from a development perspective. You simply define the building blocks of your application, tell the platform to expose them to your application and off you go.
From an operations perspective, a private PaaS can create a consistent operational surface area. You spend less time worrying about individual operating systems. Your “host” nodes are largely a uniform target. Most of the private PaaS products ship with most common services prebuilt and ready to wire up to applications.
I would even argue that a private PaaS even simplifies the security model a bit as the concept of users are less relevant and much of the PaaS tooling is, by nature, provides proxy access to the things the developers need. Both of the dominant private PaaS solutions leverage kernel cgroups for resource management. Cloudfoundry uses LXC for isolation while OpenShift uses SELinux and MCS currently. I believe, however, that OpenShift is migrating to LXC as well.
Once your private PaaS is up and running, your development team is unleashed to deploy whatever and whenever they want. They aren’t waiting around for a full-fledged OS to be provisioned that needs further configuration just to be servicable. Developers are free to experiment with arbitrary components (provided they exist in the PaaS service catalog).
However not everything is rosy and bright in the land of the private PaaS. There are downsides as well - some cultural and some technical
Unless your private PaaS is a bespoke solution, you WILL have to change your application model. You cannot simply forklift an application into a PaaS. Your application must be designed not only to work in a PaaS environment but also to work in a specific PaaS.
Most traditional “enterprise” applications are not ready for a PaaS solution. Many will have to be significantly rewritten. The most common model for this is the 12 Factor Application.
I should state up front that I disagree with quite a few bits of the 12 Factor model. It’s important to remember that, imho, the 12 Factor model was designed as a business strategy for Heroku. The steps follow exactly what makes an app work best on Heroku, not what is best for an application.
Regardless, as the private PaaS solutions are largely modeled on Heroku you might as well state that 12 Factor is the way you’ll need to design your application.
As I said in my previous post, this really doesn’t exist. Your application has to be DESIGNED to scale this way. As Adrian Cockcroft pointed out in the comments to my previous post Netflix “overallocated” on the dependency side up front to minimize the need and impact of things like rebalancing data and load balancer scaling. It’s also worth noting that Netflix did NOT use a PaaS (though arguably the model for how they used AWS was PaaS-ish).
Most “enterprise” applications I’ve dealt with never scaled cleanly. They needed things like sticky sessions and made assumptions about data access paths. Quite frankly they also were not designed for this level of deployment volatility. I would go even further and say that if you have a release cycle measured in months, don’t bother.
Just like autoscaling, this is also not what you think it is. Unless your application maintains exactly ZERO state, then you will never see this benefit. Do you write files to critical files to disk in your application? Yep those are gone when you “magically autorecover”. The autorecovery that was promised you? It redeploys your application. Your state is lost and no you don’t have NFS or shared storage or anything to fall back to. Get used to shoving your blobs in your database. Oh but what if your database fails?
This is where it gets interesting. I’m still sussing out the recovery models for the two primary players in this space but most likely you will LOSE that data and have to restore from a backup. I’m sure someone will call me on this and I’m willing to listen but I do know for a fact that the autofailover model of things like your MySQL instance depend on migratable or shared storage (at least from my reading of the docs).
This all of course leads me to the next part
I alluded to this earlier but there are technical requirements that most companies are simply not ready for.
All applications are inherently distributed systems even if you don’t want to admit it. However a PaaS is more so than most shops are ready for. Let’s run down the components for the current version of CloudFoundry. I count 11 distinct components. If we move over to OpenShift I count 4 components.
Both of these applications use a service router, a message bus, a data store and n number of actual nodes running the deployed applications. In both cases, the documentation for these components requires you to already know how to scale and maintain these components. There are any number of places where these stacks can fall apart and break and you will need to be an expert in all of them.
Also one of the more hilarious bits I’ve found is the situation with DNS. I can’t count the number of shops where DNS changes where things like wildcard DNS were verboten. Good luck with the PaaS dyndns model!
To be clear while I feel that most organizations aren’t ready for the operational challenges of maintaining a PaaS, the job is made harder by the PaaS software. In both cases, the operational maturity of the products themselves simply isn’t there.
Look at the “operators” documentation here for CloudFoundry HA. I can sum it up for you pretty easily:
Basically they punt everything over to you as if to say “Fuck if we know. Use that thing you sysadmin types use to make shit redundant.
And lest you think OpenShift is any better, OpenShift uses MongoDB with this nice bit of information:
What I’m about to say I stand behind 100%. Any company that tells you that MongoDB is “reliable” is basically saying:
Any tool that uses MongoDB as its persistent datastore is a tool that is not worth even getting started with. You can call me out on this. You can tell me I have an irrational dislike of MongoDB. I don’t care. Having wasted too much time fighting MongoDB in even the most trivial of production scenarios I refuse to ever run it again. My life is too short and my time too valuable.
Additionally I’ve found next to zero documentation on how a seasoned professional (say a MySQL expert) is expected to tune the provisioned MySQL services. The best I can gather is that you are largely stuck with what the PaaS software ships in its service catalog. In the case of OpenShift you’re generally stuck with whatever ships with RHEL.
Another sign of operational immaturity I noticed in OpenShift is that for pushing a new catalog item you actually have to RESTART a service before it’s available.
After going over all the documentation for both tools and even throwing out some questions on twitter, disaster recovery in both tools basically boils down to another round of “good luck; have fun”.
Let’s assume your PaaS installation is a roaring success. You’ve got every developer in your org pushing random applications out to production. Self-service is the way of life. We’ve got databases flying all over the place.
How do you back them all up? Well this is a PaaS, Bob. It’s all about self-service. The developers should be backing them up.
WAT.
Again based on the research I’ve done (which isn’t 1000% exhaustive to be fair), I found zero documentation about how the administrator of the PaaS would back up all the data locked away in that PaaS from a unified central place. If your solution is to tell me that Susan’s laptop is where the backups of our production database lives, I’m going to laugh at you.
Affinity issues make the DR scenario even MORE scary. I have no way of saying “don’t run the MySQL database on the same node as my application”. This makes the risk surface area even more large. Combine that with the fact that a single host could be running multiple business critical applications. I realize that these tools have algos that are supposed to handle this for you but I’ve not seen any sort of policy enforcement mechanism for that in the documentation.
I don’t think ANY of the current private PaaS solutions are a fit right now. OpenShift is, imho, built on unsound ground. CloudFoundry in its current Ruby form is a mess of moving parts. In fairness CloudFoundry is going through a rewrite with some firm leadership behind it that I have quite a bit of faith in when it comes to operational concerns.
Additionally both tools are embracing containers and docker packaging to increase security but none of the tools offer, as far as I can tell, anything resembling a hybrid model. I don’t trust docker storage containers yet personally.
And I want to be clear. I’m not trying to be a BOFH here with all my talk of “placement policy” and “disaster recovery”. I fully embrace the idea of a private PaaS. I simply don’t embrace it in any of the current ecosystem. Even a modicum of due diligence should rule them both out until they address what are basic business sanity checks. These platforms require real operations to run and maintain. If you’re still throwing things over the wall to your operations team to deploy into your PaaS then you really haven’t gained anything. Unless your engineering organization is willing to step up to the shared responsibility inherent in a PaaS, then you definitely aren’t ready. Until then, your time and money is better spent optimizing and standardzing your development workflow and operational tooling to build your own psuedo-PaaS.
up up down down left right left right b a select start
I went on a bit of a rip today about all sorts of technology. I figured I should at least clarify some of it in long form.
Vmotion is a scam. I have frequently said that only trivial workloads are safe for vmotion. Here’s the reasoning:
Let’s also not forget that live migration claims to have accomplished a lot of things such as time travel. You may also know live motion technology by its other names like:
But hey it demos really well when you can keep watching that streaming video while your vm is moved from host to another.
Autoscaling is a myth. My reasoning behind this has similarities with vmotion/live migration.
Again we have a set of things we need to clarify:
I am not concerns with trivial workloads. Trivial workloads are…well…trivial. The largely cached static marketing website takes no effort whatsoever to scale. Oh look I just brought up a new server with the same static content! Instant capacity!
Let’s take a standard architecture here:
When I “autoscale” my caching layer, I now have to concern myself with the following things:
So sure, feel free to autoscale that group of memcache servers but your performance just went to through the floor. Now you’ve had a downstream affect on your database as you’re having to go to origin due to cache misses. Oh and by the way not all servers talking to the caching tier saw the same topology so now you’ve got possibly incorrect data you’re serving from the cache
When I autoscale my frontend, I’ve now add n number of connections to the database. How’s that network looking? Oh wait did you just autoscale to the point of starving the database of resources? Have you possible shot yourself in the foot because now the stuff that was working before is getting rejected because of connection counts?
Autoscaling load balancers is also a problem as you now have the issue of topology mismatch of your backends as well as dealing with session injection that was PREVIOUSLY handled by only one LB.
Finally let’s get to autoscaling our database. Vertical or horizontal, relational or “NoSQL” it doesn’t matter. If you vertically scale your DB, do you have to restart the process with larger memory allocations? What about rebalancing of data when you scale horizontally?
And we’ve not even gotten to if your application is actually ABLE to be autoscaled (are you entirely stateless? 12 factor friendly?).
Combining these things along with unmentioned downstream impacts and transitive dependencies, means that in most cases when you need to autoscale you won’t be able to respond to the workload for some time. It’s possible that AFTER that time has passed, the workload may be gone.
And let’s not even talk about trying to unwind all that madness via scale down.
This is almost the most egregious of them all. It ranks right up there with “private cloud” in the bullshit-o-meter department. Resources are not infinite.
I have a bit of a guidepost I use when thinking about “new” functionality in applications.
In most cases, the landscape is either saturated with business whose core focus and expertise is on that concept/functionality. In worst cases the majority of the businesses in that space are failing. Think long and hard about if you have the expertise to do this thing.
PaaS and IaaS are in the same boat. I’m a bit more harsh on the IaaS front as I truly believe that if an operations team had been able to deliver on the promise of virtualization but couldn’t (for any reason) then sticking ANOTHER layer on top isn’t going to magically make it work. The platform still has real hardware under the covers that has the same limitations it had before - bandwidth capcity, io, patching of hypervisors. This stuff doesn’t just disappear. In many cases you can actually hit a wall VERY early on for capacity issues.
This slide deck about Cloudstack Hypervisor choices is an amazing read for understanding limitations. Some of these are actually imposed by the hypervisor:
There’s no cheat code for this shit, folks. Very few PaaS and IaaS products tackle operational issues at all. Time to first success is important but not if it comes at the expense of cost to operate over time. Yes, I can sudocurlbash your product on to my system but that’s trivial. How do I deal with:
IaaS actualy isn’t as bad as a PaaS in some of those but they both have issues. PaaS is mainly worse because you have adopt into an ecosystem and philosophy (not that 12 factor isn’t entire good but it’s a start) if you want to have any real success.
You will NOT forklift a workload into one of these models and be successful in the long term. In the short term you will simply have given someone else a lot of your money.
I drove a forklift for two years. I know forklifts.
I’m not saying that people can’t be successful at these things. Clearly they are to some degree. But that’s only the public face. How much shit did they have to wade through to make this work? Where are the bits of baling wire, duct tape and a healthy belief in a higher power that keep it from just failling over the edge of the abyss?
Anyway that’s just a short list of things from a very tired and worn out person with less hair than he started the day with. I know I shouldn’t get mad about this stuff but it’s hard when the people trying to smokescreen you ARE you in a sense (professionally speaking). Frankly I’m just tired of people thinking that the operational aspects of this stuff are irrelevant because somebody promised them “autoscaling selfhealing magical rainbow-colored unicorn piss in a bottle” where they didn’t have to interact with operations folks ever again.
